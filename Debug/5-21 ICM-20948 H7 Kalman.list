
5-21 ICM-20948 H7 Kalman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9d8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  0800eca8  0800eca8  0000fca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f35c  0800f35c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f364  0800f364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f368  0800f368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  0800f36c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004e4  240001e0  0800f54c  000111e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240006c4  0800f54c  000116c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016a1a  00000000  00000000  0001120e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031f8  00000000  00000000  00027c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fe0  00000000  00000000  0002ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c16  00000000  00000000  0002be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034e41  00000000  00000000  0002ca16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017637  00000000  00000000  00061857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00148add  00000000  00000000  00078e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c196b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005130  00000000  00000000  001c19b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001c6ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ec90 	.word	0x0800ec90

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	0800ec90 	.word	0x0800ec90

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_DMA_Init+0x4c>)
 80006f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <MX_DMA_Init+0x4c>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <MX_DMA_Init+0x4c>)
 8000704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	200e      	movs	r0, #14
 8000716:	f002 fe58 	bl	80033ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800071a:	200e      	movs	r0, #14
 800071c:	f002 fe6f 	bl	80033fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200f      	movs	r0, #15
 8000726:	f002 fe50 	bl	80033ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800072a:	200f      	movs	r0, #15
 800072c:	f002 fe67 	bl	80033fe <HAL_NVIC_EnableIRQ>

}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	58024400 	.word	0x58024400

0800073c <filters_init>:

static float apply_pt1_filter(float input, float *state, float cutoff_hz);
static float apply_pt2_filter(float input, float *state, float cutoff_hz);

void filters_init(filter_state_t *state)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    memset(state, 0, sizeof(filter_state_t));
 8000744:	2234      	movs	r2, #52	@ 0x34
 8000746:	2100      	movs	r1, #0
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f00c f852 	bl	800c7f2 <memset>
    state->is_calibrated = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <filters_calibrate_gyro>:

void filters_calibrate_gyro(filter_state_t *state)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b090      	sub	sp, #64	@ 0x40
 8000760:	af06      	add	r7, sp, #24
 8000762:	6078      	str	r0, [r7, #4]
    axises temp;
    float sum[3] = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
 8000774:	e022      	b.n	80007bc <filters_calibrate_gyro+0x60>
        icm20948_gyro_read_dps(&temp);
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fe94 	bl	80014a8 <icm20948_gyro_read_dps>
        sum[0] += temp.x;
 8000780:	ed97 7a03 	vldr	s14, [r7, #12]
 8000784:	edd7 7a06 	vldr	s15, [r7, #24]
 8000788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078c:	edc7 7a03 	vstr	s15, [r7, #12]
        sum[1] += temp.y;
 8000790:	ed97 7a04 	vldr	s14, [r7, #16]
 8000794:	edd7 7a07 	vldr	s15, [r7, #28]
 8000798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800079c:	edc7 7a04 	vstr	s15, [r7, #16]
        sum[2] += temp.z;
 80007a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80007a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80007a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ac:	edc7 7a05 	vstr	s15, [r7, #20]
        HAL_Delay(2);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f002 fd0b 	bl	80031cc <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 80007b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b8:	3301      	adds	r3, #1
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80007bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80007c2:	dbd8      	blt.n	8000776 <filters_calibrate_gyro+0x1a>
    }
    state->gyro_bias[0] = sum[0] / CALIBRATION_SAMPLES;
 80007c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80007c8:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8000854 <filters_calibrate_gyro+0xf8>
 80007cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	edc3 7a01 	vstr	s15, [r3, #4]
    state->gyro_bias[1] = sum[1] / CALIBRATION_SAMPLES;
 80007d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80007da:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000854 <filters_calibrate_gyro+0xf8>
 80007de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	edc3 7a02 	vstr	s15, [r3, #8]
    state->gyro_bias[2] = sum[2] / CALIBRATION_SAMPLES;
 80007e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80007ec:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8000854 <filters_calibrate_gyro+0xf8>
 80007f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	edc3 7a03 	vstr	s15, [r3, #12]
    snprintf(uart_buf, sizeof(uart_buf), "Gyro Bias Sum: X=%.2f, Y=%.2f, Z=%.2f\r\n",
             sum[0], sum[1], sum[2]);
 80007fa:	edd7 7a03 	vldr	s15, [r7, #12]
    snprintf(uart_buf, sizeof(uart_buf), "Gyro Bias Sum: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80007fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
             sum[0], sum[1], sum[2]);
 8000802:	edd7 6a04 	vldr	s13, [r7, #16]
    snprintf(uart_buf, sizeof(uart_buf), "Gyro Bias Sum: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000806:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
             sum[0], sum[1], sum[2]);
 800080a:	edd7 5a05 	vldr	s11, [r7, #20]
    snprintf(uart_buf, sizeof(uart_buf), "Gyro Bias Sum: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800080e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000812:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000816:	ed8d 6b02 	vstr	d6, [sp, #8]
 800081a:	ed8d 7b00 	vstr	d7, [sp]
 800081e:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <filters_calibrate_gyro+0xfc>)
 8000820:	21c8      	movs	r1, #200	@ 0xc8
 8000822:	480e      	ldr	r0, [pc, #56]	@ (800085c <filters_calibrate_gyro+0x100>)
 8000824:	f00b ff6c 	bl	800c700 <sniprintf>
    HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <filters_calibrate_gyro+0x100>)
 800082a:	f7ff fdc1 	bl	80003b0 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	b29a      	uxth	r2, r3
 8000832:	2364      	movs	r3, #100	@ 0x64
 8000834:	4909      	ldr	r1, [pc, #36]	@ (800085c <filters_calibrate_gyro+0x100>)
 8000836:	480a      	ldr	r0, [pc, #40]	@ (8000860 <filters_calibrate_gyro+0x104>)
 8000838:	f00a f84d 	bl	800a8d6 <HAL_UART_Transmit>
    state->is_calibrated |= 0x01;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	b2da      	uxtb	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	701a      	strb	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	@ 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	43fa0000 	.word	0x43fa0000
 8000858:	0800eca8 	.word	0x0800eca8
 800085c:	2400021c 	.word	0x2400021c
 8000860:	240004e0 	.word	0x240004e0

08000864 <filters_calibrate_accel>:

void filters_calibrate_accel(filter_state_t *state)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    axises temp;
    float sum[3] = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
 800087c:	e026      	b.n	80008cc <filters_calibrate_accel+0x68>
        icm20948_accel_read_g(&temp);
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fe3e 	bl	8001504 <icm20948_accel_read_g>
        sum[0] += temp.x;
 8000888:	ed97 7a03 	vldr	s14, [r7, #12]
 800088c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000894:	edc7 7a03 	vstr	s15, [r7, #12]
        sum[1] += temp.y;
 8000898:	ed97 7a04 	vldr	s14, [r7, #16]
 800089c:	edd7 7a07 	vldr	s15, [r7, #28]
 80008a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a4:	edc7 7a04 	vstr	s15, [r7, #16]
        sum[2] += (temp.z - 1.0f);
 80008a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80008ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80008b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80008b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80008b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008bc:	edc7 7a05 	vstr	s15, [r7, #20]
        HAL_Delay(2);
 80008c0:	2002      	movs	r0, #2
 80008c2:	f002 fc83 	bl	80031cc <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 80008c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c8:	3301      	adds	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80008cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008d2:	dbd4      	blt.n	800087e <filters_calibrate_accel+0x1a>
    }
    state->accel_bias[0] = sum[0] / CALIBRATION_SAMPLES;
 80008d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80008d8:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000920 <filters_calibrate_accel+0xbc>
 80008dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	edc3 7a04 	vstr	s15, [r3, #16]
    state->accel_bias[1] = sum[1] / CALIBRATION_SAMPLES;
 80008e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80008ea:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000920 <filters_calibrate_accel+0xbc>
 80008ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	edc3 7a05 	vstr	s15, [r3, #20]
    state->accel_bias[2] = sum[2] / CALIBRATION_SAMPLES;
 80008f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80008fc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000920 <filters_calibrate_accel+0xbc>
 8000900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	edc3 7a06 	vstr	s15, [r3, #24]
    state->is_calibrated |= 0x02;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	b2da      	uxtb	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	701a      	strb	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	43fa0000 	.word	0x43fa0000

08000924 <filters_apply_gyro>:

void filters_apply_gyro(filtered_axises *gyro_data, filter_state_t *state)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b094      	sub	sp, #80	@ 0x50
 8000928:	af08      	add	r7, sp, #32
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
    static uint8_t print_counter = 0;
    const uint8_t print_interval = 70;
 800092e:	2346      	movs	r3, #70	@ 0x46
 8000930:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    axises raw_data;

    print_counter++;
 8000934:	4b47      	ldr	r3, [pc, #284]	@ (8000a54 <filters_apply_gyro+0x130>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <filters_apply_gyro+0x130>)
 800093e:	701a      	strb	r2, [r3, #0]
    if (print_counter >= print_interval) {
 8000940:	4b44      	ldr	r3, [pc, #272]	@ (8000a54 <filters_apply_gyro+0x130>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000948:	429a      	cmp	r2, r3
 800094a:	f200 8209 	bhi.w	8000d60 <filters_apply_gyro+0x43c>
        snprintf(uart_buf, sizeof(uart_buf), "\r\n--- Gyro Data ---\r\n");
 800094e:	4a42      	ldr	r2, [pc, #264]	@ (8000a58 <filters_apply_gyro+0x134>)
 8000950:	21c8      	movs	r1, #200	@ 0xc8
 8000952:	4842      	ldr	r0, [pc, #264]	@ (8000a5c <filters_apply_gyro+0x138>)
 8000954:	f00b fed4 	bl	800c700 <sniprintf>
        HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8000958:	4840      	ldr	r0, [pc, #256]	@ (8000a5c <filters_apply_gyro+0x138>)
 800095a:	f7ff fd29 	bl	80003b0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	2364      	movs	r3, #100	@ 0x64
 8000964:	493d      	ldr	r1, [pc, #244]	@ (8000a5c <filters_apply_gyro+0x138>)
 8000966:	483e      	ldr	r0, [pc, #248]	@ (8000a60 <filters_apply_gyro+0x13c>)
 8000968:	f009 ffb5 	bl	800a8d6 <HAL_UART_Transmit>

        icm20948_gyro_read(&raw_data);
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fca7 	bl	80012c4 <icm20948_gyro_read>
        snprintf(uart_buf, sizeof(uart_buf), "Raw Gyro ADC | X: %6d | Y: %6d | Z: %6d\r\n",
                 (int)raw_data.x, (int)raw_data.y, (int)raw_data.z);
 8000976:	edd7 7a02 	vldr	s15, [r7, #8]
        snprintf(uart_buf, sizeof(uart_buf), "Raw Gyro ADC | X: %6d | Y: %6d | Z: %6d\r\n",
 800097a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
                 (int)raw_data.x, (int)raw_data.y, (int)raw_data.z);
 800097e:	edd7 7a03 	vldr	s15, [r7, #12]
        snprintf(uart_buf, sizeof(uart_buf), "Raw Gyro ADC | X: %6d | Y: %6d | Z: %6d\r\n",
 8000982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000986:	ee17 3a90 	vmov	r3, s15
                 (int)raw_data.x, (int)raw_data.y, (int)raw_data.z);
 800098a:	edd7 7a04 	vldr	s15, [r7, #16]
        snprintf(uart_buf, sizeof(uart_buf), "Raw Gyro ADC | X: %6d | Y: %6d | Z: %6d\r\n",
 800098e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000992:	ee17 2a90 	vmov	r2, s15
 8000996:	9201      	str	r2, [sp, #4]
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	ee17 3a10 	vmov	r3, s14
 800099e:	4a31      	ldr	r2, [pc, #196]	@ (8000a64 <filters_apply_gyro+0x140>)
 80009a0:	21c8      	movs	r1, #200	@ 0xc8
 80009a2:	482e      	ldr	r0, [pc, #184]	@ (8000a5c <filters_apply_gyro+0x138>)
 80009a4:	f00b feac 	bl	800c700 <sniprintf>
        HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 80009a8:	482c      	ldr	r0, [pc, #176]	@ (8000a5c <filters_apply_gyro+0x138>)
 80009aa:	f7ff fd01 	bl	80003b0 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	2364      	movs	r3, #100	@ 0x64
 80009b4:	4929      	ldr	r1, [pc, #164]	@ (8000a5c <filters_apply_gyro+0x138>)
 80009b6:	482a      	ldr	r0, [pc, #168]	@ (8000a60 <filters_apply_gyro+0x13c>)
 80009b8:	f009 ff8d 	bl	800a8d6 <HAL_UART_Transmit>

        icm20948_gyro_read_dps(&raw_data);
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fd71 	bl	80014a8 <icm20948_gyro_read_dps>
        if (isnan(raw_data.x) || isnan(raw_data.y) || isnan(raw_data.z)) {
 80009c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80009ca:	eef4 7a67 	vcmp.f32	s15, s15
 80009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d2:	d60d      	bvs.n	80009f0 <filters_apply_gyro+0xcc>
 80009d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80009d8:	eef4 7a67 	vcmp.f32	s15, s15
 80009dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e0:	d606      	bvs.n	80009f0 <filters_apply_gyro+0xcc>
 80009e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80009e6:	eef4 7a67 	vcmp.f32	s15, s15
 80009ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ee:	d73d      	bvc.n	8000a6c <filters_apply_gyro+0x148>
            snprintf(uart_buf, sizeof(uart_buf), "Invalid Raw Gyro DPS | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
                     raw_data.x, raw_data.y, raw_data.z);
 80009f0:	edd7 7a02 	vldr	s15, [r7, #8]
            snprintf(uart_buf, sizeof(uart_buf), "Invalid Raw Gyro DPS | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
 80009f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                     raw_data.x, raw_data.y, raw_data.z);
 80009f8:	edd7 6a03 	vldr	s13, [r7, #12]
            snprintf(uart_buf, sizeof(uart_buf), "Invalid Raw Gyro DPS | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
 80009fc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                     raw_data.x, raw_data.y, raw_data.z);
 8000a00:	edd7 5a04 	vldr	s11, [r7, #16]
            snprintf(uart_buf, sizeof(uart_buf), "Invalid Raw Gyro DPS | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
 8000a04:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000a08:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000a0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a10:	ed8d 7b00 	vstr	d7, [sp]
 8000a14:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <filters_apply_gyro+0x144>)
 8000a16:	21c8      	movs	r1, #200	@ 0xc8
 8000a18:	4810      	ldr	r0, [pc, #64]	@ (8000a5c <filters_apply_gyro+0x138>)
 8000a1a:	f00b fe71 	bl	800c700 <sniprintf>
            HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8000a1e:	480f      	ldr	r0, [pc, #60]	@ (8000a5c <filters_apply_gyro+0x138>)
 8000a20:	f7ff fcc6 	bl	80003b0 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	2364      	movs	r3, #100	@ 0x64
 8000a2a:	490c      	ldr	r1, [pc, #48]	@ (8000a5c <filters_apply_gyro+0x138>)
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <filters_apply_gyro+0x13c>)
 8000a2e:	f009 ff52 	bl	800a8d6 <HAL_UART_Transmit>
            gyro_data->x = gyro_data->y = gyro_data->z = 0;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f04f 0200 	mov.w	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
            print_counter = 0;
 8000a4a:	4b02      	ldr	r3, [pc, #8]	@ (8000a54 <filters_apply_gyro+0x130>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
            return;
 8000a50:	e2a6      	b.n	8000fa0 <filters_apply_gyro+0x67c>
 8000a52:	bf00      	nop
 8000a54:	240001fc 	.word	0x240001fc
 8000a58:	0800ecd0 	.word	0x0800ecd0
 8000a5c:	2400021c 	.word	0x2400021c
 8000a60:	240004e0 	.word	0x240004e0
 8000a64:	0800ece8 	.word	0x0800ece8
 8000a68:	0800ed14 	.word	0x0800ed14
        }
        snprintf(uart_buf, sizeof(uart_buf), "Raw Gyro DPS | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
                 raw_data.x, raw_data.y, raw_data.z);
 8000a6c:	edd7 7a02 	vldr	s15, [r7, #8]
        snprintf(uart_buf, sizeof(uart_buf), "Raw Gyro DPS | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
 8000a70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                 raw_data.x, raw_data.y, raw_data.z);
 8000a74:	edd7 6a03 	vldr	s13, [r7, #12]
        snprintf(uart_buf, sizeof(uart_buf), "Raw Gyro DPS | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
 8000a78:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                 raw_data.x, raw_data.y, raw_data.z);
 8000a7c:	edd7 5a04 	vldr	s11, [r7, #16]
        snprintf(uart_buf, sizeof(uart_buf), "Raw Gyro DPS | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
 8000a80:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000a84:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000a88:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a8c:	ed8d 7b00 	vstr	d7, [sp]
 8000a90:	4ac7      	ldr	r2, [pc, #796]	@ (8000db0 <filters_apply_gyro+0x48c>)
 8000a92:	21c8      	movs	r1, #200	@ 0xc8
 8000a94:	48c7      	ldr	r0, [pc, #796]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000a96:	f00b fe33 	bl	800c700 <sniprintf>
        HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8000a9a:	48c6      	ldr	r0, [pc, #792]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000a9c:	f7ff fc88 	bl	80003b0 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	2364      	movs	r3, #100	@ 0x64
 8000aa6:	49c3      	ldr	r1, [pc, #780]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000aa8:	48c3      	ldr	r0, [pc, #780]	@ (8000db8 <filters_apply_gyro+0x494>)
 8000aaa:	f009 ff14 	bl	800a8d6 <HAL_UART_Transmit>

        if (state->is_calibrated & 0x01) {
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d03b      	beq.n	8000b32 <filters_apply_gyro+0x20e>
            raw_data.x -= state->gyro_bias[0];
 8000aba:	ed97 7a02 	vldr	s14, [r7, #8]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac8:	edc7 7a02 	vstr	s15, [r7, #8]
            raw_data.y -= state->gyro_bias[1];
 8000acc:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ada:	edc7 7a03 	vstr	s15, [r7, #12]
            raw_data.z -= state->gyro_bias[2];
 8000ade:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aec:	edc7 7a04 	vstr	s15, [r7, #16]
            snprintf(uart_buf, sizeof(uart_buf), "Bias-Corrected | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
                     raw_data.x, raw_data.y, raw_data.z);
 8000af0:	edd7 7a02 	vldr	s15, [r7, #8]
            snprintf(uart_buf, sizeof(uart_buf), "Bias-Corrected | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
 8000af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                     raw_data.x, raw_data.y, raw_data.z);
 8000af8:	edd7 6a03 	vldr	s13, [r7, #12]
            snprintf(uart_buf, sizeof(uart_buf), "Bias-Corrected | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
 8000afc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                     raw_data.x, raw_data.y, raw_data.z);
 8000b00:	edd7 5a04 	vldr	s11, [r7, #16]
            snprintf(uart_buf, sizeof(uart_buf), "Bias-Corrected | X: %6.2f | Y: %6.2f | Z: %6.2f\r\n",
 8000b04:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000b08:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000b0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b10:	ed8d 7b00 	vstr	d7, [sp]
 8000b14:	4aa9      	ldr	r2, [pc, #676]	@ (8000dbc <filters_apply_gyro+0x498>)
 8000b16:	21c8      	movs	r1, #200	@ 0xc8
 8000b18:	48a6      	ldr	r0, [pc, #664]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000b1a:	f00b fdf1 	bl	800c700 <sniprintf>
            HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8000b1e:	48a5      	ldr	r0, [pc, #660]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000b20:	f7ff fc46 	bl	80003b0 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	2364      	movs	r3, #100	@ 0x64
 8000b2a:	49a2      	ldr	r1, [pc, #648]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000b2c:	48a2      	ldr	r0, [pc, #648]	@ (8000db8 <filters_apply_gyro+0x494>)
 8000b2e:	f009 fed2 	bl	800a8d6 <HAL_UART_Transmit>
        }

        float mag = sqrtf(raw_data.x * raw_data.x + raw_data.y * raw_data.y + raw_data.z * raw_data.z);
 8000b32:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b36:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b3e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b42:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b4e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000b52:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b62:	f00d fea3 	bl	800e8ac <sqrtf>
 8000b66:	ed87 0a07 	vstr	s0, [r7, #28]
        float pt1_cutoff_hz = PT1_CUTOFF_HZ_MIN + (PT1_CUTOFF_HZ_MAX - PT1_CUTOFF_HZ_MIN) * (mag / 600.0f);
 8000b6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000b6e:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8000dc0 <filters_apply_gyro+0x49c>
 8000b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b76:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8000dd0 <filters_apply_gyro+0x4ac>
 8000b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b86:	edc7 7a06 	vstr	s15, [r7, #24]
        pt1_cutoff_hz = fmaxf(PT1_CUTOFF_HZ_MIN, fminf(PT1_CUTOFF_HZ_MAX, pt1_cutoff_hz));
 8000b8a:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8000ddc <filters_apply_gyro+0x4b8>
 8000b8e:	ed97 0a06 	vldr	s0, [r7, #24]
 8000b92:	f00d fec6 	bl	800e922 <fminf>
 8000b96:	eef0 7a40 	vmov.f32	s15, s0
 8000b9a:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8000b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba2:	f00d fea1 	bl	800e8e8 <fmaxf>
 8000ba6:	ed87 0a06 	vstr	s0, [r7, #24]
        gyro_data->x = apply_pt1_filter(raw_data.x, &state->gyro_pt1_state[0], pt1_cutoff_hz);
 8000baa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	331c      	adds	r3, #28
 8000bb2:	edd7 0a06 	vldr	s1, [r7, #24]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	f000 fa30 	bl	8001020 <apply_pt1_filter>
 8000bc0:	eef0 7a40 	vmov.f32	s15, s0
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	edc3 7a00 	vstr	s15, [r3]
        gyro_data->y = apply_pt1_filter(raw_data.y, &state->gyro_pt1_state[1], pt1_cutoff_hz);
 8000bca:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	3320      	adds	r3, #32
 8000bd2:	edd7 0a06 	vldr	s1, [r7, #24]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	f000 fa20 	bl	8001020 <apply_pt1_filter>
 8000be0:	eef0 7a40 	vmov.f32	s15, s0
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro_data->z = apply_pt1_filter(raw_data.z, &state->gyro_pt1_state[2], pt1_cutoff_hz);
 8000bea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	3324      	adds	r3, #36	@ 0x24
 8000bf2:	edd7 0a06 	vldr	s1, [r7, #24]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfc:	f000 fa10 	bl	8001020 <apply_pt1_filter>
 8000c00:	eef0 7a40 	vmov.f32	s15, s0
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	edc3 7a02 	vstr	s15, [r3, #8]
        snprintf(uart_buf, sizeof(uart_buf), "PT1 Output   | X: %6.2f | Y: %6.2f | Z: %6.2f | Cutoff: %.1f Hz\r\n",
                 gyro_data->x, gyro_data->y, gyro_data->z, pt1_cutoff_hz);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	edd3 7a00 	vldr	s15, [r3]
        snprintf(uart_buf, sizeof(uart_buf), "PT1 Output   | X: %6.2f | Y: %6.2f | Z: %6.2f | Cutoff: %.1f Hz\r\n",
 8000c10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                 gyro_data->x, gyro_data->y, gyro_data->z, pt1_cutoff_hz);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	edd3 6a01 	vldr	s13, [r3, #4]
        snprintf(uart_buf, sizeof(uart_buf), "PT1 Output   | X: %6.2f | Y: %6.2f | Z: %6.2f | Cutoff: %.1f Hz\r\n",
 8000c1a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                 gyro_data->x, gyro_data->y, gyro_data->z, pt1_cutoff_hz);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	edd3 5a02 	vldr	s11, [r3, #8]
        snprintf(uart_buf, sizeof(uart_buf), "PT1 Output   | X: %6.2f | Y: %6.2f | Z: %6.2f | Cutoff: %.1f Hz\r\n",
 8000c24:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000c28:	edd7 4a06 	vldr	s9, [r7, #24]
 8000c2c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000c30:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000c34:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000c38:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c3c:	ed8d 7b00 	vstr	d7, [sp]
 8000c40:	4a60      	ldr	r2, [pc, #384]	@ (8000dc4 <filters_apply_gyro+0x4a0>)
 8000c42:	21c8      	movs	r1, #200	@ 0xc8
 8000c44:	485b      	ldr	r0, [pc, #364]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000c46:	f00b fd5b 	bl	800c700 <sniprintf>
        HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8000c4a:	485a      	ldr	r0, [pc, #360]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000c4c:	f7ff fbb0 	bl	80003b0 <strlen>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	2364      	movs	r3, #100	@ 0x64
 8000c56:	4957      	ldr	r1, [pc, #348]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000c58:	4857      	ldr	r0, [pc, #348]	@ (8000db8 <filters_apply_gyro+0x494>)
 8000c5a:	f009 fe3c 	bl	800a8d6 <HAL_UART_Transmit>

        float pt2_cutoff_hz = PT2_CUTOFF_HZ_MIN + (PT2_CUTOFF_HZ_MAX - PT2_CUTOFF_HZ_MIN) * (mag / 600.0f);
 8000c5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c62:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8000dc0 <filters_apply_gyro+0x49c>
 8000c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c6a:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8000ddc <filters_apply_gyro+0x4b8>
 8000c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c72:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8000ddc <filters_apply_gyro+0x4b8>
 8000c76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c7a:	edc7 7a05 	vstr	s15, [r7, #20]
        pt2_cutoff_hz = fmaxf(PT2_CUTOFF_HZ_MIN, fminf(PT2_CUTOFF_HZ_MAX, pt2_cutoff_hz));
 8000c7e:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8000dd8 <filters_apply_gyro+0x4b4>
 8000c82:	ed97 0a05 	vldr	s0, [r7, #20]
 8000c86:	f00d fe4c 	bl	800e922 <fminf>
 8000c8a:	eef0 7a40 	vmov.f32	s15, s0
 8000c8e:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8000ddc <filters_apply_gyro+0x4b8>
 8000c92:	eeb0 0a67 	vmov.f32	s0, s15
 8000c96:	f00d fe27 	bl	800e8e8 <fmaxf>
 8000c9a:	ed87 0a05 	vstr	s0, [r7, #20]
        gyro_data->x = apply_pt2_filter(gyro_data->x, &state->gyro_pt2_state[0], pt2_cutoff_hz);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	edd3 7a00 	vldr	s15, [r3]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	3328      	adds	r3, #40	@ 0x28
 8000ca8:	edd7 0a05 	vldr	s1, [r7, #20]
 8000cac:	4618      	mov	r0, r3
 8000cae:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb2:	f000 fa01 	bl	80010b8 <apply_pt2_filter>
 8000cb6:	eef0 7a40 	vmov.f32	s15, s0
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	edc3 7a00 	vstr	s15, [r3]
        gyro_data->y = apply_pt2_filter(gyro_data->y, &state->gyro_pt2_state[1], pt2_cutoff_hz);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	332c      	adds	r3, #44	@ 0x2c
 8000cca:	edd7 0a05 	vldr	s1, [r7, #20]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd4:	f000 f9f0 	bl	80010b8 <apply_pt2_filter>
 8000cd8:	eef0 7a40 	vmov.f32	s15, s0
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro_data->z = apply_pt2_filter(gyro_data->z, &state->gyro_pt2_state[2], pt2_cutoff_hz);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	3330      	adds	r3, #48	@ 0x30
 8000cec:	edd7 0a05 	vldr	s1, [r7, #20]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf6:	f000 f9df 	bl	80010b8 <apply_pt2_filter>
 8000cfa:	eef0 7a40 	vmov.f32	s15, s0
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	edc3 7a02 	vstr	s15, [r3, #8]
        snprintf(uart_buf, sizeof(uart_buf), "PT2 Output   | X: %6.2f | Y: %6.2f | Z: %6.2f | Cutoff: %.1f Hz\r\n",
                 gyro_data->x, gyro_data->y, gyro_data->z, pt2_cutoff_hz);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	edd3 7a00 	vldr	s15, [r3]
        snprintf(uart_buf, sizeof(uart_buf), "PT2 Output   | X: %6.2f | Y: %6.2f | Z: %6.2f | Cutoff: %.1f Hz\r\n",
 8000d0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                 gyro_data->x, gyro_data->y, gyro_data->z, pt2_cutoff_hz);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	edd3 6a01 	vldr	s13, [r3, #4]
        snprintf(uart_buf, sizeof(uart_buf), "PT2 Output   | X: %6.2f | Y: %6.2f | Z: %6.2f | Cutoff: %.1f Hz\r\n",
 8000d14:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                 gyro_data->x, gyro_data->y, gyro_data->z, pt2_cutoff_hz);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	edd3 5a02 	vldr	s11, [r3, #8]
        snprintf(uart_buf, sizeof(uart_buf), "PT2 Output   | X: %6.2f | Y: %6.2f | Z: %6.2f | Cutoff: %.1f Hz\r\n",
 8000d1e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000d22:	edd7 4a05 	vldr	s9, [r7, #20]
 8000d26:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000d2a:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000d2e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000d32:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d36:	ed8d 7b00 	vstr	d7, [sp]
 8000d3a:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <filters_apply_gyro+0x4a4>)
 8000d3c:	21c8      	movs	r1, #200	@ 0xc8
 8000d3e:	481d      	ldr	r0, [pc, #116]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000d40:	f00b fcde 	bl	800c700 <sniprintf>
        HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8000d44:	481b      	ldr	r0, [pc, #108]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000d46:	f7ff fb33 	bl	80003b0 <strlen>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	2364      	movs	r3, #100	@ 0x64
 8000d50:	4918      	ldr	r1, [pc, #96]	@ (8000db4 <filters_apply_gyro+0x490>)
 8000d52:	4819      	ldr	r0, [pc, #100]	@ (8000db8 <filters_apply_gyro+0x494>)
 8000d54:	f009 fdbf 	bl	800a8d6 <HAL_UART_Transmit>

        print_counter = 0;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <filters_apply_gyro+0x4a8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e11f      	b.n	8000fa0 <filters_apply_gyro+0x67c>
    } else {
        icm20948_gyro_read_dps(&raw_data);
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fb9f 	bl	80014a8 <icm20948_gyro_read_dps>
        if (isnan(raw_data.x) || isnan(raw_data.y) || isnan(raw_data.z)) {
 8000d6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d6e:	eef4 7a67 	vcmp.f32	s15, s15
 8000d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d76:	d60d      	bvs.n	8000d94 <filters_apply_gyro+0x470>
 8000d78:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d7c:	eef4 7a67 	vcmp.f32	s15, s15
 8000d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d84:	d606      	bvs.n	8000d94 <filters_apply_gyro+0x470>
 8000d86:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d8a:	eef4 7a67 	vcmp.f32	s15, s15
 8000d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d92:	d725      	bvc.n	8000de0 <filters_apply_gyro+0x4bc>
            gyro_data->x = gyro_data->y = gyro_data->z = 0;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
            return;
 8000dac:	e0f8      	b.n	8000fa0 <filters_apply_gyro+0x67c>
 8000dae:	bf00      	nop
 8000db0:	0800ed4c 	.word	0x0800ed4c
 8000db4:	2400021c 	.word	0x2400021c
 8000db8:	240004e0 	.word	0x240004e0
 8000dbc:	0800ed7c 	.word	0x0800ed7c
 8000dc0:	44160000 	.word	0x44160000
 8000dc4:	0800edb0 	.word	0x0800edb0
 8000dc8:	0800edf4 	.word	0x0800edf4
 8000dcc:	240001fc 	.word	0x240001fc
 8000dd0:	42280000 	.word	0x42280000
 8000dd4:	44fa0000 	.word	0x44fa0000
 8000dd8:	42c80000 	.word	0x42c80000
 8000ddc:	42480000 	.word	0x42480000
        }
        if (state->is_calibrated & 0x01) {
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d01a      	beq.n	8000e22 <filters_apply_gyro+0x4fe>
            raw_data.x -= state->gyro_bias[0];
 8000dec:	ed97 7a02 	vldr	s14, [r7, #8]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dfa:	edc7 7a02 	vstr	s15, [r7, #8]
            raw_data.y -= state->gyro_bias[1];
 8000dfe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0c:	edc7 7a03 	vstr	s15, [r7, #12]
            raw_data.z -= state->gyro_bias[2];
 8000e10:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e1e:	edc7 7a04 	vstr	s15, [r7, #16]
        }
        float mag = sqrtf(raw_data.x * raw_data.x + raw_data.y * raw_data.y + raw_data.z * raw_data.z);
 8000e22:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e26:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e2e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000e32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e3e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000e42:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e52:	f00d fd2b 	bl	800e8ac <sqrtf>
 8000e56:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        float pt1_cutoff_hz = PT1_CUTOFF_HZ_MIN + (PT1_CUTOFF_HZ_MAX - PT1_CUTOFF_HZ_MIN) * (mag / 2000.0f);
 8000e5a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000e5e:	ed5f 6a23 	vldr	s13, [pc, #-140]	@ 8000dd4 <filters_apply_gyro+0x4b0>
 8000e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e66:	ed1f 7a26 	vldr	s14, [pc, #-152]	@ 8000dd0 <filters_apply_gyro+0x4ac>
 8000e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e6e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        pt1_cutoff_hz = fmaxf(PT1_CUTOFF_HZ_MIN, fminf(PT1_CUTOFF_HZ_MAX, pt1_cutoff_hz));
 8000e7a:	ed5f 0a28 	vldr	s1, [pc, #-160]	@ 8000ddc <filters_apply_gyro+0x4b8>
 8000e7e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8000e82:	f00d fd4e 	bl	800e922 <fminf>
 8000e86:	eef0 7a40 	vmov.f32	s15, s0
 8000e8a:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8000e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e92:	f00d fd29 	bl	800e8e8 <fmaxf>
 8000e96:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        gyro_data->x = apply_pt1_filter(raw_data.x, &state->gyro_pt1_state[0], pt1_cutoff_hz);
 8000e9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	331c      	adds	r3, #28
 8000ea2:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8000eac:	f000 f8b8 	bl	8001020 <apply_pt1_filter>
 8000eb0:	eef0 7a40 	vmov.f32	s15, s0
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	edc3 7a00 	vstr	s15, [r3]
        gyro_data->y = apply_pt1_filter(raw_data.y, &state->gyro_pt1_state[1], pt1_cutoff_hz);
 8000eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	3320      	adds	r3, #32
 8000ec2:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ecc:	f000 f8a8 	bl	8001020 <apply_pt1_filter>
 8000ed0:	eef0 7a40 	vmov.f32	s15, s0
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro_data->z = apply_pt1_filter(raw_data.z, &state->gyro_pt1_state[2], pt1_cutoff_hz);
 8000eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	3324      	adds	r3, #36	@ 0x24
 8000ee2:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8000eec:	f000 f898 	bl	8001020 <apply_pt1_filter>
 8000ef0:	eef0 7a40 	vmov.f32	s15, s0
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	edc3 7a02 	vstr	s15, [r3, #8]
        float pt2_cutoff_hz = PT2_CUTOFF_HZ_MIN + (PT2_CUTOFF_HZ_MAX - PT2_CUTOFF_HZ_MIN) * (mag / 2000.0f);
 8000efa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000efe:	ed5f 6a4b 	vldr	s13, [pc, #-300]	@ 8000dd4 <filters_apply_gyro+0x4b0>
 8000f02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f06:	ed1f 7a4b 	vldr	s14, [pc, #-300]	@ 8000ddc <filters_apply_gyro+0x4b8>
 8000f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0e:	ed1f 7a4d 	vldr	s14, [pc, #-308]	@ 8000ddc <filters_apply_gyro+0x4b8>
 8000f12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f16:	edc7 7a08 	vstr	s15, [r7, #32]
        pt2_cutoff_hz = fmaxf(PT2_CUTOFF_HZ_MIN, fminf(PT2_CUTOFF_HZ_MAX, pt2_cutoff_hz));
 8000f1a:	ed5f 0a51 	vldr	s1, [pc, #-324]	@ 8000dd8 <filters_apply_gyro+0x4b4>
 8000f1e:	ed97 0a08 	vldr	s0, [r7, #32]
 8000f22:	f00d fcfe 	bl	800e922 <fminf>
 8000f26:	eef0 7a40 	vmov.f32	s15, s0
 8000f2a:	ed5f 0a54 	vldr	s1, [pc, #-336]	@ 8000ddc <filters_apply_gyro+0x4b8>
 8000f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f32:	f00d fcd9 	bl	800e8e8 <fmaxf>
 8000f36:	ed87 0a08 	vstr	s0, [r7, #32]
        gyro_data->x = apply_pt2_filter(gyro_data->x, &state->gyro_pt2_state[0], pt2_cutoff_hz);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	3328      	adds	r3, #40	@ 0x28
 8000f44:	edd7 0a08 	vldr	s1, [r7, #32]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	f000 f8b3 	bl	80010b8 <apply_pt2_filter>
 8000f52:	eef0 7a40 	vmov.f32	s15, s0
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	edc3 7a00 	vstr	s15, [r3]
        gyro_data->y = apply_pt2_filter(gyro_data->y, &state->gyro_pt2_state[1], pt2_cutoff_hz);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	332c      	adds	r3, #44	@ 0x2c
 8000f66:	edd7 0a08 	vldr	s1, [r7, #32]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f70:	f000 f8a2 	bl	80010b8 <apply_pt2_filter>
 8000f74:	eef0 7a40 	vmov.f32	s15, s0
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro_data->z = apply_pt2_filter(gyro_data->z, &state->gyro_pt2_state[2], pt2_cutoff_hz);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	3330      	adds	r3, #48	@ 0x30
 8000f88:	edd7 0a08 	vldr	s1, [r7, #32]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f92:	f000 f891 	bl	80010b8 <apply_pt2_filter>
 8000f96:	eef0 7a40 	vmov.f32	s15, s0
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8000fa0:	3730      	adds	r7, #48	@ 0x30
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop

08000fa8 <filters_apply_accel>:

void filters_apply_accel(filtered_axises *accel_data, filter_state_t *state)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
    axises raw_data;
    icm20948_accel_read_g(&raw_data);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 faa4 	bl	8001504 <icm20948_accel_read_g>
    if (state->is_calibrated & 0x02) {
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01e      	beq.n	8001006 <filters_apply_accel+0x5e>
        accel_data->x = raw_data.x - state->accel_bias[0];
 8000fc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
        accel_data->y = raw_data.y - state->accel_bias[1];
 8000fdc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edc3 7a01 	vstr	s15, [r3, #4]
        accel_data->z = raw_data.z - state->accel_bias[2];
 8000ff0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edc3 7a02 	vstr	s15, [r3, #8]
    } else {
        accel_data->x = raw_data.x;
        accel_data->y = raw_data.y;
        accel_data->z = raw_data.z;
    }
}
 8001004:	e008      	b.n	8001018 <filters_apply_accel+0x70>
        accel_data->x = raw_data.x;
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	601a      	str	r2, [r3, #0]
        accel_data->y = raw_data.y;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	605a      	str	r2, [r3, #4]
        accel_data->z = raw_data.z;
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <apply_pt1_filter>:

static float apply_pt1_filter(float input, float *state, float cutoff_hz)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	ed87 0a03 	vstr	s0, [r7, #12]
 800102a:	60b8      	str	r0, [r7, #8]
 800102c:	edc7 0a01 	vstr	s1, [r7, #4]
    float RC = 1.0f / (2.0f * M_PI * cutoff_hz);
 8001030:	edd7 7a01 	vldr	s15, [r7, #4]
 8001034:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001038:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 80010a8 <apply_pt1_filter+0x88>
 800103c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001040:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001044:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001048:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800104c:	edc7 7a07 	vstr	s15, [r7, #28]
    float dt = 1.0f / SAMPLE_RATE_HZ;
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <apply_pt1_filter+0x90>)
 8001052:	61bb      	str	r3, [r7, #24]
    float alpha = dt / (RC + dt);
 8001054:	ed97 7a07 	vldr	s14, [r7, #28]
 8001058:	edd7 7a06 	vldr	s15, [r7, #24]
 800105c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001060:	edd7 6a06 	vldr	s13, [r7, #24]
 8001064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001068:	edc7 7a05 	vstr	s15, [r7, #20]
    *state = *state + alpha * (input - *state);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	ed93 7a00 	vldr	s14, [r3]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	edd7 6a03 	vldr	s13, [r7, #12]
 800107c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001080:	edd7 7a05 	vldr	s15, [r7, #20]
 8001084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	edc3 7a00 	vstr	s15, [r3]
    return *state;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	ee07 3a90 	vmov	s15, r3
}
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	3724      	adds	r7, #36	@ 0x24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	54442d18 	.word	0x54442d18
 80010ac:	401921fb 	.word	0x401921fb
 80010b0:	3aee500f 	.word	0x3aee500f
 80010b4:	00000000 	.word	0x00000000

080010b8 <apply_pt2_filter>:

static float apply_pt2_filter(float input, float *state, float cutoff_hz)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	ed87 0a03 	vstr	s0, [r7, #12]
 80010c2:	60b8      	str	r0, [r7, #8]
 80010c4:	edc7 0a01 	vstr	s1, [r7, #4]
    float RC = 1.0f / (2.0f * M_PI * cutoff_hz);
 80010c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d0:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 8001140 <apply_pt2_filter+0x88>
 80010d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010d8:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80010dc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e4:	edc7 7a07 	vstr	s15, [r7, #28]
    float dt = 1.0f / SAMPLE_RATE_HZ;
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <apply_pt2_filter+0x90>)
 80010ea:	61bb      	str	r3, [r7, #24]
    float alpha = dt / (RC + dt);
 80010ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80010f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f8:	edd7 6a06 	vldr	s13, [r7, #24]
 80010fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001100:	edc7 7a05 	vstr	s15, [r7, #20]
    *state = *state + alpha * (input - *state);
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	ed93 7a00 	vldr	s14, [r3]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	edd7 6a03 	vldr	s13, [r7, #12]
 8001114:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001118:	edd7 7a05 	vldr	s15, [r7, #20]
 800111c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	edc3 7a00 	vstr	s15, [r3]
    return *state;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	ee07 3a90 	vmov	s15, r3
}
 8001132:	eeb0 0a67 	vmov.f32	s0, s15
 8001136:	3724      	adds	r7, #36	@ 0x24
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	54442d18 	.word	0x54442d18
 8001144:	401921fb 	.word	0x401921fb
 8001148:	3aee500f 	.word	0x3aee500f

0800114c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <MX_GPIO_Init+0xc0>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001168:	4a28      	ldr	r2, [pc, #160]	@ (800120c <MX_GPIO_Init+0xc0>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <MX_GPIO_Init+0xc0>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <MX_GPIO_Init+0xc0>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001186:	4a21      	ldr	r2, [pc, #132]	@ (800120c <MX_GPIO_Init+0xc0>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800118c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <MX_GPIO_Init+0xc0>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <MX_GPIO_Init+0xc0>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a4:	4a19      	ldr	r2, [pc, #100]	@ (800120c <MX_GPIO_Init+0xc0>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <MX_GPIO_Init+0xc0>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_GPIO_Init+0xc0>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c2:	4a12      	ldr	r2, [pc, #72]	@ (800120c <MX_GPIO_Init+0xc0>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_GPIO_Init+0xc0>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|SPI2_CS_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <MX_GPIO_Init+0xc4>)
 80011e2:	f005 f98b 	bl	80064fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 SPI2_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SPI2_CS_Pin;
 80011e6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_GPIO_Init+0xc4>)
 8001200:	f004 ffd4 	bl	80061ac <HAL_GPIO_Init>

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	@ 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58024400 	.word	0x58024400
 8001210:	58021000 	.word	0x58021000

08001214 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);

/* Main Functions */

void icm20948_init()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af04      	add	r7, sp, #16
    while (!icm20948_who_am_i());
 800121a:	bf00      	nop
 800121c:	f000 f9a0 	bl	8001560 <icm20948_who_am_i>
 8001220:	4603      	mov	r3, r0
 8001222:	f083 0301 	eor.w	r3, r3, #1
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f7      	bne.n	800121c <icm20948_init+0x8>
    icm20948_device_reset();
 800122c:	f000 f9ab 	bl	8001586 <icm20948_device_reset>
    icm20948_wakeup();
 8001230:	f000 f9b5 	bl	800159e <icm20948_wakeup>
    icm20948_clock_source(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f000 f9e3 	bl	8001600 <icm20948_clock_source>
    icm20948_odr_align_enable();
 800123a:	f000 f9fa 	bl	8001632 <icm20948_odr_align_enable>
    icm20948_spi_slave_enable();
 800123e:	f000 f9c8 	bl	80015d2 <icm20948_spi_slave_enable>
    icm20948_gyro_low_pass_filter(0); // Minimal filtering
 8001242:	2000      	movs	r0, #0
 8001244:	f000 f9fe 	bl	8001644 <icm20948_gyro_low_pass_filter>
    icm20948_accel_low_pass_filter(0);
 8001248:	2000      	movs	r0, #0
 800124a:	f000 fa19 	bl	8001680 <icm20948_accel_low_pass_filter>
    icm20948_gyro_sample_rate_divider(1); // 562.5 Hz
 800124e:	2001      	movs	r0, #1
 8001250:	f000 fa34 	bl	80016bc <icm20948_gyro_sample_rate_divider>
    icm20948_accel_sample_rate_divider(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f000 fa40 	bl	80016da <icm20948_accel_sample_rate_divider>
    icm20948_gyro_calibration();
 800125a:	f000 fa5d 	bl	8001718 <icm20948_gyro_calibration>
    icm20948_accel_calibration();
 800125e:	f000 fb0b 	bl	8001878 <icm20948_accel_calibration>
    icm20948_gyro_full_scale_select(_2000dps);
 8001262:	2003      	movs	r0, #3
 8001264:	f000 fc98 	bl	8001b98 <icm20948_gyro_full_scale_select>
    icm20948_accel_full_scale_select(_16g);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 fcdf 	bl	8001c2c <icm20948_accel_full_scale_select>
    snprintf(uart_buf, sizeof(uart_buf), "Gyro Scale: %.2f, Accel Scale: %.2f\r\n",
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <icm20948_init+0x9c>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <icm20948_init+0xa0>)
 800127a:	edd3 6a00 	vldr	s13, [r3]
 800127e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001282:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001286:	ed8d 7b00 	vstr	d7, [sp]
 800128a:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <icm20948_init+0xa4>)
 800128c:	21c8      	movs	r1, #200	@ 0xc8
 800128e:	480b      	ldr	r0, [pc, #44]	@ (80012bc <icm20948_init+0xa8>)
 8001290:	f00b fa36 	bl	800c700 <sniprintf>
             gyro_scale_factor, accel_scale_factor);
    HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8001294:	4809      	ldr	r0, [pc, #36]	@ (80012bc <icm20948_init+0xa8>)
 8001296:	f7ff f88b 	bl	80003b0 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	2364      	movs	r3, #100	@ 0x64
 80012a0:	4906      	ldr	r1, [pc, #24]	@ (80012bc <icm20948_init+0xa8>)
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <icm20948_init+0xac>)
 80012a4:	f009 fb17 	bl	800a8d6 <HAL_UART_Transmit>
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24000000 	.word	0x24000000
 80012b4:	24000004 	.word	0x24000004
 80012b8:	0800ee38 	.word	0x0800ee38
 80012bc:	2400021c 	.word	0x2400021c
 80012c0:	240004e0 	.word	0x240004e0

080012c4 <icm20948_gyro_read>:
    ak09916_soft_reset();
    ak09916_operation_mode_setting(continuous_measurement_100hz);
}

void icm20948_gyro_read(axises* data)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 80012cc:	2206      	movs	r2, #6
 80012ce:	2133      	movs	r1, #51	@ 0x33
 80012d0:	2000      	movs	r0, #0
 80012d2:	f000 fd73 	bl	8001dbc <read_multiple_icm20948_reg>
 80012d6:	60f8      	str	r0, [r7, #12]

    // Wait for DMA data to be ready
    uint32_t timeout = HAL_GetTick() + 3; // 3ms timeout
 80012d8:	f001 ff6c 	bl	80031b4 <HAL_GetTick>
 80012dc:	4603      	mov	r3, r0
 80012de:	3303      	adds	r3, #3
 80012e0:	60bb      	str	r3, [r7, #8]
    while (!dma_data_ready) {
 80012e2:	e012      	b.n	800130a <icm20948_gyro_read+0x46>
        if (HAL_GetTick() > timeout) {
 80012e4:	f001 ff66 	bl	80031b4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d20c      	bcs.n	800130a <icm20948_gyro_read+0x46>
            data->x = data->y = data->z = 0; // Timeout error
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	601a      	str	r2, [r3, #0]
            return;
 8001308:	e04c      	b.n	80013a4 <icm20948_gyro_read+0xe0>
    while (!dma_data_ready) {
 800130a:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <icm20948_gyro_read+0xe8>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0e7      	beq.n	80012e4 <icm20948_gyro_read+0x20>
        }
    }

    if (temp != NULL) {
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d038      	beq.n	800138c <icm20948_gyro_read+0xc8>
        data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b21b      	sxth	r3, r3
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	edc3 7a00 	vstr	s15, [r3]
        data->y = (int16_t)(temp[2] << 8 | temp[3]);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3302      	adds	r3, #2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b21b      	sxth	r3, r3
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21a      	sxth	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3303      	adds	r3, #3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21b      	sxth	r3, r3
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	edc3 7a01 	vstr	s15, [r3, #4]
        data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3304      	adds	r3, #4
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b21b      	sxth	r3, r3
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3305      	adds	r3, #5
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21b      	sxth	r3, r3
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	edc3 7a02 	vstr	s15, [r3, #8]
 800138a:	e00b      	b.n	80013a4 <icm20948_gyro_read+0xe0>
    } else {
        data->x = data->y = data->z = 0; // Error handling
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	601a      	str	r2, [r3, #0]
    }
}
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	240001fd 	.word	0x240001fd

080013b0 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 80013b8:	2206      	movs	r2, #6
 80013ba:	212d      	movs	r1, #45	@ 0x2d
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 fcfd 	bl	8001dbc <read_multiple_icm20948_reg>
 80013c2:	60f8      	str	r0, [r7, #12]

    // Wait for DMA data to be ready
    uint32_t timeout = HAL_GetTick() + 3; // 3ms timeout
 80013c4:	f001 fef6 	bl	80031b4 <HAL_GetTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	3303      	adds	r3, #3
 80013cc:	60bb      	str	r3, [r7, #8]
    while (!dma_data_ready) {
 80013ce:	e012      	b.n	80013f6 <icm20948_accel_read+0x46>
        if (HAL_GetTick() > timeout) {
 80013d0:	f001 fef0 	bl	80031b4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	4293      	cmp	r3, r2
 80013da:	d20c      	bcs.n	80013f6 <icm20948_accel_read+0x46>
            data->x = data->y = data->z = 0; // Timeout error
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	601a      	str	r2, [r3, #0]
            return;
 80013f4:	e051      	b.n	800149a <icm20948_accel_read+0xea>
    while (!dma_data_ready) {
 80013f6:	4b2a      	ldr	r3, [pc, #168]	@ (80014a0 <icm20948_accel_read+0xf0>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0e7      	beq.n	80013d0 <icm20948_accel_read+0x20>
        }
    }

    if (temp != NULL) {
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d03d      	beq.n	8001482 <icm20948_accel_read+0xd2>
        data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b21b      	sxth	r3, r3
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b21a      	sxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3301      	adds	r3, #1
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b21b      	sxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b21b      	sxth	r3, r3
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edc3 7a00 	vstr	s15, [r3]
        data->y = (int16_t)(temp[2] << 8 | temp[3]);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3302      	adds	r3, #2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b21b      	sxth	r3, r3
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3303      	adds	r3, #3
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21b      	sxth	r3, r3
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	edc3 7a01 	vstr	s15, [r3, #4]
        data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3304      	adds	r3, #4
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b21b      	sxth	r3, r3
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	b21a      	sxth	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3305      	adds	r3, #5
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21b      	sxth	r3, r3
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <icm20948_accel_read+0xf4>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edc3 7a02 	vstr	s15, [r3, #8]
 8001480:	e00b      	b.n	800149a <icm20948_accel_read+0xea>
    } else {
        data->x = data->y = data->z = 0; // Error handling
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	601a      	str	r2, [r3, #0]
    }
}
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	240001fd 	.word	0x240001fd
 80014a4:	24000004 	.word	0x24000004

080014a8 <icm20948_gyro_read_dps>:

    return true;
}

void icm20948_gyro_read_dps(axises* data)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
    icm20948_gyro_read(data);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff07 	bl	80012c4 <icm20948_gyro_read>

    data->x /= gyro_scale_factor;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edd3 6a00 	vldr	s13, [r3]
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <icm20948_gyro_read_dps+0x58>)
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	edc3 7a00 	vstr	s15, [r3]
    data->y /= gyro_scale_factor;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <icm20948_gyro_read_dps+0x58>)
 80014d4:	ed93 7a00 	vldr	s14, [r3]
 80014d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	edc3 7a01 	vstr	s15, [r3, #4]
    data->z /= gyro_scale_factor;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <icm20948_gyro_read_dps+0x58>)
 80014ea:	ed93 7a00 	vldr	s14, [r3]
 80014ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	24000000 	.word	0x24000000

08001504 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    icm20948_accel_read(data);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff4f 	bl	80013b0 <icm20948_accel_read>

    data->x /= accel_scale_factor;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	edd3 6a00 	vldr	s13, [r3]
 8001518:	4b10      	ldr	r3, [pc, #64]	@ (800155c <icm20948_accel_read_g+0x58>)
 800151a:	ed93 7a00 	vldr	s14, [r3]
 800151e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	edc3 7a00 	vstr	s15, [r3]
    data->y /= accel_scale_factor;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edd3 6a01 	vldr	s13, [r3, #4]
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <icm20948_accel_read_g+0x58>)
 8001530:	ed93 7a00 	vldr	s14, [r3]
 8001534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	edc3 7a01 	vstr	s15, [r3, #4]
    data->z /= accel_scale_factor;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	edd3 6a02 	vldr	s13, [r3, #8]
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <icm20948_accel_read_g+0x58>)
 8001546:	ed93 7a00 	vldr	s14, [r3]
 800154a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	24000004 	.word	0x24000004

08001560 <icm20948_who_am_i>:
    return true;
}

/* Sub Functions */
bool icm20948_who_am_i()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
    uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8001566:	2100      	movs	r1, #0
 8001568:	2000      	movs	r0, #0
 800156a:	f000 fbd7 	bl	8001d1c <read_single_icm20948_reg>
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
    return (icm20948_id == ICM20948_ID);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2bea      	cmp	r3, #234	@ 0xea
 8001576:	bf0c      	ite	eq
 8001578:	2301      	moveq	r3, #1
 800157a:	2300      	movne	r3, #0
 800157c:	b2db      	uxtb	r3, r3
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <icm20948_device_reset>:
    uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
    return (ak09916_id == AK09916_ID);
}

void icm20948_device_reset()
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
    write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 800158a:	22c1      	movs	r2, #193	@ 0xc1
 800158c:	2106      	movs	r1, #6
 800158e:	2000      	movs	r0, #0
 8001590:	f000 fbf0 	bl	8001d74 <write_single_icm20948_reg>
    HAL_Delay(100);
 8001594:	2064      	movs	r0, #100	@ 0x64
 8001596:	f001 fe19 	bl	80031cc <HAL_Delay>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}

0800159e <icm20948_wakeup>:
    write_single_ak09916_reg(MAG_CNTL3, 0x01);
    HAL_Delay(100);
}

void icm20948_wakeup()
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
    uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80015a4:	2106      	movs	r1, #6
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 fbb8 	bl	8001d1c <read_single_icm20948_reg>
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
    new_val &= 0xBF;
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80015b6:	71fb      	strb	r3, [r7, #7]
    write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	461a      	mov	r2, r3
 80015bc:	2106      	movs	r1, #6
 80015be:	2000      	movs	r0, #0
 80015c0:	f000 fbd8 	bl	8001d74 <write_single_icm20948_reg>
    HAL_Delay(100);
 80015c4:	2064      	movs	r0, #100	@ 0x64
 80015c6:	f001 fe01 	bl	80031cc <HAL_Delay>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <icm20948_spi_slave_enable>:
    write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
    HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
    uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80015d8:	2103      	movs	r1, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 fb9e 	bl	8001d1c <read_single_icm20948_reg>
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
    new_val |= 0x10;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	71fb      	strb	r3, [r7, #7]
    write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	461a      	mov	r2, r3
 80015f0:	2103      	movs	r1, #3
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 fbbe 	bl	8001d74 <write_single_icm20948_reg>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <icm20948_clock_source>:
    new_val |= config;
    write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
}

void icm20948_clock_source(uint8_t source)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
    uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800160a:	2106      	movs	r1, #6
 800160c:	2000      	movs	r0, #0
 800160e:	f000 fb85 	bl	8001d1c <read_single_icm20948_reg>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
    new_val |= source;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4313      	orrs	r3, r2
 800161c:	73fb      	strb	r3, [r7, #15]
    write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	461a      	mov	r2, r3
 8001622:	2106      	movs	r1, #6
 8001624:	2000      	movs	r0, #0
 8001626:	f000 fba5 	bl	8001d74 <write_single_icm20948_reg>
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
    write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8001636:	2201      	movs	r2, #1
 8001638:	2109      	movs	r1, #9
 800163a:	2020      	movs	r0, #32
 800163c:	f000 fb9a 	bl	8001d74 <write_single_icm20948_reg>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
    uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800164e:	2101      	movs	r1, #1
 8001650:	2020      	movs	r0, #32
 8001652:	f000 fb63 	bl	8001d1c <read_single_icm20948_reg>
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
    new_val |= config << 3;
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	b25a      	sxtb	r2, r3
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4313      	orrs	r3, r2
 8001668:	b25b      	sxtb	r3, r3
 800166a:	73fb      	strb	r3, [r7, #15]
    write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	461a      	mov	r2, r3
 8001670:	2101      	movs	r1, #1
 8001672:	2020      	movs	r0, #32
 8001674:	f000 fb7e 	bl	8001d74 <write_single_icm20948_reg>
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
    uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800168a:	2114      	movs	r1, #20
 800168c:	2020      	movs	r0, #32
 800168e:	f000 fb45 	bl	8001d1c <read_single_icm20948_reg>
 8001692:	4603      	mov	r3, r0
 8001694:	73fb      	strb	r3, [r7, #15]
    new_val |= config << 3;
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	b25a      	sxtb	r2, r3
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	73fb      	strb	r3, [r7, #15]
    write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val); // Note: Potential bug
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	461a      	mov	r2, r3
 80016ac:	2101      	movs	r1, #1
 80016ae:	2020      	movs	r0, #32
 80016b0:	f000 fb60 	bl	8001d74 <write_single_icm20948_reg>
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
    write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	461a      	mov	r2, r3
 80016ca:	2100      	movs	r1, #0
 80016cc:	2020      	movs	r0, #32
 80016ce:	f000 fb51 	bl	8001d74 <write_single_icm20948_reg>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	80fb      	strh	r3, [r7, #6]
    uint8_t divider_1 = (uint8_t)(divider >> 8);
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	73fb      	strb	r3, [r7, #15]
    uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	73bb      	strb	r3, [r7, #14]
    write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	461a      	mov	r2, r3
 80016fa:	2110      	movs	r1, #16
 80016fc:	2020      	movs	r0, #32
 80016fe:	f000 fb39 	bl	8001d74 <write_single_icm20948_reg>
    write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8001702:	7bbb      	ldrb	r3, [r7, #14]
 8001704:	461a      	mov	r2, r3
 8001706:	2111      	movs	r1, #17
 8001708:	2020      	movs	r0, #32
 800170a:	f000 fb33 	bl	8001d74 <write_single_icm20948_reg>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <icm20948_gyro_calibration>:
    write_single_ak09916_reg(MAG_CNTL2, mode);
    HAL_Delay(100);
}

void icm20948_gyro_calibration()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0
    axises temp;
    int32_t gyro_bias[3] = {0};
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
    uint8_t gyro_offset[6] = {0};
 800172a:	463b      	mov	r3, r7
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	809a      	strh	r2, [r3, #4]

    for (int i = 0; i < 100; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
 8001736:	e031      	b.n	800179c <icm20948_gyro_calibration+0x84>
    {
        icm20948_gyro_read(&temp);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fdc1 	bl	80012c4 <icm20948_gyro_read>
        gyro_bias[0] += temp.x;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001758:	ee17 3a90 	vmov	r3, s15
 800175c:	60bb      	str	r3, [r7, #8]
        gyro_bias[1] += temp.y;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001768:	edd7 7a06 	vldr	s15, [r7, #24]
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001774:	ee17 3a90 	vmov	r3, s15
 8001778:	60fb      	str	r3, [r7, #12]
        gyro_bias[2] += temp.z;
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001784:	edd7 7a07 	vldr	s15, [r7, #28]
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001790:	ee17 3a90 	vmov	r3, s15
 8001794:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 100; i++)
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	3301      	adds	r3, #1
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	2b63      	cmp	r3, #99	@ 0x63
 80017a0:	ddca      	ble.n	8001738 <icm20948_gyro_calibration+0x20>
    }

    gyro_bias[0] /= 100;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	4a32      	ldr	r2, [pc, #200]	@ (8001870 <icm20948_gyro_calibration+0x158>)
 80017a6:	fb82 1203 	smull	r1, r2, r2, r3
 80017aa:	1152      	asrs	r2, r2, #5
 80017ac:	17db      	asrs	r3, r3, #31
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	60bb      	str	r3, [r7, #8]
    gyro_bias[1] /= 100;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001870 <icm20948_gyro_calibration+0x158>)
 80017b6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ba:	1152      	asrs	r2, r2, #5
 80017bc:	17db      	asrs	r3, r3, #31
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	60fb      	str	r3, [r7, #12]
    gyro_bias[2] /= 100;
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001870 <icm20948_gyro_calibration+0x158>)
 80017c6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ca:	1152      	asrs	r2, r2, #5
 80017cc:	17db      	asrs	r3, r3, #31
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	613b      	str	r3, [r7, #16]

    gyro_offset[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	425b      	negs	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da00      	bge.n	80017dc <icm20948_gyro_calibration+0xc4>
 80017da:	3303      	adds	r3, #3
 80017dc:	109b      	asrs	r3, r3, #2
 80017de:	121b      	asrs	r3, r3, #8
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	703b      	strb	r3, [r7, #0]
    gyro_offset[1] = (-gyro_bias[0] / 4) & 0xFF;
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	425b      	negs	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da00      	bge.n	80017ee <icm20948_gyro_calibration+0xd6>
 80017ec:	3303      	adds	r3, #3
 80017ee:	109b      	asrs	r3, r3, #2
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	707b      	strb	r3, [r7, #1]
    gyro_offset[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	425b      	negs	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da00      	bge.n	80017fe <icm20948_gyro_calibration+0xe6>
 80017fc:	3303      	adds	r3, #3
 80017fe:	109b      	asrs	r3, r3, #2
 8001800:	121b      	asrs	r3, r3, #8
 8001802:	b2db      	uxtb	r3, r3
 8001804:	70bb      	strb	r3, [r7, #2]
    gyro_offset[3] = (-gyro_bias[1] / 4) & 0xFF;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	425b      	negs	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	da00      	bge.n	8001810 <icm20948_gyro_calibration+0xf8>
 800180e:	3303      	adds	r3, #3
 8001810:	109b      	asrs	r3, r3, #2
 8001812:	b2db      	uxtb	r3, r3
 8001814:	70fb      	strb	r3, [r7, #3]
    gyro_offset[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	425b      	negs	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	da00      	bge.n	8001820 <icm20948_gyro_calibration+0x108>
 800181e:	3303      	adds	r3, #3
 8001820:	109b      	asrs	r3, r3, #2
 8001822:	121b      	asrs	r3, r3, #8
 8001824:	b2db      	uxtb	r3, r3
 8001826:	713b      	strb	r3, [r7, #4]
    gyro_offset[5] = (-gyro_bias[2] / 4) & 0xFF;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	425b      	negs	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	da00      	bge.n	8001832 <icm20948_gyro_calibration+0x11a>
 8001830:	3303      	adds	r3, #3
 8001832:	109b      	asrs	r3, r3, #2
 8001834:	b2db      	uxtb	r3, r3
 8001836:	717b      	strb	r3, [r7, #5]

    write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8001838:	463a      	mov	r2, r7
 800183a:	2306      	movs	r3, #6
 800183c:	2103      	movs	r1, #3
 800183e:	2020      	movs	r0, #32
 8001840:	f000 faf8 	bl	8001e34 <write_multiple_icm20948_reg>

    // Wait for write completion
    uint32_t timeout = HAL_GetTick() + 100;
 8001844:	f001 fcb6 	bl	80031b4 <HAL_GetTick>
 8001848:	4603      	mov	r3, r0
 800184a:	3364      	adds	r3, #100	@ 0x64
 800184c:	623b      	str	r3, [r7, #32]
    while (!dma_write_complete) {
 800184e:	e005      	b.n	800185c <icm20948_gyro_calibration+0x144>
        if (HAL_GetTick() > timeout) {
 8001850:	f001 fcb0 	bl	80031b4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	4293      	cmp	r3, r2
 800185a:	d305      	bcc.n	8001868 <icm20948_gyro_calibration+0x150>
    while (!dma_write_complete) {
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <icm20948_gyro_calibration+0x15c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f4      	beq.n	8001850 <icm20948_gyro_calibration+0x138>
 8001866:	e000      	b.n	800186a <icm20948_gyro_calibration+0x152>
            return; // Timeout error
 8001868:	bf00      	nop
        }
    }
}
 800186a:	3728      	adds	r7, #40	@ 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	51eb851f 	.word	0x51eb851f
 8001874:	240001fe 	.word	0x240001fe

08001878 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b092      	sub	sp, #72	@ 0x48
 800187c:	af00      	add	r7, sp, #0
    axises temp;
    int32_t accel_bias[3] = {0};
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
    int32_t accel_bias_reg[3] = {0};
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
    uint8_t accel_offset[6] = {0};
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	809a      	strh	r2, [r3, #4]

    for (int i = 0; i < 100; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80018a4:	e031      	b.n	800190a <icm20948_accel_calibration+0x92>
    {
        icm20948_accel_read(&temp);
 80018a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fd80 	bl	80013b0 <icm20948_accel_read>
        accel_bias[0] += temp.x;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c6:	ee17 3a90 	vmov	r3, s15
 80018ca:	61fb      	str	r3, [r7, #28]
        accel_bias[1] += temp.y;
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e2:	ee17 3a90 	vmov	r3, s15
 80018e6:	623b      	str	r3, [r7, #32]
        accel_bias[2] += temp.z;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80018f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fe:	ee17 3a90 	vmov	r3, s15
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 100; i++)
 8001904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001906:	3301      	adds	r3, #1
 8001908:	647b      	str	r3, [r7, #68]	@ 0x44
 800190a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800190c:	2b63      	cmp	r3, #99	@ 0x63
 800190e:	ddca      	ble.n	80018a6 <icm20948_accel_calibration+0x2e>
    }

    accel_bias[0] /= 100;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	4a9e      	ldr	r2, [pc, #632]	@ (8001b8c <icm20948_accel_calibration+0x314>)
 8001914:	fb82 1203 	smull	r1, r2, r2, r3
 8001918:	1152      	asrs	r2, r2, #5
 800191a:	17db      	asrs	r3, r3, #31
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	61fb      	str	r3, [r7, #28]
    accel_bias[1] /= 100;
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	4a9a      	ldr	r2, [pc, #616]	@ (8001b8c <icm20948_accel_calibration+0x314>)
 8001924:	fb82 1203 	smull	r1, r2, r2, r3
 8001928:	1152      	asrs	r2, r2, #5
 800192a:	17db      	asrs	r3, r3, #31
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	623b      	str	r3, [r7, #32]
    accel_bias[2] /= 100;
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	4a96      	ldr	r2, [pc, #600]	@ (8001b8c <icm20948_accel_calibration+0x314>)
 8001934:	fb82 1203 	smull	r1, r2, r2, r3
 8001938:	1152      	asrs	r2, r2, #5
 800193a:	17db      	asrs	r3, r3, #31
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24

    uint8_t mask_bit[3] = {0, 0, 0};
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2100      	movs	r1, #0
 8001944:	460a      	mov	r2, r1
 8001946:	801a      	strh	r2, [r3, #0]
 8001948:	460a      	mov	r2, r1
 800194a:	709a      	strb	r2, [r3, #2]

    uint8_t* temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 800194c:	2202      	movs	r2, #2
 800194e:	2114      	movs	r1, #20
 8001950:	2010      	movs	r0, #16
 8001952:	f000 fa33 	bl	8001dbc <read_multiple_icm20948_reg>
 8001956:	6438      	str	r0, [r7, #64]	@ 0x40
    uint32_t timeout = HAL_GetTick() + 100;
 8001958:	f001 fc2c 	bl	80031b4 <HAL_GetTick>
 800195c:	4603      	mov	r3, r0
 800195e:	3364      	adds	r3, #100	@ 0x64
 8001960:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!dma_data_ready) {
 8001962:	e006      	b.n	8001972 <icm20948_accel_calibration+0xfa>
        if (HAL_GetTick() > timeout) {
 8001964:	f001 fc26 	bl	80031b4 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800196c:	4293      	cmp	r3, r2
 800196e:	f0c0 80fe 	bcc.w	8001b6e <icm20948_accel_calibration+0x2f6>
    while (!dma_data_ready) {
 8001972:	4b87      	ldr	r3, [pc, #540]	@ (8001b90 <icm20948_accel_calibration+0x318>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f3      	beq.n	8001964 <icm20948_accel_calibration+0xec>
            return; // Timeout error
        }
    }
    if (temp2 != NULL) {
 800197c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00e      	beq.n	80019a0 <icm20948_accel_calibration+0x128>
        accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8001982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800198a:	3201      	adds	r2, #1
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        mask_bit[0] = temp2[1] & 0x01;
 8001992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001994:	3301      	adds	r3, #1
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	713b      	strb	r3, [r7, #4]
    }

    uint8_t* temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 80019a0:	2202      	movs	r2, #2
 80019a2:	2117      	movs	r1, #23
 80019a4:	2010      	movs	r0, #16
 80019a6:	f000 fa09 	bl	8001dbc <read_multiple_icm20948_reg>
 80019aa:	63b8      	str	r0, [r7, #56]	@ 0x38
    timeout = HAL_GetTick() + 100;
 80019ac:	f001 fc02 	bl	80031b4 <HAL_GetTick>
 80019b0:	4603      	mov	r3, r0
 80019b2:	3364      	adds	r3, #100	@ 0x64
 80019b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!dma_data_ready) {
 80019b6:	e006      	b.n	80019c6 <icm20948_accel_calibration+0x14e>
        if (HAL_GetTick() > timeout) {
 80019b8:	f001 fbfc 	bl	80031b4 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019c0:	4293      	cmp	r3, r2
 80019c2:	f0c0 80d6 	bcc.w	8001b72 <icm20948_accel_calibration+0x2fa>
    while (!dma_data_ready) {
 80019c6:	4b72      	ldr	r3, [pc, #456]	@ (8001b90 <icm20948_accel_calibration+0x318>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f3      	beq.n	80019b8 <icm20948_accel_calibration+0x140>
            return; // Timeout error
        }
    }
    if (temp3 != NULL) {
 80019d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <icm20948_accel_calibration+0x17c>
        accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 80019d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019de:	3201      	adds	r2, #1
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]
        mask_bit[1] = temp3[1] & 0x01;
 80019e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019e8:	3301      	adds	r3, #1
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	717b      	strb	r3, [r7, #5]
    }

    uint8_t* temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 80019f4:	2202      	movs	r2, #2
 80019f6:	211a      	movs	r1, #26
 80019f8:	2010      	movs	r0, #16
 80019fa:	f000 f9df 	bl	8001dbc <read_multiple_icm20948_reg>
 80019fe:	6378      	str	r0, [r7, #52]	@ 0x34
    timeout = HAL_GetTick() + 100;
 8001a00:	f001 fbd8 	bl	80031b4 <HAL_GetTick>
 8001a04:	4603      	mov	r3, r0
 8001a06:	3364      	adds	r3, #100	@ 0x64
 8001a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!dma_data_ready) {
 8001a0a:	e006      	b.n	8001a1a <icm20948_accel_calibration+0x1a2>
        if (HAL_GetTick() > timeout) {
 8001a0c:	f001 fbd2 	bl	80031b4 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a14:	4293      	cmp	r3, r2
 8001a16:	f0c0 80ae 	bcc.w	8001b76 <icm20948_accel_calibration+0x2fe>
    while (!dma_data_ready) {
 8001a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b90 <icm20948_accel_calibration+0x318>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f3      	beq.n	8001a0c <icm20948_accel_calibration+0x194>
            return; // Timeout error
        }
    }
    if (temp4 != NULL) {
 8001a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00e      	beq.n	8001a48 <icm20948_accel_calibration+0x1d0>
        accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a32:	3201      	adds	r2, #1
 8001a34:	7812      	ldrb	r2, [r2, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        mask_bit[2] = temp4[1] & 0x01;
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	71bb      	strb	r3, [r7, #6]
    }

    accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da00      	bge.n	8001a52 <icm20948_accel_calibration+0x1da>
 8001a50:	3307      	adds	r3, #7
 8001a52:	10db      	asrs	r3, r3, #3
 8001a54:	425b      	negs	r3, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
    accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da00      	bge.n	8001a64 <icm20948_accel_calibration+0x1ec>
 8001a62:	3307      	adds	r3, #7
 8001a64:	10db      	asrs	r3, r3, #3
 8001a66:	425b      	negs	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
    accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da00      	bge.n	8001a76 <icm20948_accel_calibration+0x1fe>
 8001a74:	3307      	adds	r3, #7
 8001a76:	10db      	asrs	r3, r3, #3
 8001a78:	425b      	negs	r3, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]

    accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	121b      	asrs	r3, r3, #8
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	723b      	strb	r3, [r7, #8]
    accel_offset[1] = (accel_bias_reg[0]) & 0xFE;
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	727b      	strb	r3, [r7, #9]
    accel_offset[1] = accel_offset[1] | mask_bit[0];
 8001a92:	7a7a      	ldrb	r2, [r7, #9]
 8001a94:	793b      	ldrb	r3, [r7, #4]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	727b      	strb	r3, [r7, #9]

    accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	121b      	asrs	r3, r3, #8
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	72bb      	strb	r3, [r7, #10]
    accel_offset[3] = (accel_bias_reg[1]) & 0xFE;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	72fb      	strb	r3, [r7, #11]
    accel_offset[3] = accel_offset[3] | mask_bit[1];
 8001ab0:	7afa      	ldrb	r2, [r7, #11]
 8001ab2:	797b      	ldrb	r3, [r7, #5]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	72fb      	strb	r3, [r7, #11]

    accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	121b      	asrs	r3, r3, #8
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	733b      	strb	r3, [r7, #12]
    accel_offset[5] = (accel_bias_reg[2]) & 0xFE;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	737b      	strb	r3, [r7, #13]
    accel_offset[5] = accel_offset[5] | mask_bit[2];
 8001ace:	7b7a      	ldrb	r2, [r7, #13]
 8001ad0:	79bb      	ldrb	r3, [r7, #6]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	737b      	strb	r3, [r7, #13]

    write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8001ad8:	f107 0208 	add.w	r2, r7, #8
 8001adc:	2302      	movs	r3, #2
 8001ade:	2114      	movs	r1, #20
 8001ae0:	2010      	movs	r0, #16
 8001ae2:	f000 f9a7 	bl	8001e34 <write_multiple_icm20948_reg>
    timeout = HAL_GetTick() + 100;
 8001ae6:	f001 fb65 	bl	80031b4 <HAL_GetTick>
 8001aea:	4603      	mov	r3, r0
 8001aec:	3364      	adds	r3, #100	@ 0x64
 8001aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!dma_write_complete) {
 8001af0:	e005      	b.n	8001afe <icm20948_accel_calibration+0x286>
        if (HAL_GetTick() > timeout) {
 8001af2:	f001 fb5f 	bl	80031b4 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d33d      	bcc.n	8001b7a <icm20948_accel_calibration+0x302>
    while (!dma_write_complete) {
 8001afe:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <icm20948_accel_calibration+0x31c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f4      	beq.n	8001af2 <icm20948_accel_calibration+0x27a>
            return; // Timeout error
        }
    }
    write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	1c9a      	adds	r2, r3, #2
 8001b0e:	2302      	movs	r3, #2
 8001b10:	2117      	movs	r1, #23
 8001b12:	2010      	movs	r0, #16
 8001b14:	f000 f98e 	bl	8001e34 <write_multiple_icm20948_reg>
    timeout = HAL_GetTick() + 100;
 8001b18:	f001 fb4c 	bl	80031b4 <HAL_GetTick>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	3364      	adds	r3, #100	@ 0x64
 8001b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!dma_write_complete) {
 8001b22:	e005      	b.n	8001b30 <icm20948_accel_calibration+0x2b8>
        if (HAL_GetTick() > timeout) {
 8001b24:	f001 fb46 	bl	80031b4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d326      	bcc.n	8001b7e <icm20948_accel_calibration+0x306>
    while (!dma_write_complete) {
 8001b30:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <icm20948_accel_calibration+0x31c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f4      	beq.n	8001b24 <icm20948_accel_calibration+0x2ac>
            return; // Timeout error
        }
    }
    write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	1d1a      	adds	r2, r3, #4
 8001b40:	2302      	movs	r3, #2
 8001b42:	211a      	movs	r1, #26
 8001b44:	2010      	movs	r0, #16
 8001b46:	f000 f975 	bl	8001e34 <write_multiple_icm20948_reg>
    timeout = HAL_GetTick() + 100;
 8001b4a:	f001 fb33 	bl	80031b4 <HAL_GetTick>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	3364      	adds	r3, #100	@ 0x64
 8001b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!dma_write_complete) {
 8001b54:	e005      	b.n	8001b62 <icm20948_accel_calibration+0x2ea>
        if (HAL_GetTick() > timeout) {
 8001b56:	f001 fb2d 	bl	80031b4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d30f      	bcc.n	8001b82 <icm20948_accel_calibration+0x30a>
    while (!dma_write_complete) {
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <icm20948_accel_calibration+0x31c>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f4      	beq.n	8001b56 <icm20948_accel_calibration+0x2de>
 8001b6c:	e00a      	b.n	8001b84 <icm20948_accel_calibration+0x30c>
            return; // Timeout error
 8001b6e:	bf00      	nop
 8001b70:	e008      	b.n	8001b84 <icm20948_accel_calibration+0x30c>
            return; // Timeout error
 8001b72:	bf00      	nop
 8001b74:	e006      	b.n	8001b84 <icm20948_accel_calibration+0x30c>
            return; // Timeout error
 8001b76:	bf00      	nop
 8001b78:	e004      	b.n	8001b84 <icm20948_accel_calibration+0x30c>
            return; // Timeout error
 8001b7a:	bf00      	nop
 8001b7c:	e002      	b.n	8001b84 <icm20948_accel_calibration+0x30c>
            return; // Timeout error
 8001b7e:	bf00      	nop
 8001b80:	e000      	b.n	8001b84 <icm20948_accel_calibration+0x30c>
            return; // Timeout error
 8001b82:	bf00      	nop
        }
    }
}
 8001b84:	3748      	adds	r7, #72	@ 0x48
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	51eb851f 	.word	0x51eb851f
 8001b90:	240001fd 	.word	0x240001fd
 8001b94:	240001fe 	.word	0x240001fe

08001b98 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
    uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	2020      	movs	r0, #32
 8001ba6:	f000 f8b9 	bl	8001d1c <read_single_icm20948_reg>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73fb      	strb	r3, [r7, #15]

    switch (full_scale)
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d827      	bhi.n	8001c04 <icm20948_gyro_full_scale_select+0x6c>
 8001bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <icm20948_gyro_full_scale_select+0x24>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bd5 	.word	0x08001bd5
 8001bc4:	08001be5 	.word	0x08001be5
 8001bc8:	08001bf5 	.word	0x08001bf5
    {
        case _250dps:
            new_val |= 0x00;
            gyro_scale_factor = 131.0;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <icm20948_gyro_full_scale_select+0x80>)
 8001bce:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <icm20948_gyro_full_scale_select+0x84>)
 8001bd0:	601a      	str	r2, [r3, #0]
            break;
 8001bd2:	e017      	b.n	8001c04 <icm20948_gyro_full_scale_select+0x6c>
        case _500dps:
            new_val |= 0x02;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	73fb      	strb	r3, [r7, #15]
            gyro_scale_factor = 65.5;
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <icm20948_gyro_full_scale_select+0x80>)
 8001bde:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <icm20948_gyro_full_scale_select+0x88>)
 8001be0:	601a      	str	r2, [r3, #0]
            break;
 8001be2:	e00f      	b.n	8001c04 <icm20948_gyro_full_scale_select+0x6c>
        case _1000dps:
            new_val |= 0x04;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	73fb      	strb	r3, [r7, #15]
            gyro_scale_factor = 32.8;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <icm20948_gyro_full_scale_select+0x80>)
 8001bee:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <icm20948_gyro_full_scale_select+0x8c>)
 8001bf0:	601a      	str	r2, [r3, #0]
            break;
 8001bf2:	e007      	b.n	8001c04 <icm20948_gyro_full_scale_select+0x6c>
        case _2000dps:
            new_val |= 0x06;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	f043 0306 	orr.w	r3, r3, #6
 8001bfa:	73fb      	strb	r3, [r7, #15]
            gyro_scale_factor = 16.4;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <icm20948_gyro_full_scale_select+0x80>)
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <icm20948_gyro_full_scale_select+0x90>)
 8001c00:	601a      	str	r2, [r3, #0]
            break;
 8001c02:	bf00      	nop
    }

    write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	461a      	mov	r2, r3
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2020      	movs	r0, #32
 8001c0c:	f000 f8b2 	bl	8001d74 <write_single_icm20948_reg>
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	24000000 	.word	0x24000000
 8001c1c:	43030000 	.word	0x43030000
 8001c20:	42830000 	.word	0x42830000
 8001c24:	42033333 	.word	0x42033333
 8001c28:	41833333 	.word	0x41833333

08001c2c <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
    uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001c36:	2114      	movs	r1, #20
 8001c38:	2020      	movs	r0, #32
 8001c3a:	f000 f86f 	bl	8001d1c <read_single_icm20948_reg>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	73fb      	strb	r3, [r7, #15]

    switch (full_scale)
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d82b      	bhi.n	8001ca0 <icm20948_accel_full_scale_select+0x74>
 8001c48:	a201      	add	r2, pc, #4	@ (adr r2, 8001c50 <icm20948_accel_full_scale_select+0x24>)
 8001c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4e:	bf00      	nop
 8001c50:	08001c61 	.word	0x08001c61
 8001c54:	08001c6b 	.word	0x08001c6b
 8001c58:	08001c7d 	.word	0x08001c7d
 8001c5c:	08001c8f 	.word	0x08001c8f
    {
        case _2g:
            new_val |= 0x00;
            accel_scale_factor = 16384;
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <icm20948_accel_full_scale_select+0x88>)
 8001c62:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001c66:	601a      	str	r2, [r3, #0]
            break;
 8001c68:	e01a      	b.n	8001ca0 <icm20948_accel_full_scale_select+0x74>
        case _4g:
            new_val |= 0x02;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	73fb      	strb	r3, [r7, #15]
            accel_scale_factor = 8192;
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <icm20948_accel_full_scale_select+0x88>)
 8001c74:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001c78:	601a      	str	r2, [r3, #0]
            break;
 8001c7a:	e011      	b.n	8001ca0 <icm20948_accel_full_scale_select+0x74>
        case _8g:
            new_val |= 0x04;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	73fb      	strb	r3, [r7, #15]
            accel_scale_factor = 4096;
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <icm20948_accel_full_scale_select+0x88>)
 8001c86:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001c8a:	601a      	str	r2, [r3, #0]
            break;
 8001c8c:	e008      	b.n	8001ca0 <icm20948_accel_full_scale_select+0x74>
        case _16g:
            new_val |= 0x06;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	f043 0306 	orr.w	r3, r3, #6
 8001c94:	73fb      	strb	r3, [r7, #15]
            accel_scale_factor = 2048;
 8001c96:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <icm20948_accel_full_scale_select+0x88>)
 8001c98:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001c9c:	601a      	str	r2, [r3, #0]
            break;
 8001c9e:	bf00      	nop
    }

    write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2114      	movs	r1, #20
 8001ca6:	2020      	movs	r0, #32
 8001ca8:	f000 f864 	bl	8001d74 <write_single_icm20948_reg>
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	24000004 	.word	0x24000004

08001cb8 <cs_high>:

/* Static Functions */
static void cs_high()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cc2:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <cs_high+0x14>)
 8001cc4:	f004 fc1a 	bl	80064fc <HAL_GPIO_WritePin>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	58021000 	.word	0x58021000

08001cd0 <cs_low>:

static void cs_low()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cda:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <cs_low+0x14>)
 8001cdc:	f004 fc0e 	bl	80064fc <HAL_GPIO_WritePin>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	58021000 	.word	0x58021000

08001ce8 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
    uint8_t write_reg[2];
    write_reg[0] = WRITE | REG_BANK_SEL;
 8001cf2:	237f      	movs	r3, #127	@ 0x7f
 8001cf4:	733b      	strb	r3, [r7, #12]
    write_reg[1] = ub;
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	737b      	strb	r3, [r7, #13]

    cs_low();
 8001cfa:	f7ff ffe9 	bl	8001cd0 <cs_low>
    HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8001cfe:	f107 010c 	add.w	r1, r7, #12
 8001d02:	230a      	movs	r3, #10
 8001d04:	2202      	movs	r2, #2
 8001d06:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <select_user_bank+0x30>)
 8001d08:	f007 fab2 	bl	8009270 <HAL_SPI_Transmit>
    cs_high();
 8001d0c:	f7ff ffd4 	bl	8001cb8 <cs_high>
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	24000364 	.word	0x24000364

08001d1c <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	460a      	mov	r2, r1
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	71bb      	strb	r3, [r7, #6]
    uint8_t read_reg = READ | reg;
 8001d2c:	79bb      	ldrb	r3, [r7, #6]
 8001d2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	73fb      	strb	r3, [r7, #15]
    uint8_t reg_val;
    select_user_bank(ub);
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ffd5 	bl	8001ce8 <select_user_bank>

    cs_low();
 8001d3e:	f7ff ffc7 	bl	8001cd0 <cs_low>
    HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001d42:	f107 010f 	add.w	r1, r7, #15
 8001d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <read_single_icm20948_reg+0x54>)
 8001d4e:	f007 fa8f 	bl	8009270 <HAL_SPI_Transmit>
    HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000); // Fixed typo: ®_val to reg_val
 8001d52:	f107 010e 	add.w	r1, r7, #14
 8001d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <read_single_icm20948_reg+0x54>)
 8001d5e:	f007 fc75 	bl	800964c <HAL_SPI_Receive>
    cs_high();
 8001d62:	f7ff ffa9 	bl	8001cb8 <cs_high>

    return reg_val;
 8001d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	24000364 	.word	0x24000364

08001d74 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	71bb      	strb	r3, [r7, #6]
 8001d82:	4613      	mov	r3, r2
 8001d84:	717b      	strb	r3, [r7, #5]
    uint8_t write_reg[2];
    write_reg[0] = WRITE | reg;
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	733b      	strb	r3, [r7, #12]
    write_reg[1] = val;
 8001d8a:	797b      	ldrb	r3, [r7, #5]
 8001d8c:	737b      	strb	r3, [r7, #13]

    select_user_bank(ub);
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ffa9 	bl	8001ce8 <select_user_bank>

    cs_low();
 8001d96:	f7ff ff9b 	bl	8001cd0 <cs_low>
    HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8001d9a:	f107 010c 	add.w	r1, r7, #12
 8001d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da2:	2202      	movs	r2, #2
 8001da4:	4804      	ldr	r0, [pc, #16]	@ (8001db8 <write_single_icm20948_reg+0x44>)
 8001da6:	f007 fa63 	bl	8009270 <HAL_SPI_Transmit>
    cs_high();
 8001daa:	f7ff ff85 	bl	8001cb8 <cs_high>
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	24000364 	.word	0x24000364

08001dbc <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	71bb      	strb	r3, [r7, #6]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	717b      	strb	r3, [r7, #5]
    uint8_t read_reg = READ | reg;
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;

    if (len > 6) {
 8001dd8:	797b      	ldrb	r3, [r7, #5]
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d901      	bls.n	8001de2 <read_multiple_icm20948_reg+0x26>
        return NULL; // Buffer overflow protection
 8001dde:	2300      	movs	r3, #0
 8001de0:	e01c      	b.n	8001e1c <read_multiple_icm20948_reg+0x60>
    }

    // Reset data ready flag
    dma_data_ready = 0;
 8001de2:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <read_multiple_icm20948_reg+0x68>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]

    select_user_bank(ub);
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff7c 	bl	8001ce8 <select_user_bank>
    cs_low();
 8001df0:	f7ff ff6e 	bl	8001cd0 <cs_low>

    // Start non-blocking DMA transfer
    status = HAL_SPI_TransmitReceive_DMA(ICM20948_SPI, &read_reg, dma_rx_buffer, len + 1);
 8001df4:	797b      	ldrb	r3, [r7, #5]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	f107 010e 	add.w	r1, r7, #14
 8001e00:	4a09      	ldr	r2, [pc, #36]	@ (8001e28 <read_multiple_icm20948_reg+0x6c>)
 8001e02:	480a      	ldr	r0, [pc, #40]	@ (8001e2c <read_multiple_icm20948_reg+0x70>)
 8001e04:	f007 ffd6 	bl	8009db4 <HAL_SPI_TransmitReceive_DMA>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <read_multiple_icm20948_reg+0x5e>
        cs_high();
 8001e12:	f7ff ff51 	bl	8001cb8 <cs_high>
        return NULL; // Error handling
 8001e16:	2300      	movs	r3, #0
 8001e18:	e000      	b.n	8001e1c <read_multiple_icm20948_reg+0x60>
    }

    return dma_reg_val; // Data will be available in callback
 8001e1a:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <read_multiple_icm20948_reg+0x74>)
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	240001fd 	.word	0x240001fd
 8001e28:	24000200 	.word	0x24000200
 8001e2c:	24000364 	.word	0x24000364
 8001e30:	24000208 	.word	0x24000208

08001e34 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	603a      	str	r2, [r7, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
 8001e42:	460b      	mov	r3, r1
 8001e44:	71bb      	strb	r3, [r7, #6]
 8001e46:	4613      	mov	r3, r2
 8001e48:	717b      	strb	r3, [r7, #5]
    uint8_t write_buffer[7];
    HAL_StatusTypeDef status;

    if (len > 6) {
 8001e4a:	797b      	ldrb	r3, [r7, #5]
 8001e4c:	2b06      	cmp	r3, #6
 8001e4e:	d824      	bhi.n	8001e9a <write_multiple_icm20948_reg+0x66>
        return; // Buffer overflow protection
    }

    // Reset write complete flag
    dma_write_complete = 0;
 8001e50:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <write_multiple_icm20948_reg+0x70>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]

    write_buffer[0] = WRITE | reg;
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	723b      	strb	r3, [r7, #8]
    memcpy(&write_buffer[1], val, len);
 8001e5a:	797a      	ldrb	r2, [r7, #5]
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	3301      	adds	r3, #1
 8001e62:	6839      	ldr	r1, [r7, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00a fd44 	bl	800c8f2 <memcpy>

    select_user_bank(ub);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff3b 	bl	8001ce8 <select_user_bank>
    cs_low();
 8001e72:	f7ff ff2d 	bl	8001cd0 <cs_low>

    status = HAL_SPI_Transmit_DMA(ICM20948_SPI, write_buffer, len + 1);
 8001e76:	797b      	ldrb	r3, [r7, #5]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	4808      	ldr	r0, [pc, #32]	@ (8001ea8 <write_multiple_icm20948_reg+0x74>)
 8001e86:	f007 fe53 	bl	8009b30 <HAL_SPI_Transmit_DMA>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <write_multiple_icm20948_reg+0x68>
        cs_high();
 8001e94:	f7ff ff10 	bl	8001cb8 <cs_high>
        return; // Error handling
 8001e98:	e000      	b.n	8001e9c <write_multiple_icm20948_reg+0x68>
        return; // Buffer overflow protection
 8001e9a:	bf00      	nop
    }
}
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	240001fe 	.word	0x240001fe
 8001ea8:	24000364 	.word	0x24000364

08001eac <HAL_SPI_TxRxCpltCallback>:
    return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
}

/* DMA Callback Functions */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b090      	sub	sp, #64	@ 0x40
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    if (hspi == ICM20948_SPI) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a09      	ldr	r2, [pc, #36]	@ (8001edc <HAL_SPI_TxRxCpltCallback+0x30>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d10b      	bne.n	8001ed4 <HAL_SPI_TxRxCpltCallback+0x28>
        char uart_buf[50]; // Local buffer for UART
        cs_high(); // End SPI transaction
 8001ebc:	f7ff fefc 	bl	8001cb8 <cs_high>
        memcpy(dma_reg_val, &dma_rx_buffer[1], 6); // Copy data, skip dummy byte
 8001ec0:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <HAL_SPI_TxRxCpltCallback+0x34>)
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <HAL_SPI_TxRxCpltCallback+0x38>)
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	6010      	str	r0, [r2, #0]
 8001eca:	889b      	ldrh	r3, [r3, #4]
 8001ecc:	8093      	strh	r3, [r2, #4]
        dma_data_ready = 1; // Signal data is ready
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
//        snprintf(uart_buf, sizeof(uart_buf), "SPI2 DMA Read Complete\r\n");
//        HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
    }
}
 8001ed4:	bf00      	nop
 8001ed6:	3740      	adds	r7, #64	@ 0x40
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	24000364 	.word	0x24000364
 8001ee0:	24000208 	.word	0x24000208
 8001ee4:	24000200 	.word	0x24000200
 8001ee8:	240001fd 	.word	0x240001fd

08001eec <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b090      	sub	sp, #64	@ 0x40
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
    if (hspi == ICM20948_SPI) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a06      	ldr	r2, [pc, #24]	@ (8001f10 <HAL_SPI_TxCpltCallback+0x24>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d104      	bne.n	8001f06 <HAL_SPI_TxCpltCallback+0x1a>
        char uart_buf[50]; // Local buffer for UART
        cs_high(); // End SPI transaction
 8001efc:	f7ff fedc 	bl	8001cb8 <cs_high>
        dma_write_complete = 1; // Signal write is complete
 8001f00:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <HAL_SPI_TxCpltCallback+0x28>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
//        snprintf(uart_buf, sizeof(uart_buf), "SPI2 DMA Write Complete\r\n");
//        HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
    }
}
 8001f06:	bf00      	nop
 8001f08:	3740      	adds	r7, #64	@ 0x40
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	24000364 	.word	0x24000364
 8001f14:	240001fe 	.word	0x240001fe

08001f18 <kalman_init>:
static void kalman_update_single(kalman_state_t *state, float gyro_rate, float accel_angle, float dt, float r_measure);
static float calculate_roll(filtered_axises *accel);
static float calculate_pitch(filtered_axises *accel);

void kalman_init(kalman_filter_t *filter)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
    // Initialize roll filter
    filter->roll.angle = 0.0f;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
    filter->roll.bias = 0.0f;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
    filter->roll.P[0][0] = 0.0f;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
    filter->roll.P[0][1] = 0.0f;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
    filter->roll.P[1][0] = 0.0f;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
    filter->roll.P[1][1] = 0.0f;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]

    // Initialize pitch filter
    filter->pitch.angle = 0.0f;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
    filter->pitch.bias = 0.0f;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	61da      	str	r2, [r3, #28]
    filter->pitch.P[0][0] = 0.0f;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	621a      	str	r2, [r3, #32]
    filter->pitch.P[0][1] = 0.0f;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    filter->pitch.P[1][0] = 0.0f;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28
    filter->pitch.P[1][1] = 0.0f;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <kalman_update>:

void kalman_update(kalman_filter_t *filter, filtered_axises *gyro, filtered_axises *accel, float *roll, float *pitch)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	@ 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
    static uint32_t stationary_count = 0;
    static float gyro_bias_sum[2] = {0.0f, 0.0f}; // For roll (gyro->y) and pitch (gyro->x)
    float dt = 1.0f / SAMPLE_RATE_HZ;
 8001f9a:	4baa      	ldr	r3, [pc, #680]	@ (8002244 <kalman_update+0x2b8>)
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    float accel_roll = calculate_roll(accel);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fa56 	bl	8002450 <calculate_roll>
 8001fa4:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float accel_pitch = calculate_pitch(accel);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fa95 	bl	80024d8 <calculate_pitch>
 8001fae:	ed87 0a08 	vstr	s0, [r7, #32]
    float accel_magnitude = sqrtf(accel->x * accel->x + accel->y * accel->y + accel->z * accel->z);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	ed93 7a00 	vldr	s14, [r3]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	f00c fc5d 	bl	800e8ac <sqrtf>
 8001ff2:	ed87 0a07 	vstr	s0, [r7, #28]
    float r_measure = KALMAN_R_MEASURE;
 8001ff6:	4b94      	ldr	r3, [pc, #592]	@ (8002248 <kalman_update+0x2bc>)
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Adjust r_measure dynamically based on accelerometer magnitude
    if (fabsf(accel_magnitude - 1.0f) > 0.02f) {
 8001ffa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ffe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002006:	eef0 7ae7 	vabs.f32	s15, s15
 800200a:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 800224c <kalman_update+0x2c0>
 800200e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	dd11      	ble.n	800203c <kalman_update+0xb0>
        r_measure *= (1.0f + 1.0f * fabsf(accel_magnitude - 1.0f)); // Softer scaling
 8002018:	edd7 7a07 	vldr	s15, [r7, #28]
 800201c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002024:	eef0 7ae7 	vabs.f32	s15, s15
 8002028:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800202c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002030:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002038:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    }

    // Detect stationary condition for bias and angle correction
    float gyro_magnitude = sqrtf(gyro->x * gyro->x + gyro->y * gyro->y + gyro->z * gyro->z);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	edd3 7a01 	vldr	s15, [r3, #4]
 8002058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	edd3 6a02 	vldr	s13, [r3, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	edd3 7a02 	vldr	s15, [r3, #8]
 800206c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002074:	eeb0 0a67 	vmov.f32	s0, s15
 8002078:	f00c fc18 	bl	800e8ac <sqrtf>
 800207c:	ed87 0a06 	vstr	s0, [r7, #24]
    if (gyro_magnitude < 0.15f && fabsf(accel_magnitude - 1.0f) < 0.015f) {
 8002080:	edd7 7a06 	vldr	s15, [r7, #24]
 8002084:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8002250 <kalman_update+0x2c4>
 8002088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800208c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002090:	f140 809f 	bpl.w	80021d2 <kalman_update+0x246>
 8002094:	edd7 7a07 	vldr	s15, [r7, #28]
 8002098:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800209c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020a0:	eef0 7ae7 	vabs.f32	s15, s15
 80020a4:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8002254 <kalman_update+0x2c8>
 80020a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b0:	f140 808f 	bpl.w	80021d2 <kalman_update+0x246>
        stationary_count++;
 80020b4:	4b68      	ldr	r3, [pc, #416]	@ (8002258 <kalman_update+0x2cc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a67      	ldr	r2, [pc, #412]	@ (8002258 <kalman_update+0x2cc>)
 80020bc:	6013      	str	r3, [r2, #0]
        gyro_bias_sum[0] += gyro->y; // Roll uses gyro->y
 80020be:	4b67      	ldr	r3, [pc, #412]	@ (800225c <kalman_update+0x2d0>)
 80020c0:	ed93 7a00 	vldr	s14, [r3]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80020ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ce:	4b63      	ldr	r3, [pc, #396]	@ (800225c <kalman_update+0x2d0>)
 80020d0:	edc3 7a00 	vstr	s15, [r3]
        gyro_bias_sum[1] += -gyro->x; // Pitch uses -gyro->x
 80020d4:	4b61      	ldr	r3, [pc, #388]	@ (800225c <kalman_update+0x2d0>)
 80020d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e4:	4b5d      	ldr	r3, [pc, #372]	@ (800225c <kalman_update+0x2d0>)
 80020e6:	edc3 7a01 	vstr	s15, [r3, #4]
        if (stationary_count >= 20) { // ~0.036s at 550 Hz
 80020ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002258 <kalman_update+0x2cc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b13      	cmp	r3, #19
 80020f0:	d97a      	bls.n	80021e8 <kalman_update+0x25c>
            // Update bias with EMA
            float alpha = 0.3f; // Aggressive bias correction
 80020f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002260 <kalman_update+0x2d4>)
 80020f4:	617b      	str	r3, [r7, #20]
            filter->roll.bias = alpha * (gyro_bias_sum[0] / stationary_count) + (1.0f - alpha) * filter->roll.bias;
 80020f6:	4b59      	ldr	r3, [pc, #356]	@ (800225c <kalman_update+0x2d0>)
 80020f8:	edd3 6a00 	vldr	s13, [r3]
 80020fc:	4b56      	ldr	r3, [pc, #344]	@ (8002258 <kalman_update+0x2cc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800210c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002110:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002114:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002118:	edd7 7a05 	vldr	s15, [r7, #20]
 800211c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	edd3 7a01 	vldr	s15, [r3, #4]
 8002126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	edc3 7a01 	vstr	s15, [r3, #4]
            filter->pitch.bias = alpha * (gyro_bias_sum[1] / stationary_count) + (1.0f - alpha) * filter->pitch.bias;
 8002134:	4b49      	ldr	r3, [pc, #292]	@ (800225c <kalman_update+0x2d0>)
 8002136:	edd3 6a01 	vldr	s13, [r3, #4]
 800213a:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <kalman_update+0x2cc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800214a:	edd7 7a05 	vldr	s15, [r7, #20]
 800214e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002156:	edd7 7a05 	vldr	s15, [r7, #20]
 800215a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	edd3 7a07 	vldr	s15, [r3, #28]
 8002164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	edc3 7a07 	vstr	s15, [r3, #28]
            // Reset angles toward accelerometer values
            filter->roll.angle = 0.7f * filter->roll.angle + 0.3f * accel_roll;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002264 <kalman_update+0x2d8>
 800217c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002180:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002184:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002268 <kalman_update+0x2dc>
 8002188:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800218c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	edc3 7a00 	vstr	s15, [r3]
            filter->pitch.angle = 0.7f * filter->pitch.angle + 0.3f * accel_pitch;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	edd3 7a06 	vldr	s15, [r3, #24]
 800219c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002264 <kalman_update+0x2d8>
 80021a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80021a8:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8002268 <kalman_update+0x2dc>
 80021ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	edc3 7a06 	vstr	s15, [r3, #24]
            stationary_count = 0;
 80021ba:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <kalman_update+0x2cc>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
            gyro_bias_sum[0] = 0.0f;
 80021c0:	4b26      	ldr	r3, [pc, #152]	@ (800225c <kalman_update+0x2d0>)
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
            gyro_bias_sum[1] = 0.0f;
 80021c8:	4b24      	ldr	r3, [pc, #144]	@ (800225c <kalman_update+0x2d0>)
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
        if (stationary_count >= 20) { // ~0.036s at 550 Hz
 80021d0:	e00a      	b.n	80021e8 <kalman_update+0x25c>
        }
    } else {
        stationary_count = 0;
 80021d2:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <kalman_update+0x2cc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
        gyro_bias_sum[0] = 0.0f;
 80021d8:	4b20      	ldr	r3, [pc, #128]	@ (800225c <kalman_update+0x2d0>)
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
        gyro_bias_sum[1] = 0.0f;
 80021e0:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <kalman_update+0x2d0>)
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
    }

    kalman_update_single(&filter->roll, gyro->y, accel_roll, dt, r_measure);
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80021f0:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 80021f4:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 80021f8:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 80021fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002200:	4610      	mov	r0, r2
 8002202:	f000 f833 	bl	800226c <kalman_update_single>
    kalman_update_single(&filter->pitch, -gyro->x, accel_pitch, dt, r_measure);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f103 0218 	add.w	r2, r3, #24
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	eef1 7a67 	vneg.f32	s15, s15
 8002216:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 800221a:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 800221e:	edd7 0a08 	vldr	s1, [r7, #32]
 8002222:	eeb0 0a67 	vmov.f32	s0, s15
 8002226:	4610      	mov	r0, r2
 8002228:	f000 f820 	bl	800226c <kalman_update_single>
    *roll = filter->roll.angle;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	601a      	str	r2, [r3, #0]
    *pitch = filter->pitch.angle;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	3730      	adds	r7, #48	@ 0x30
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	3aee500f 	.word	0x3aee500f
 8002248:	3ccccccd 	.word	0x3ccccccd
 800224c:	3ca3d70a 	.word	0x3ca3d70a
 8002250:	3e19999a 	.word	0x3e19999a
 8002254:	3c75c28f 	.word	0x3c75c28f
 8002258:	24000210 	.word	0x24000210
 800225c:	24000214 	.word	0x24000214
 8002260:	3e99999a 	.word	0x3e99999a
 8002264:	3f333333 	.word	0x3f333333
 8002268:	3e99999a 	.word	0x3e99999a

0800226c <kalman_update_single>:

static void kalman_update_single(kalman_state_t *state, float gyro_rate, float accel_angle, float dt, float r_measure)
{
 800226c:	b480      	push	{r7}
 800226e:	b08f      	sub	sp, #60	@ 0x3c
 8002270:	af00      	add	r7, sp, #0
 8002272:	6178      	str	r0, [r7, #20]
 8002274:	ed87 0a04 	vstr	s0, [r7, #16]
 8002278:	edc7 0a03 	vstr	s1, [r7, #12]
 800227c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002280:	edc7 1a01 	vstr	s3, [r7, #4]
    // Predict step
    float angle_pred = state->angle + dt * (gyro_rate - state->bias);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	ed93 7a00 	vldr	s14, [r3]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002290:	edd7 6a04 	vldr	s13, [r7, #16]
 8002294:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002298:	edd7 7a02 	vldr	s15, [r7, #8]
 800229c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    state->P[0][0] += dt * (dt * state->P[1][1] - state->P[0][1] - state->P[1][0] + KALMAN_Q_ANGLE);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	edd3 6a05 	vldr	s13, [r3, #20]
 80022b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80022b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	edd3 7a03 	vldr	s15, [r3, #12]
 80022c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80022cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022d0:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002448 <kalman_update_single+0x1dc>
 80022d4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80022d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80022dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	edc3 7a02 	vstr	s15, [r3, #8]
    state->P[0][1] -= dt * state->P[1][1];
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	edd3 6a05 	vldr	s13, [r3, #20]
 80022f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	edc3 7a03 	vstr	s15, [r3, #12]
    state->P[1][0] -= dt * state->P[1][1];
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	ed93 7a04 	vldr	s14, [r3, #16]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	edd3 6a05 	vldr	s13, [r3, #20]
 8002314:	edd7 7a02 	vldr	s15, [r7, #8]
 8002318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	edc3 7a04 	vstr	s15, [r3, #16]
    state->P[1][1] += KALMAN_Q_BIAS * dt;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	ed93 7a05 	vldr	s14, [r3, #20]
 800232c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002330:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800244c <kalman_update_single+0x1e0>
 8002334:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	edc3 7a05 	vstr	s15, [r3, #20]

    // Update step
    float innovation = accel_angle - angle_pred;
 8002342:	ed97 7a03 	vldr	s14, [r7, #12]
 8002346:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800234a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float S = state->P[0][0] + r_measure;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	edd3 7a02 	vldr	s15, [r3, #8]
 8002358:	ed97 7a01 	vldr	s14, [r7, #4]
 800235c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002360:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float K[2];
    K[0] = state->P[0][0] / S;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	edd3 6a02 	vldr	s13, [r3, #8]
 800236a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800236e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002372:	edc7 7a07 	vstr	s15, [r7, #28]
    K[1] = state->P[1][0] / S;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	edd3 6a04 	vldr	s13, [r3, #16]
 800237c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002384:	edc7 7a08 	vstr	s15, [r7, #32]

    // Update state
    state->angle = angle_pred + K[0] * innovation;
 8002388:	ed97 7a07 	vldr	s14, [r7, #28]
 800238c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002394:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	edc3 7a00 	vstr	s15, [r3]
    state->bias += K[1] * innovation;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80023a8:	edd7 6a08 	vldr	s13, [r7, #32]
 80023ac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80023b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update covariance matrix
    float P00_temp = state->P[0][0];
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float P01_temp = state->P[0][1];
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24
    state->P[0][0] -= K[0] * P00_temp;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80023d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80023d4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80023d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	edc3 7a02 	vstr	s15, [r3, #8]
    state->P[0][1] -= K[0] * P01_temp;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80023ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80023f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	edc3 7a03 	vstr	s15, [r3, #12]
    state->P[1][0] -= K[1] * P00_temp;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	ed93 7a04 	vldr	s14, [r3, #16]
 8002408:	edd7 6a08 	vldr	s13, [r7, #32]
 800240c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	edc3 7a04 	vstr	s15, [r3, #16]
    state->P[1][1] -= K[1] * P01_temp;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	ed93 7a05 	vldr	s14, [r3, #20]
 8002424:	edd7 6a08 	vldr	s13, [r7, #32]
 8002428:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800242c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800243a:	bf00      	nop
 800243c:	373c      	adds	r7, #60	@ 0x3c
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	3ca3d70a 	.word	0x3ca3d70a
 800244c:	3b449ba6 	.word	0x3b449ba6

08002450 <calculate_roll>:

static float calculate_roll(filtered_axises *accel)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	ed2d 8b02 	vpush	{d8}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    return atan2f(accel->y, sqrtf(accel->z * accel->z + accel->x * accel->x)) * 180.0f / M_PI;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	ed93 8a01 	vldr	s16, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	ed93 7a02 	vldr	s14, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	edd3 7a02 	vldr	s15, [r3, #8]
 800246e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	edd3 6a00 	vldr	s13, [r3]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002486:	eeb0 0a67 	vmov.f32	s0, s15
 800248a:	f00c fa0f 	bl	800e8ac <sqrtf>
 800248e:	eef0 7a40 	vmov.f32	s15, s0
 8002492:	eef0 0a67 	vmov.f32	s1, s15
 8002496:	eeb0 0a48 	vmov.f32	s0, s16
 800249a:	f00c fa05 	bl	800e8a8 <atan2f>
 800249e:	eef0 7a40 	vmov.f32	s15, s0
 80024a2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80024d0 <calculate_roll+0x80>
 80024a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80024ae:	ed9f 5b06 	vldr	d5, [pc, #24]	@ 80024c8 <calculate_roll+0x78>
 80024b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80024ba:	eeb0 0a67 	vmov.f32	s0, s15
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	ecbd 8b02 	vpop	{d8}
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	54442d18 	.word	0x54442d18
 80024cc:	400921fb 	.word	0x400921fb
 80024d0:	43340000 	.word	0x43340000
 80024d4:	00000000 	.word	0x00000000

080024d8 <calculate_pitch>:

static float calculate_pitch(filtered_axises *accel)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
    return atan2f(-accel->x, accel->z) * 180.0f / M_PI;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	eef1 7a67 	vneg.f32	s15, s15
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80024f0:	eef0 0a47 	vmov.f32	s1, s14
 80024f4:	eeb0 0a67 	vmov.f32	s0, s15
 80024f8:	f00c f9d6 	bl	800e8a8 <atan2f>
 80024fc:	eef0 7a40 	vmov.f32	s15, s0
 8002500:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002530 <calculate_pitch+0x58>
 8002504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002508:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800250c:	ed9f 5b06 	vldr	d5, [pc, #24]	@ 8002528 <calculate_pitch+0x50>
 8002510:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002514:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8002518:	eeb0 0a67 	vmov.f32	s0, s15
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	f3af 8000 	nop.w
 8002528:	54442d18 	.word	0x54442d18
 800252c:	400921fb 	.word	0x400921fb
 8002530:	43340000 	.word	0x43340000

08002534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b094      	sub	sp, #80	@ 0x50
 8002538:	af10      	add	r7, sp, #64	@ 0x40

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800253a:	f000 f97b 	bl	8002834 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800253e:	f000 fdb3 	bl	80030a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002542:	f000 f907 	bl	8002754 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002546:	f7fe fe01 	bl	800114c <MX_GPIO_Init>
  MX_DMA_Init();
 800254a:	f7fe f8cf 	bl	80006ec <MX_DMA_Init>
  MX_SPI2_Init();
 800254e:	f000 f9a3 	bl	8002898 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 8002552:	f000 fcc9 	bl	8002ee8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize filters
  // Initialize filters and Kalman filter
  filters_init(&filter_state);
 8002556:	4873      	ldr	r0, [pc, #460]	@ (8002724 <main+0x1f0>)
 8002558:	f7fe f8f0 	bl	800073c <filters_init>
  kalman_init(&kalman_filter);
 800255c:	4872      	ldr	r0, [pc, #456]	@ (8002728 <main+0x1f4>)
 800255e:	f7ff fcdb 	bl	8001f18 <kalman_init>
  if (icm20948_who_am_i()) {
 8002562:	f7fe fffd 	bl	8001560 <icm20948_who_am_i>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d037      	beq.n	80025dc <main+0xa8>
	  icm20948_init();
 800256c:	f7fe fe52 	bl	8001214 <icm20948_init>
	  filters_calibrate_gyro(&filter_state);
 8002570:	486c      	ldr	r0, [pc, #432]	@ (8002724 <main+0x1f0>)
 8002572:	f7fe f8f3 	bl	800075c <filters_calibrate_gyro>
	  filters_calibrate_accel(&filter_state);
 8002576:	486b      	ldr	r0, [pc, #428]	@ (8002724 <main+0x1f0>)
 8002578:	f7fe f974 	bl	8000864 <filters_calibrate_accel>
	  snprintf(uart_buf, sizeof(uart_buf), "Init Success, Gyro Bias: X=%.2f, Y=%.2f, Z=%.2f dps\n"
			  "Accel Bias: X=%.2f, Y=%.2f, Z=%.2f g\n",
			  filter_state.gyro_bias[0], filter_state.gyro_bias[1], filter_state.gyro_bias[2],
 800257c:	4b69      	ldr	r3, [pc, #420]	@ (8002724 <main+0x1f0>)
 800257e:	edd3 7a01 	vldr	s15, [r3, #4]
	  snprintf(uart_buf, sizeof(uart_buf), "Init Success, Gyro Bias: X=%.2f, Y=%.2f, Z=%.2f dps\n"
 8002582:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  filter_state.gyro_bias[0], filter_state.gyro_bias[1], filter_state.gyro_bias[2],
 8002586:	4b67      	ldr	r3, [pc, #412]	@ (8002724 <main+0x1f0>)
 8002588:	edd3 6a02 	vldr	s13, [r3, #8]
	  snprintf(uart_buf, sizeof(uart_buf), "Init Success, Gyro Bias: X=%.2f, Y=%.2f, Z=%.2f dps\n"
 800258c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  filter_state.gyro_bias[0], filter_state.gyro_bias[1], filter_state.gyro_bias[2],
 8002590:	4b64      	ldr	r3, [pc, #400]	@ (8002724 <main+0x1f0>)
 8002592:	edd3 5a03 	vldr	s11, [r3, #12]
	  snprintf(uart_buf, sizeof(uart_buf), "Init Success, Gyro Bias: X=%.2f, Y=%.2f, Z=%.2f dps\n"
 8002596:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  filter_state.accel_bias[0], filter_state.accel_bias[1], filter_state.accel_bias[2]);
 800259a:	4b62      	ldr	r3, [pc, #392]	@ (8002724 <main+0x1f0>)
 800259c:	edd3 4a04 	vldr	s9, [r3, #16]
	  snprintf(uart_buf, sizeof(uart_buf), "Init Success, Gyro Bias: X=%.2f, Y=%.2f, Z=%.2f dps\n"
 80025a0:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  filter_state.accel_bias[0], filter_state.accel_bias[1], filter_state.accel_bias[2]);
 80025a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002724 <main+0x1f0>)
 80025a6:	edd3 3a05 	vldr	s7, [r3, #20]
	  snprintf(uart_buf, sizeof(uart_buf), "Init Success, Gyro Bias: X=%.2f, Y=%.2f, Z=%.2f dps\n"
 80025aa:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
			  filter_state.accel_bias[0], filter_state.accel_bias[1], filter_state.accel_bias[2]);
 80025ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002724 <main+0x1f0>)
 80025b0:	edd3 2a06 	vldr	s5, [r3, #24]
	  snprintf(uart_buf, sizeof(uart_buf), "Init Success, Gyro Bias: X=%.2f, Y=%.2f, Z=%.2f dps\n"
 80025b4:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 80025b8:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 80025bc:	ed8d 3b08 	vstr	d3, [sp, #32]
 80025c0:	ed8d 4b06 	vstr	d4, [sp, #24]
 80025c4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80025c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80025cc:	ed8d 7b00 	vstr	d7, [sp]
 80025d0:	4a56      	ldr	r2, [pc, #344]	@ (800272c <main+0x1f8>)
 80025d2:	21c8      	movs	r1, #200	@ 0xc8
 80025d4:	4856      	ldr	r0, [pc, #344]	@ (8002730 <main+0x1fc>)
 80025d6:	f00a f893 	bl	800c700 <sniprintf>
 80025da:	e004      	b.n	80025e6 <main+0xb2>
  } else {
	  snprintf(uart_buf, sizeof(uart_buf), "ICM-20948 Init Failed\r\n");
 80025dc:	4a55      	ldr	r2, [pc, #340]	@ (8002734 <main+0x200>)
 80025de:	21c8      	movs	r1, #200	@ 0xc8
 80025e0:	4853      	ldr	r0, [pc, #332]	@ (8002730 <main+0x1fc>)
 80025e2:	f00a f88d 	bl	800c700 <sniprintf>
  }
  HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 80025e6:	4852      	ldr	r0, [pc, #328]	@ (8002730 <main+0x1fc>)
 80025e8:	f7fd fee2 	bl	80003b0 <strlen>
 80025ec:	4603      	mov	r3, r0
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	2364      	movs	r3, #100	@ 0x64
 80025f2:	494f      	ldr	r1, [pc, #316]	@ (8002730 <main+0x1fc>)
 80025f4:	4850      	ldr	r0, [pc, #320]	@ (8002738 <main+0x204>)
 80025f6:	f008 f96e 	bl	800a8d6 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_tick = HAL_GetTick();
 80025fa:	f000 fddb 	bl	80031b4 <HAL_GetTick>
 80025fe:	60f8      	str	r0, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick() - last_tick >= 1) {
 8002600:	f000 fdd8 	bl	80031b4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4293      	cmp	r3, r2
 800260a:	d0f9      	beq.n	8002600 <main+0xcc>
		  filters_apply_gyro(&filtered_gyro, &filter_state);
 800260c:	4945      	ldr	r1, [pc, #276]	@ (8002724 <main+0x1f0>)
 800260e:	484b      	ldr	r0, [pc, #300]	@ (800273c <main+0x208>)
 8002610:	f7fe f988 	bl	8000924 <filters_apply_gyro>
		  filters_apply_accel(&filtered_accel, &filter_state);
 8002614:	4943      	ldr	r1, [pc, #268]	@ (8002724 <main+0x1f0>)
 8002616:	484a      	ldr	r0, [pc, #296]	@ (8002740 <main+0x20c>)
 8002618:	f7fe fcc6 	bl	8000fa8 <filters_apply_accel>
		  if (isnan(filtered_gyro.x) || isnan(filtered_accel.x)) {
 800261c:	4b47      	ldr	r3, [pc, #284]	@ (800273c <main+0x208>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	eef4 7a67 	vcmp.f32	s15, s15
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	d607      	bvs.n	800263c <main+0x108>
 800262c:	4b44      	ldr	r3, [pc, #272]	@ (8002740 <main+0x20c>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	eef4 7a67 	vcmp.f32	s15, s15
 8002636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263a:	d70f      	bvc.n	800265c <main+0x128>
			  snprintf(uart_buf, sizeof(uart_buf), "NaN Detected in Filtered Data\r\n");
 800263c:	4a41      	ldr	r2, [pc, #260]	@ (8002744 <main+0x210>)
 800263e:	21c8      	movs	r1, #200	@ 0xc8
 8002640:	483b      	ldr	r0, [pc, #236]	@ (8002730 <main+0x1fc>)
 8002642:	f00a f85d 	bl	800c700 <sniprintf>
			  HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8002646:	483a      	ldr	r0, [pc, #232]	@ (8002730 <main+0x1fc>)
 8002648:	f7fd feb2 	bl	80003b0 <strlen>
 800264c:	4603      	mov	r3, r0
 800264e:	b29a      	uxth	r2, r3
 8002650:	2364      	movs	r3, #100	@ 0x64
 8002652:	4937      	ldr	r1, [pc, #220]	@ (8002730 <main+0x1fc>)
 8002654:	4838      	ldr	r0, [pc, #224]	@ (8002738 <main+0x204>)
 8002656:	f008 f93e 	bl	800a8d6 <HAL_UART_Transmit>
 800265a:	e05b      	b.n	8002714 <main+0x1e0>
		  } else {
			  float roll, pitch;
			  // Use Kalman filter to get fused roll and pitch
			  kalman_update(&kalman_filter, &filtered_gyro, &filtered_accel, &roll, &pitch);
 800265c:	f107 0208 	add.w	r2, r7, #8
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	4a36      	ldr	r2, [pc, #216]	@ (8002740 <main+0x20c>)
 8002668:	4934      	ldr	r1, [pc, #208]	@ (800273c <main+0x208>)
 800266a:	482f      	ldr	r0, [pc, #188]	@ (8002728 <main+0x1f4>)
 800266c:	f7ff fc8e 	bl	8001f8c <kalman_update>
			  uart_print_counter++;
 8002670:	4b35      	ldr	r3, [pc, #212]	@ (8002748 <main+0x214>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b33      	ldr	r3, [pc, #204]	@ (8002748 <main+0x214>)
 800267a:	701a      	strb	r2, [r3, #0]
			  if (uart_print_counter >= 70) {
 800267c:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <main+0x214>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b45      	cmp	r3, #69	@ 0x45
 8002682:	d947      	bls.n	8002714 <main+0x1e0>
				  snprintf(uart_buf, sizeof(uart_buf),
						  "Filtered Accel: X=%.2f, Y=%.2f, Z=%.2f g\n"
						  "Filtered Gyro: X=%.2f, Y=%.2f, Z=%.2f dps\n"
						  "Kalman Roll: %.2f deg, Pitch: %.2f deg\n\n",
						  filtered_accel.x, filtered_accel.y, filtered_accel.z,
 8002684:	4b2e      	ldr	r3, [pc, #184]	@ (8002740 <main+0x20c>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
				  snprintf(uart_buf, sizeof(uart_buf),
 800268a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
						  filtered_accel.x, filtered_accel.y, filtered_accel.z,
 800268e:	4b2c      	ldr	r3, [pc, #176]	@ (8002740 <main+0x20c>)
 8002690:	edd3 6a01 	vldr	s13, [r3, #4]
				  snprintf(uart_buf, sizeof(uart_buf),
 8002694:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
						  filtered_accel.x, filtered_accel.y, filtered_accel.z,
 8002698:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <main+0x20c>)
 800269a:	edd3 5a02 	vldr	s11, [r3, #8]
				  snprintf(uart_buf, sizeof(uart_buf),
 800269e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						  filtered_gyro.x, filtered_gyro.y, filtered_gyro.z,
 80026a2:	4b26      	ldr	r3, [pc, #152]	@ (800273c <main+0x208>)
 80026a4:	edd3 4a00 	vldr	s9, [r3]
				  snprintf(uart_buf, sizeof(uart_buf),
 80026a8:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						  filtered_gyro.x, filtered_gyro.y, filtered_gyro.z,
 80026ac:	4b23      	ldr	r3, [pc, #140]	@ (800273c <main+0x208>)
 80026ae:	edd3 3a01 	vldr	s7, [r3, #4]
				  snprintf(uart_buf, sizeof(uart_buf),
 80026b2:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						  filtered_gyro.x, filtered_gyro.y, filtered_gyro.z,
 80026b6:	4b21      	ldr	r3, [pc, #132]	@ (800273c <main+0x208>)
 80026b8:	edd3 2a02 	vldr	s5, [r3, #8]
				  snprintf(uart_buf, sizeof(uart_buf),
 80026bc:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 80026c0:	edd7 1a02 	vldr	s3, [r7, #8]
 80026c4:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 80026c8:	edd7 0a01 	vldr	s1, [r7, #4]
 80026cc:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80026d0:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 80026d4:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 80026d8:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 80026dc:	ed8d 3b08 	vstr	d3, [sp, #32]
 80026e0:	ed8d 4b06 	vstr	d4, [sp, #24]
 80026e4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80026e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80026ec:	ed8d 7b00 	vstr	d7, [sp]
 80026f0:	4a16      	ldr	r2, [pc, #88]	@ (800274c <main+0x218>)
 80026f2:	21c8      	movs	r1, #200	@ 0xc8
 80026f4:	480e      	ldr	r0, [pc, #56]	@ (8002730 <main+0x1fc>)
 80026f6:	f00a f803 	bl	800c700 <sniprintf>
						  roll, pitch);

				  HAL_UART_Transmit(&huart6, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 80026fa:	480d      	ldr	r0, [pc, #52]	@ (8002730 <main+0x1fc>)
 80026fc:	f7fd fe58 	bl	80003b0 <strlen>
 8002700:	4603      	mov	r3, r0
 8002702:	b29a      	uxth	r2, r3
 8002704:	2364      	movs	r3, #100	@ 0x64
 8002706:	490a      	ldr	r1, [pc, #40]	@ (8002730 <main+0x1fc>)
 8002708:	480b      	ldr	r0, [pc, #44]	@ (8002738 <main+0x204>)
 800270a:	f008 f8e4 	bl	800a8d6 <HAL_UART_Transmit>
				  uart_print_counter = 0;
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <main+0x214>)
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8002714:	2108      	movs	r1, #8
 8002716:	480e      	ldr	r0, [pc, #56]	@ (8002750 <main+0x21c>)
 8002718:	f003 ff09 	bl	800652e <HAL_GPIO_TogglePin>
		  last_tick = HAL_GetTick();
 800271c:	f000 fd4a 	bl	80031b4 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]
	  if (HAL_GetTick() - last_tick >= 1) {
 8002722:	e76d      	b.n	8002600 <main+0xcc>
 8002724:	24000300 	.word	0x24000300
 8002728:	24000334 	.word	0x24000334
 800272c:	0800ee60 	.word	0x0800ee60
 8002730:	2400021c 	.word	0x2400021c
 8002734:	0800eebc 	.word	0x0800eebc
 8002738:	240004e0 	.word	0x240004e0
 800273c:	240002e8 	.word	0x240002e8
 8002740:	240002f4 	.word	0x240002f4
 8002744:	0800eed4 	.word	0x0800eed4
 8002748:	240002e4 	.word	0x240002e4
 800274c:	0800eef4 	.word	0x0800eef4
 8002750:	58021000 	.word	0x58021000

08002754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b09c      	sub	sp, #112	@ 0x70
 8002758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800275e:	224c      	movs	r2, #76	@ 0x4c
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f00a f845 	bl	800c7f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	2220      	movs	r2, #32
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f00a f83f 	bl	800c7f2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002774:	2002      	movs	r0, #2
 8002776:	f003 fef5 	bl	8006564 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4b2c      	ldr	r3, [pc, #176]	@ (8002830 <SystemClock_Config+0xdc>)
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	4a2b      	ldr	r2, [pc, #172]	@ (8002830 <SystemClock_Config+0xdc>)
 8002784:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002788:	6193      	str	r3, [r2, #24]
 800278a:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <SystemClock_Config+0xdc>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002796:	bf00      	nop
 8002798:	4b25      	ldr	r3, [pc, #148]	@ (8002830 <SystemClock_Config+0xdc>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027a4:	d1f8      	bne.n	8002798 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027a6:	2302      	movs	r3, #2
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80027ae:	2340      	movs	r3, #64	@ 0x40
 80027b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b2:	2302      	movs	r3, #2
 80027b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027b6:	2300      	movs	r3, #0
 80027b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027ba:	2304      	movs	r3, #4
 80027bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80027be:	2322      	movs	r3, #34	@ 0x22
 80027c0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80027c6:	2303      	movs	r3, #3
 80027c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027ca:	2302      	movs	r3, #2
 80027cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80027ce:	230c      	movs	r3, #12
 80027d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80027d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 fef9 	bl	80065d8 <HAL_RCC_OscConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80027ec:	f000 f84e 	bl	800288c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f0:	233f      	movs	r3, #63	@ 0x3f
 80027f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027f4:	2303      	movs	r3, #3
 80027f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80027fc:	2308      	movs	r3, #8
 80027fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002800:	2340      	movs	r3, #64	@ 0x40
 8002802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002804:	2340      	movs	r3, #64	@ 0x40
 8002806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800280c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800280e:	2340      	movs	r3, #64	@ 0x40
 8002810:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2103      	movs	r1, #3
 8002816:	4618      	mov	r0, r3
 8002818:	f004 fab8 	bl	8006d8c <HAL_RCC_ClockConfig>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002822:	f000 f833 	bl	800288c <Error_Handler>
  }
}
 8002826:	bf00      	nop
 8002828:	3770      	adds	r7, #112	@ 0x70
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	58024800 	.word	0x58024800

08002834 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800283a:	463b      	mov	r3, r7
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002846:	f000 fdf5 	bl	8003434 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800284a:	2301      	movs	r3, #1
 800284c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800284e:	2300      	movs	r3, #0
 8002850:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002856:	231f      	movs	r3, #31
 8002858:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800285a:	2387      	movs	r3, #135	@ 0x87
 800285c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800285e:	2300      	movs	r3, #0
 8002860:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002862:	2300      	movs	r3, #0
 8002864:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002866:	2301      	movs	r3, #1
 8002868:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002876:	463b      	mov	r3, r7
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fe13 	bl	80034a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800287e:	2004      	movs	r0, #4
 8002880:	f000 fdf0 	bl	8003464 <HAL_MPU_Enable>

}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
}
 8002892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <Error_Handler+0x8>

08002898 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800289c:	4b28      	ldr	r3, [pc, #160]	@ (8002940 <MX_SPI2_Init+0xa8>)
 800289e:	4a29      	ldr	r2, [pc, #164]	@ (8002944 <MX_SPI2_Init+0xac>)
 80028a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028a2:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80028a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028aa:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028b0:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028b2:	2207      	movs	r2, #7
 80028b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80028cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028d8:	2200      	movs	r2, #0
 80028da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028de:	2200      	movs	r2, #0
 80028e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e2:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028ee:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80028f6:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80028fc:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <MX_SPI2_Init+0xa8>)
 80028fe:	2200      	movs	r2, #0
 8002900:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002902:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <MX_SPI2_Init+0xa8>)
 8002904:	2200      	movs	r2, #0
 8002906:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002908:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <MX_SPI2_Init+0xa8>)
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800290e:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <MX_SPI2_Init+0xa8>)
 8002910:	2200      	movs	r2, #0
 8002912:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002914:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <MX_SPI2_Init+0xa8>)
 8002916:	2200      	movs	r2, #0
 8002918:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800291a:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <MX_SPI2_Init+0xa8>)
 800291c:	2200      	movs	r2, #0
 800291e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002920:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <MX_SPI2_Init+0xa8>)
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <MX_SPI2_Init+0xa8>)
 8002928:	2200      	movs	r2, #0
 800292a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800292c:	4804      	ldr	r0, [pc, #16]	@ (8002940 <MX_SPI2_Init+0xa8>)
 800292e:	f006 fb7b 	bl	8009028 <HAL_SPI_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8002938:	f7ff ffa8 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	24000364 	.word	0x24000364
 8002944:	40003800 	.word	0x40003800

08002948 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0ba      	sub	sp, #232	@ 0xe8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002960:	f107 0318 	add.w	r3, r7, #24
 8002964:	22b8      	movs	r2, #184	@ 0xb8
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f009 ff42 	bl	800c7f2 <memset>
  if(spiHandle->Instance==SPI2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6a      	ldr	r2, [pc, #424]	@ (8002b1c <HAL_SPI_MspInit+0x1d4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	f040 80cc 	bne.w	8002b12 <HAL_SPI_MspInit+0x1ca>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800297a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002986:	2300      	movs	r3, #0
 8002988:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800298a:	f107 0318 	add.w	r3, r7, #24
 800298e:	4618      	mov	r0, r3
 8002990:	f004 fd88 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800299a:	f7ff ff77 	bl	800288c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800299e:	4b60      	ldr	r3, [pc, #384]	@ (8002b20 <HAL_SPI_MspInit+0x1d8>)
 80029a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002b20 <HAL_SPI_MspInit+0x1d8>)
 80029a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002b20 <HAL_SPI_MspInit+0x1d8>)
 80029b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029bc:	4b58      	ldr	r3, [pc, #352]	@ (8002b20 <HAL_SPI_MspInit+0x1d8>)
 80029be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c2:	4a57      	ldr	r2, [pc, #348]	@ (8002b20 <HAL_SPI_MspInit+0x1d8>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029cc:	4b54      	ldr	r3, [pc, #336]	@ (8002b20 <HAL_SPI_MspInit+0x1d8>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	4b51      	ldr	r3, [pc, #324]	@ (8002b20 <HAL_SPI_MspInit+0x1d8>)
 80029dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002b20 <HAL_SPI_MspInit+0x1d8>)
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002b20 <HAL_SPI_MspInit+0x1d8>)
 80029ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80029f8:	2306      	movs	r3, #6
 80029fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a10:	2305      	movs	r3, #5
 8002a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4841      	ldr	r0, [pc, #260]	@ (8002b24 <HAL_SPI_MspInit+0x1dc>)
 8002a1e:	f003 fbc5 	bl	80061ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a3c:	2305      	movs	r3, #5
 8002a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a42:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4837      	ldr	r0, [pc, #220]	@ (8002b28 <HAL_SPI_MspInit+0x1e0>)
 8002a4a:	f003 fbaf 	bl	80061ac <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002a4e:	4b37      	ldr	r3, [pc, #220]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a50:	4a37      	ldr	r2, [pc, #220]	@ (8002b30 <HAL_SPI_MspInit+0x1e8>)
 8002a52:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002a54:	4b35      	ldr	r3, [pc, #212]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a56:	2227      	movs	r2, #39	@ 0x27
 8002a58:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a5a:	4b34      	ldr	r3, [pc, #208]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a60:	4b32      	ldr	r3, [pc, #200]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a66:	4b31      	ldr	r3, [pc, #196]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a6c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a74:	4b2d      	ldr	r3, [pc, #180]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a80:	4b2a      	ldr	r3, [pc, #168]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a86:	4b29      	ldr	r3, [pc, #164]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a8c:	4827      	ldr	r0, [pc, #156]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002a8e:	f000 fd49 	bl	8003524 <HAL_DMA_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 8002a98:	f7ff fef8 	bl	800288c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a23      	ldr	r2, [pc, #140]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002aa0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002aa2:	4a22      	ldr	r2, [pc, #136]	@ (8002b2c <HAL_SPI_MspInit+0x1e4>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002aa8:	4b22      	ldr	r3, [pc, #136]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002aaa:	4a23      	ldr	r2, [pc, #140]	@ (8002b38 <HAL_SPI_MspInit+0x1f0>)
 8002aac:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002aae:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002ab0:	2228      	movs	r2, #40	@ 0x28
 8002ab2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002ab6:	2240      	movs	r2, #64	@ 0x40
 8002ab8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ac6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002ad4:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ada:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ae0:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002ae6:	4813      	ldr	r0, [pc, #76]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002ae8:	f000 fd1c 	bl	8003524 <HAL_DMA_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_SPI_MspInit+0x1ae>
    {
      Error_Handler();
 8002af2:	f7ff fecb 	bl	800288c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002afa:	679a      	str	r2, [r3, #120]	@ 0x78
 8002afc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b34 <HAL_SPI_MspInit+0x1ec>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2100      	movs	r1, #0
 8002b06:	2024      	movs	r0, #36	@ 0x24
 8002b08:	f000 fc5f 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002b0c:	2024      	movs	r0, #36	@ 0x24
 8002b0e:	f000 fc76 	bl	80033fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b12:	bf00      	nop
 8002b14:	37e8      	adds	r7, #232	@ 0xe8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40003800 	.word	0x40003800
 8002b20:	58024400 	.word	0x58024400
 8002b24:	58020800 	.word	0x58020800
 8002b28:	58020400 	.word	0x58020400
 8002b2c:	240003ec 	.word	0x240003ec
 8002b30:	40020058 	.word	0x40020058
 8002b34:	24000464 	.word	0x24000464
 8002b38:	40020070 	.word	0x40020070

08002b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <HAL_MspInit+0x30>)
 8002b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b48:	4a08      	ldr	r2, [pc, #32]	@ (8002b6c <HAL_MspInit+0x30>)
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_MspInit+0x30>)
 8002b54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	58024400 	.word	0x58024400

08002b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <NMI_Handler+0x4>

08002b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <HardFault_Handler+0x4>

08002b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <MemManage_Handler+0x4>

08002b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <BusFault_Handler+0x4>

08002b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <UsageFault_Handler+0x4>

08002b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bc6:	f000 fae1 	bl	800318c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002bd4:	4802      	ldr	r0, [pc, #8]	@ (8002be0 <DMA1_Stream3_IRQHandler+0x10>)
 8002bd6:	f001 ffcb 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	240003ec 	.word	0x240003ec

08002be4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002be8:	4802      	ldr	r0, [pc, #8]	@ (8002bf4 <DMA1_Stream4_IRQHandler+0x10>)
 8002bea:	f001 ffc1 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	24000464 	.word	0x24000464

08002bf8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002bfc:	4802      	ldr	r0, [pc, #8]	@ (8002c08 <SPI2_IRQHandler+0x10>)
 8002bfe:	f007 fa91 	bl	800a124 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	24000364 	.word	0x24000364

08002c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return 1;
 8002c10:	2301      	movs	r3, #1
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_kill>:

int _kill(int pid, int sig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c26:	f009 fe37 	bl	800c898 <__errno>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2216      	movs	r2, #22
 8002c2e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_exit>:

void _exit (int status)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ffe7 	bl	8002c1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c4e:	bf00      	nop
 8002c50:	e7fd      	b.n	8002c4e <_exit+0x12>

08002c52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e00a      	b.n	8002c7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c64:	f3af 8000 	nop.w
 8002c68:	4601      	mov	r1, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	60ba      	str	r2, [r7, #8]
 8002c70:	b2ca      	uxtb	r2, r1
 8002c72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	dbf0      	blt.n	8002c64 <_read+0x12>
  }

  return len;
 8002c82:	687b      	ldr	r3, [r7, #4]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e009      	b.n	8002cb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	60ba      	str	r2, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	dbf1      	blt.n	8002c9e <_write+0x12>
  }
  return len;
 8002cba:	687b      	ldr	r3, [r7, #4]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <_close>:

int _close(int file)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cec:	605a      	str	r2, [r3, #4]
  return 0;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_isatty>:

int _isatty(int file)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d34:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <_sbrk+0x5c>)
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <_sbrk+0x60>)
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d40:	4b13      	ldr	r3, [pc, #76]	@ (8002d90 <_sbrk+0x64>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d48:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <_sbrk+0x64>)
 8002d4a:	4a12      	ldr	r2, [pc, #72]	@ (8002d94 <_sbrk+0x68>)
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d207      	bcs.n	8002d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d5c:	f009 fd9c 	bl	800c898 <__errno>
 8002d60:	4603      	mov	r3, r0
 8002d62:	220c      	movs	r2, #12
 8002d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d6a:	e009      	b.n	8002d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d72:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <_sbrk+0x64>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	4a05      	ldr	r2, [pc, #20]	@ (8002d90 <_sbrk+0x64>)
 8002d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	24050000 	.word	0x24050000
 8002d8c:	00000400 	.word	0x00000400
 8002d90:	240004dc 	.word	0x240004dc
 8002d94:	240006c8 	.word	0x240006c8

08002d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e98 <SystemInit+0x100>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da2:	4a3d      	ldr	r2, [pc, #244]	@ (8002e98 <SystemInit+0x100>)
 8002da4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002da8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dac:	4b3b      	ldr	r3, [pc, #236]	@ (8002e9c <SystemInit+0x104>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	2b06      	cmp	r3, #6
 8002db6:	d807      	bhi.n	8002dc8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002db8:	4b38      	ldr	r3, [pc, #224]	@ (8002e9c <SystemInit+0x104>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 030f 	bic.w	r3, r3, #15
 8002dc0:	4a36      	ldr	r2, [pc, #216]	@ (8002e9c <SystemInit+0x104>)
 8002dc2:	f043 0307 	orr.w	r3, r3, #7
 8002dc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002dc8:	4b35      	ldr	r3, [pc, #212]	@ (8002ea0 <SystemInit+0x108>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a34      	ldr	r2, [pc, #208]	@ (8002ea0 <SystemInit+0x108>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002dd4:	4b32      	ldr	r3, [pc, #200]	@ (8002ea0 <SystemInit+0x108>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002dda:	4b31      	ldr	r3, [pc, #196]	@ (8002ea0 <SystemInit+0x108>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4930      	ldr	r1, [pc, #192]	@ (8002ea0 <SystemInit+0x108>)
 8002de0:	4b30      	ldr	r3, [pc, #192]	@ (8002ea4 <SystemInit+0x10c>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002de6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <SystemInit+0x104>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002df2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e9c <SystemInit+0x104>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 030f 	bic.w	r3, r3, #15
 8002dfa:	4a28      	ldr	r2, [pc, #160]	@ (8002e9c <SystemInit+0x104>)
 8002dfc:	f043 0307 	orr.w	r3, r3, #7
 8002e00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e02:	4b27      	ldr	r3, [pc, #156]	@ (8002ea0 <SystemInit+0x108>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e08:	4b25      	ldr	r3, [pc, #148]	@ (8002ea0 <SystemInit+0x108>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ea0 <SystemInit+0x108>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e14:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <SystemInit+0x108>)
 8002e16:	4a24      	ldr	r2, [pc, #144]	@ (8002ea8 <SystemInit+0x110>)
 8002e18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ea0 <SystemInit+0x108>)
 8002e1c:	4a23      	ldr	r2, [pc, #140]	@ (8002eac <SystemInit+0x114>)
 8002e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea0 <SystemInit+0x108>)
 8002e22:	4a23      	ldr	r2, [pc, #140]	@ (8002eb0 <SystemInit+0x118>)
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <SystemInit+0x108>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea0 <SystemInit+0x108>)
 8002e2e:	4a20      	ldr	r2, [pc, #128]	@ (8002eb0 <SystemInit+0x118>)
 8002e30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <SystemInit+0x108>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e38:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <SystemInit+0x108>)
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb0 <SystemInit+0x118>)
 8002e3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ea0 <SystemInit+0x108>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e44:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <SystemInit+0x108>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a15      	ldr	r2, [pc, #84]	@ (8002ea0 <SystemInit+0x108>)
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <SystemInit+0x108>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002e56:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <SystemInit+0x108>)
 8002e58:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d113      	bne.n	8002e8c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002e64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <SystemInit+0x108>)
 8002e66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <SystemInit+0x108>)
 8002e6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e70:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e74:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <SystemInit+0x11c>)
 8002e76:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002e7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <SystemInit+0x108>)
 8002e7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002e82:	4a07      	ldr	r2, [pc, #28]	@ (8002ea0 <SystemInit+0x108>)
 8002e84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e88:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00
 8002e9c:	52002000 	.word	0x52002000
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ea8:	02020200 	.word	0x02020200
 8002eac:	01ff0000 	.word	0x01ff0000
 8002eb0:	01010280 	.word	0x01010280
 8002eb4:	52004000 	.word	0x52004000

08002eb8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002ebc:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <ExitRun0Mode+0x2c>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4a08      	ldr	r2, [pc, #32]	@ (8002ee4 <ExitRun0Mode+0x2c>)
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002ec8:	bf00      	nop
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <ExitRun0Mode+0x2c>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f9      	beq.n	8002eca <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	58024800 	.word	0x58024800

08002ee8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002eec:	4b22      	ldr	r3, [pc, #136]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002eee:	4a23      	ldr	r2, [pc, #140]	@ (8002f7c <MX_USART6_UART_Init+0x94>)
 8002ef0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002ef2:	4b21      	ldr	r3, [pc, #132]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ef8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002efa:	4b1f      	ldr	r3, [pc, #124]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f0e:	220c      	movs	r2, #12
 8002f10:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f12:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f18:	4b17      	ldr	r3, [pc, #92]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f1e:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f24:	4b14      	ldr	r3, [pc, #80]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f2a:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f30:	4811      	ldr	r0, [pc, #68]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f32:	f007 fc80 	bl	800a836 <HAL_UART_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002f3c:	f7ff fca6 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f40:	2100      	movs	r1, #0
 8002f42:	480d      	ldr	r0, [pc, #52]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f44:	f008 fe1b 	bl	800bb7e <HAL_UARTEx_SetTxFifoThreshold>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002f4e:	f7ff fc9d 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f52:	2100      	movs	r1, #0
 8002f54:	4808      	ldr	r0, [pc, #32]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f56:	f008 fe50 	bl	800bbfa <HAL_UARTEx_SetRxFifoThreshold>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002f60:	f7ff fc94 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002f64:	4804      	ldr	r0, [pc, #16]	@ (8002f78 <MX_USART6_UART_Init+0x90>)
 8002f66:	f008 fdd1 	bl	800bb0c <HAL_UARTEx_DisableFifoMode>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002f70:	f7ff fc8c 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	240004e0 	.word	0x240004e0
 8002f7c:	40011400 	.word	0x40011400

08002f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b0b8      	sub	sp, #224	@ 0xe0
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	22b8      	movs	r2, #184	@ 0xb8
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f009 fc26 	bl	800c7f2 <memset>
  if(uartHandle->Instance==USART6)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a26      	ldr	r2, [pc, #152]	@ (8003044 <HAL_UART_MspInit+0xc4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d145      	bne.n	800303c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002fb0:	f04f 0201 	mov.w	r2, #1
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fc2:	f107 0310 	add.w	r3, r7, #16
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f004 fa6c 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002fd2:	f7ff fc5b 	bl	800288c <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003048 <HAL_UART_MspInit+0xc8>)
 8002fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8003048 <HAL_UART_MspInit+0xc8>)
 8002fde:	f043 0320 	orr.w	r3, r3, #32
 8002fe2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002fe6:	4b18      	ldr	r3, [pc, #96]	@ (8003048 <HAL_UART_MspInit+0xc8>)
 8002fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff4:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <HAL_UART_MspInit+0xc8>)
 8002ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ffa:	4a13      	ldr	r2, [pc, #76]	@ (8003048 <HAL_UART_MspInit+0xc8>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003004:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_UART_MspInit+0xc8>)
 8003006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003012:	23c0      	movs	r3, #192	@ 0xc0
 8003014:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800302a:	2307      	movs	r3, #7
 800302c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003030:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003034:	4619      	mov	r1, r3
 8003036:	4805      	ldr	r0, [pc, #20]	@ (800304c <HAL_UART_MspInit+0xcc>)
 8003038:	f003 f8b8 	bl	80061ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800303c:	bf00      	nop
 800303e:	37e0      	adds	r7, #224	@ 0xe0
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40011400 	.word	0x40011400
 8003048:	58024400 	.word	0x58024400
 800304c:	58020800 	.word	0x58020800

08003050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003050:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800308c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003054:	f7ff ff30 	bl	8002eb8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003058:	f7ff fe9e 	bl	8002d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800305c:	480c      	ldr	r0, [pc, #48]	@ (8003090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800305e:	490d      	ldr	r1, [pc, #52]	@ (8003094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003060:	4a0d      	ldr	r2, [pc, #52]	@ (8003098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003064:	e002      	b.n	800306c <LoopCopyDataInit>

08003066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306a:	3304      	adds	r3, #4

0800306c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800306c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003070:	d3f9      	bcc.n	8003066 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003072:	4a0a      	ldr	r2, [pc, #40]	@ (800309c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003074:	4c0a      	ldr	r4, [pc, #40]	@ (80030a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003078:	e001      	b.n	800307e <LoopFillZerobss>

0800307a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800307c:	3204      	adds	r2, #4

0800307e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003080:	d3fb      	bcc.n	800307a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003082:	f009 fc0f 	bl	800c8a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003086:	f7ff fa55 	bl	8002534 <main>
  bx  lr
 800308a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800308c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003090:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003094:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8003098:	0800f36c 	.word	0x0800f36c
  ldr r2, =_sbss
 800309c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80030a0:	240006c4 	.word	0x240006c4

080030a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a4:	e7fe      	b.n	80030a4 <ADC3_IRQHandler>
	...

080030a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ae:	2003      	movs	r0, #3
 80030b0:	f000 f980 	bl	80033b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030b4:	f004 f820 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <HAL_Init+0x68>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	4913      	ldr	r1, [pc, #76]	@ (8003114 <HAL_Init+0x6c>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
 80030d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003110 <HAL_Init+0x68>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	4a0e      	ldr	r2, [pc, #56]	@ (8003114 <HAL_Init+0x6c>)
 80030dc:	5cd3      	ldrb	r3, [r2, r3]
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003118 <HAL_Init+0x70>)
 80030ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030ec:	4a0b      	ldr	r2, [pc, #44]	@ (800311c <HAL_Init+0x74>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030f2:	200f      	movs	r0, #15
 80030f4:	f000 f814 	bl	8003120 <HAL_InitTick>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e002      	b.n	8003108 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003102:	f7ff fd1b 	bl	8002b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	58024400 	.word	0x58024400
 8003114:	0800ef70 	.word	0x0800ef70
 8003118:	2400000c 	.word	0x2400000c
 800311c:	24000008 	.word	0x24000008

08003120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003128:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <HAL_InitTick+0x60>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e021      	b.n	8003178 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003134:	4b13      	ldr	r3, [pc, #76]	@ (8003184 <HAL_InitTick+0x64>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <HAL_InitTick+0x60>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003142:	fbb3 f3f1 	udiv	r3, r3, r1
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f965 	bl	800341a <HAL_SYSTICK_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e00e      	b.n	8003178 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b0f      	cmp	r3, #15
 800315e:	d80a      	bhi.n	8003176 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003160:	2200      	movs	r2, #0
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003168:	f000 f92f 	bl	80033ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800316c:	4a06      	ldr	r2, [pc, #24]	@ (8003188 <HAL_InitTick+0x68>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	24000014 	.word	0x24000014
 8003184:	24000008 	.word	0x24000008
 8003188:	24000010 	.word	0x24000010

0800318c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003190:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <HAL_IncTick+0x20>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_IncTick+0x24>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4413      	add	r3, r2
 800319c:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <HAL_IncTick+0x24>)
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	24000014 	.word	0x24000014
 80031b0:	24000574 	.word	0x24000574

080031b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return uwTick;
 80031b8:	4b03      	ldr	r3, [pc, #12]	@ (80031c8 <HAL_GetTick+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	24000574 	.word	0x24000574

080031cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7ff ffee 	bl	80031b4 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031e4:	d005      	beq.n	80031f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_Delay+0x44>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031f2:	bf00      	nop
 80031f4:	f7ff ffde 	bl	80031b4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d8f7      	bhi.n	80031f4 <HAL_Delay+0x28>
  {
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	24000014 	.word	0x24000014

08003214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003224:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <__NVIC_SetPriorityGrouping+0x40>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003230:	4013      	ands	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 800323e:	4313      	orrs	r3, r2
 8003240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003242:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <__NVIC_SetPriorityGrouping+0x40>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	60d3      	str	r3, [r2, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00
 8003258:	05fa0000 	.word	0x05fa0000

0800325c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003260:	4b04      	ldr	r3, [pc, #16]	@ (8003274 <__NVIC_GetPriorityGrouping+0x18>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	f003 0307 	and.w	r3, r3, #7
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003286:	2b00      	cmp	r3, #0
 8003288:	db0b      	blt.n	80032a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	4907      	ldr	r1, [pc, #28]	@ (80032b0 <__NVIC_EnableIRQ+0x38>)
 8003292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2001      	movs	r0, #1
 800329a:	fa00 f202 	lsl.w	r2, r0, r2
 800329e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000e100 	.word	0xe000e100

080032b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	db0a      	blt.n	80032de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	490c      	ldr	r1, [pc, #48]	@ (8003300 <__NVIC_SetPriority+0x4c>)
 80032ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	440b      	add	r3, r1
 80032d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032dc:	e00a      	b.n	80032f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4908      	ldr	r1, [pc, #32]	@ (8003304 <__NVIC_SetPriority+0x50>)
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	3b04      	subs	r3, #4
 80032ec:	0112      	lsls	r2, r2, #4
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	440b      	add	r3, r1
 80032f2:	761a      	strb	r2, [r3, #24]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000e100 	.word	0xe000e100
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	@ 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f1c3 0307 	rsb	r3, r3, #7
 8003322:	2b04      	cmp	r3, #4
 8003324:	bf28      	it	cs
 8003326:	2304      	movcs	r3, #4
 8003328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3304      	adds	r3, #4
 800332e:	2b06      	cmp	r3, #6
 8003330:	d902      	bls.n	8003338 <NVIC_EncodePriority+0x30>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3b03      	subs	r3, #3
 8003336:	e000      	b.n	800333a <NVIC_EncodePriority+0x32>
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43da      	mvns	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	401a      	ands	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003350:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	43d9      	mvns	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	4313      	orrs	r3, r2
         );
}
 8003362:	4618      	mov	r0, r3
 8003364:	3724      	adds	r7, #36	@ 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003380:	d301      	bcc.n	8003386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003382:	2301      	movs	r3, #1
 8003384:	e00f      	b.n	80033a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003386:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <SysTick_Config+0x40>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338e:	210f      	movs	r1, #15
 8003390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003394:	f7ff ff8e 	bl	80032b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <SysTick_Config+0x40>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339e:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <SysTick_Config+0x40>)
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff29 	bl	8003214 <__NVIC_SetPriorityGrouping>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033d8:	f7ff ff40 	bl	800325c <__NVIC_GetPriorityGrouping>
 80033dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f7ff ff90 	bl	8003308 <NVIC_EncodePriority>
 80033e8:	4602      	mov	r2, r0
 80033ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff5f 	bl	80032b4 <__NVIC_SetPriority>
}
 80033f6:	bf00      	nop
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff33 	bl	8003278 <__NVIC_EnableIRQ>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ffa4 	bl	8003370 <SysTick_Config>
 8003428:	4603      	mov	r3, r0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003438:	f3bf 8f5f 	dmb	sy
}
 800343c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800343e:	4b07      	ldr	r3, [pc, #28]	@ (800345c <HAL_MPU_Disable+0x28>)
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	4a06      	ldr	r2, [pc, #24]	@ (800345c <HAL_MPU_Disable+0x28>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003448:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800344a:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <HAL_MPU_Disable+0x2c>)
 800344c:	2200      	movs	r2, #0
 800344e:	605a      	str	r2, [r3, #4]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000ed00 	.word	0xe000ed00
 8003460:	e000ed90 	.word	0xe000ed90

08003464 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800346c:	4a0b      	ldr	r2, [pc, #44]	@ (800349c <HAL_MPU_Enable+0x38>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003476:	4b0a      	ldr	r3, [pc, #40]	@ (80034a0 <HAL_MPU_Enable+0x3c>)
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	4a09      	ldr	r2, [pc, #36]	@ (80034a0 <HAL_MPU_Enable+0x3c>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003480:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003482:	f3bf 8f4f 	dsb	sy
}
 8003486:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003488:	f3bf 8f6f 	isb	sy
}
 800348c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	e000ed90 	.word	0xe000ed90
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	785a      	ldrb	r2, [r3, #1]
 80034b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <HAL_MPU_ConfigRegion+0x7c>)
 80034b2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80034b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <HAL_MPU_ConfigRegion+0x7c>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	4a19      	ldr	r2, [pc, #100]	@ (8003520 <HAL_MPU_ConfigRegion+0x7c>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80034c0:	4a17      	ldr	r2, [pc, #92]	@ (8003520 <HAL_MPU_ConfigRegion+0x7c>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7b1b      	ldrb	r3, [r3, #12]
 80034cc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7adb      	ldrb	r3, [r3, #11]
 80034d2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	7a9b      	ldrb	r3, [r3, #10]
 80034da:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80034dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7b5b      	ldrb	r3, [r3, #13]
 80034e2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	7b9b      	ldrb	r3, [r3, #14]
 80034ea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	7bdb      	ldrb	r3, [r3, #15]
 80034f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	7a5b      	ldrb	r3, [r3, #9]
 80034fa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80034fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7a1b      	ldrb	r3, [r3, #8]
 8003502:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003504:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800350c:	4a04      	ldr	r2, [pc, #16]	@ (8003520 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800350e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003510:	6113      	str	r3, [r2, #16]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000ed90 	.word	0xe000ed90

08003524 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800352c:	f7ff fe42 	bl	80031b4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e312      	b.n	8003b62 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a66      	ldr	r2, [pc, #408]	@ (80036dc <HAL_DMA_Init+0x1b8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d04a      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a65      	ldr	r2, [pc, #404]	@ (80036e0 <HAL_DMA_Init+0x1bc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d045      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a63      	ldr	r2, [pc, #396]	@ (80036e4 <HAL_DMA_Init+0x1c0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d040      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a62      	ldr	r2, [pc, #392]	@ (80036e8 <HAL_DMA_Init+0x1c4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d03b      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a60      	ldr	r2, [pc, #384]	@ (80036ec <HAL_DMA_Init+0x1c8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d036      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a5f      	ldr	r2, [pc, #380]	@ (80036f0 <HAL_DMA_Init+0x1cc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d031      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a5d      	ldr	r2, [pc, #372]	@ (80036f4 <HAL_DMA_Init+0x1d0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d02c      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a5c      	ldr	r2, [pc, #368]	@ (80036f8 <HAL_DMA_Init+0x1d4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d027      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5a      	ldr	r2, [pc, #360]	@ (80036fc <HAL_DMA_Init+0x1d8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d022      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a59      	ldr	r2, [pc, #356]	@ (8003700 <HAL_DMA_Init+0x1dc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d01d      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a57      	ldr	r2, [pc, #348]	@ (8003704 <HAL_DMA_Init+0x1e0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d018      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a56      	ldr	r2, [pc, #344]	@ (8003708 <HAL_DMA_Init+0x1e4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d013      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a54      	ldr	r2, [pc, #336]	@ (800370c <HAL_DMA_Init+0x1e8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a53      	ldr	r2, [pc, #332]	@ (8003710 <HAL_DMA_Init+0x1ec>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a51      	ldr	r2, [pc, #324]	@ (8003714 <HAL_DMA_Init+0x1f0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_DMA_Init+0xb8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a50      	ldr	r2, [pc, #320]	@ (8003718 <HAL_DMA_Init+0x1f4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_DMA_Init+0xbc>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_DMA_Init+0xbe>
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 813c 	beq.w	8003860 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a37      	ldr	r2, [pc, #220]	@ (80036dc <HAL_DMA_Init+0x1b8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d04a      	beq.n	8003698 <HAL_DMA_Init+0x174>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a36      	ldr	r2, [pc, #216]	@ (80036e0 <HAL_DMA_Init+0x1bc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d045      	beq.n	8003698 <HAL_DMA_Init+0x174>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a34      	ldr	r2, [pc, #208]	@ (80036e4 <HAL_DMA_Init+0x1c0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d040      	beq.n	8003698 <HAL_DMA_Init+0x174>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a33      	ldr	r2, [pc, #204]	@ (80036e8 <HAL_DMA_Init+0x1c4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d03b      	beq.n	8003698 <HAL_DMA_Init+0x174>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a31      	ldr	r2, [pc, #196]	@ (80036ec <HAL_DMA_Init+0x1c8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d036      	beq.n	8003698 <HAL_DMA_Init+0x174>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a30      	ldr	r2, [pc, #192]	@ (80036f0 <HAL_DMA_Init+0x1cc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d031      	beq.n	8003698 <HAL_DMA_Init+0x174>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a2e      	ldr	r2, [pc, #184]	@ (80036f4 <HAL_DMA_Init+0x1d0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d02c      	beq.n	8003698 <HAL_DMA_Init+0x174>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2d      	ldr	r2, [pc, #180]	@ (80036f8 <HAL_DMA_Init+0x1d4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d027      	beq.n	8003698 <HAL_DMA_Init+0x174>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2b      	ldr	r2, [pc, #172]	@ (80036fc <HAL_DMA_Init+0x1d8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d022      	beq.n	8003698 <HAL_DMA_Init+0x174>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2a      	ldr	r2, [pc, #168]	@ (8003700 <HAL_DMA_Init+0x1dc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d01d      	beq.n	8003698 <HAL_DMA_Init+0x174>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a28      	ldr	r2, [pc, #160]	@ (8003704 <HAL_DMA_Init+0x1e0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d018      	beq.n	8003698 <HAL_DMA_Init+0x174>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a27      	ldr	r2, [pc, #156]	@ (8003708 <HAL_DMA_Init+0x1e4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <HAL_DMA_Init+0x174>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a25      	ldr	r2, [pc, #148]	@ (800370c <HAL_DMA_Init+0x1e8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_DMA_Init+0x174>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a24      	ldr	r2, [pc, #144]	@ (8003710 <HAL_DMA_Init+0x1ec>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_DMA_Init+0x174>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a22      	ldr	r2, [pc, #136]	@ (8003714 <HAL_DMA_Init+0x1f0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_DMA_Init+0x174>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a21      	ldr	r2, [pc, #132]	@ (8003718 <HAL_DMA_Init+0x1f4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d108      	bne.n	80036aa <HAL_DMA_Init+0x186>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e007      	b.n	80036ba <HAL_DMA_Init+0x196>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036ba:	e02f      	b.n	800371c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036bc:	f7ff fd7a 	bl	80031b4 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	d928      	bls.n	800371c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2203      	movs	r2, #3
 80036d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e242      	b.n	8003b62 <HAL_DMA_Init+0x63e>
 80036dc:	40020010 	.word	0x40020010
 80036e0:	40020028 	.word	0x40020028
 80036e4:	40020040 	.word	0x40020040
 80036e8:	40020058 	.word	0x40020058
 80036ec:	40020070 	.word	0x40020070
 80036f0:	40020088 	.word	0x40020088
 80036f4:	400200a0 	.word	0x400200a0
 80036f8:	400200b8 	.word	0x400200b8
 80036fc:	40020410 	.word	0x40020410
 8003700:	40020428 	.word	0x40020428
 8003704:	40020440 	.word	0x40020440
 8003708:	40020458 	.word	0x40020458
 800370c:	40020470 	.word	0x40020470
 8003710:	40020488 	.word	0x40020488
 8003714:	400204a0 	.word	0x400204a0
 8003718:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1c8      	bne.n	80036bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4b83      	ldr	r3, [pc, #524]	@ (8003944 <HAL_DMA_Init+0x420>)
 8003736:	4013      	ands	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003742:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	2b04      	cmp	r3, #4
 800376e:	d107      	bne.n	8003780 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003778:	4313      	orrs	r3, r2
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b28      	cmp	r3, #40	@ 0x28
 8003786:	d903      	bls.n	8003790 <HAL_DMA_Init+0x26c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b2e      	cmp	r3, #46	@ 0x2e
 800378e:	d91f      	bls.n	80037d0 <HAL_DMA_Init+0x2ac>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b3e      	cmp	r3, #62	@ 0x3e
 8003796:	d903      	bls.n	80037a0 <HAL_DMA_Init+0x27c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b42      	cmp	r3, #66	@ 0x42
 800379e:	d917      	bls.n	80037d0 <HAL_DMA_Init+0x2ac>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b46      	cmp	r3, #70	@ 0x46
 80037a6:	d903      	bls.n	80037b0 <HAL_DMA_Init+0x28c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b48      	cmp	r3, #72	@ 0x48
 80037ae:	d90f      	bls.n	80037d0 <HAL_DMA_Init+0x2ac>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80037b6:	d903      	bls.n	80037c0 <HAL_DMA_Init+0x29c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b52      	cmp	r3, #82	@ 0x52
 80037be:	d907      	bls.n	80037d0 <HAL_DMA_Init+0x2ac>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b73      	cmp	r3, #115	@ 0x73
 80037c6:	d905      	bls.n	80037d4 <HAL_DMA_Init+0x2b0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b77      	cmp	r3, #119	@ 0x77
 80037ce:	d801      	bhi.n	80037d4 <HAL_DMA_Init+0x2b0>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_DMA_Init+0x2b2>
 80037d4:	2300      	movs	r3, #0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f023 0307 	bic.w	r3, r3, #7
 80037f8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	2b04      	cmp	r3, #4
 800380a:	d117      	bne.n	800383c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00e      	beq.n	800383c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f002 fb3a 	bl	8005e98 <DMA_CheckFifoParam>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2240      	movs	r2, #64	@ 0x40
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e192      	b.n	8003b62 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f002 fa75 	bl	8005d34 <DMA_CalcBaseAndBitshift>
 800384a:	4603      	mov	r3, r0
 800384c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	223f      	movs	r2, #63	@ 0x3f
 8003858:	409a      	lsls	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	e0c8      	b.n	80039f2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a38      	ldr	r2, [pc, #224]	@ (8003948 <HAL_DMA_Init+0x424>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d022      	beq.n	80038b0 <HAL_DMA_Init+0x38c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a37      	ldr	r2, [pc, #220]	@ (800394c <HAL_DMA_Init+0x428>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d01d      	beq.n	80038b0 <HAL_DMA_Init+0x38c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a35      	ldr	r2, [pc, #212]	@ (8003950 <HAL_DMA_Init+0x42c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d018      	beq.n	80038b0 <HAL_DMA_Init+0x38c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a34      	ldr	r2, [pc, #208]	@ (8003954 <HAL_DMA_Init+0x430>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <HAL_DMA_Init+0x38c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a32      	ldr	r2, [pc, #200]	@ (8003958 <HAL_DMA_Init+0x434>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00e      	beq.n	80038b0 <HAL_DMA_Init+0x38c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a31      	ldr	r2, [pc, #196]	@ (800395c <HAL_DMA_Init+0x438>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d009      	beq.n	80038b0 <HAL_DMA_Init+0x38c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003960 <HAL_DMA_Init+0x43c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_DMA_Init+0x38c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003964 <HAL_DMA_Init+0x440>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_DMA_Init+0x390>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_DMA_Init+0x392>
 80038b4:	2300      	movs	r3, #0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8092 	beq.w	80039e0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a21      	ldr	r2, [pc, #132]	@ (8003948 <HAL_DMA_Init+0x424>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d021      	beq.n	800390a <HAL_DMA_Init+0x3e6>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a20      	ldr	r2, [pc, #128]	@ (800394c <HAL_DMA_Init+0x428>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d01c      	beq.n	800390a <HAL_DMA_Init+0x3e6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003950 <HAL_DMA_Init+0x42c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d017      	beq.n	800390a <HAL_DMA_Init+0x3e6>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <HAL_DMA_Init+0x430>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d012      	beq.n	800390a <HAL_DMA_Init+0x3e6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003958 <HAL_DMA_Init+0x434>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00d      	beq.n	800390a <HAL_DMA_Init+0x3e6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1a      	ldr	r2, [pc, #104]	@ (800395c <HAL_DMA_Init+0x438>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d008      	beq.n	800390a <HAL_DMA_Init+0x3e6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a18      	ldr	r2, [pc, #96]	@ (8003960 <HAL_DMA_Init+0x43c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <HAL_DMA_Init+0x3e6>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a17      	ldr	r2, [pc, #92]	@ (8003964 <HAL_DMA_Init+0x440>)
 8003908:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4b10      	ldr	r3, [pc, #64]	@ (8003968 <HAL_DMA_Init+0x444>)
 8003926:	4013      	ands	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b40      	cmp	r3, #64	@ 0x40
 8003930:	d01c      	beq.n	800396c <HAL_DMA_Init+0x448>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b80      	cmp	r3, #128	@ 0x80
 8003938:	d102      	bne.n	8003940 <HAL_DMA_Init+0x41c>
 800393a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800393e:	e016      	b.n	800396e <HAL_DMA_Init+0x44a>
 8003940:	2300      	movs	r3, #0
 8003942:	e014      	b.n	800396e <HAL_DMA_Init+0x44a>
 8003944:	fe10803f 	.word	0xfe10803f
 8003948:	58025408 	.word	0x58025408
 800394c:	5802541c 	.word	0x5802541c
 8003950:	58025430 	.word	0x58025430
 8003954:	58025444 	.word	0x58025444
 8003958:	58025458 	.word	0x58025458
 800395c:	5802546c 	.word	0x5802546c
 8003960:	58025480 	.word	0x58025480
 8003964:	58025494 	.word	0x58025494
 8003968:	fffe000f 	.word	0xfffe000f
 800396c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68d2      	ldr	r2, [r2, #12]
 8003972:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800397c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003984:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800398c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800399c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b6e      	ldr	r3, [pc, #440]	@ (8003b6c <HAL_DMA_Init+0x648>)
 80039b4:	4413      	add	r3, r2
 80039b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003b70 <HAL_DMA_Init+0x64c>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f002 f9b5 	bl	8005d34 <DMA_CalcBaseAndBitshift>
 80039ca:	4603      	mov	r3, r0
 80039cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2201      	movs	r2, #1
 80039d8:	409a      	lsls	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	e008      	b.n	80039f2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2240      	movs	r2, #64	@ 0x40
 80039e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2203      	movs	r2, #3
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0b7      	b.n	8003b62 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003b74 <HAL_DMA_Init+0x650>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d072      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5d      	ldr	r2, [pc, #372]	@ (8003b78 <HAL_DMA_Init+0x654>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d06d      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b7c <HAL_DMA_Init+0x658>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d068      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5a      	ldr	r2, [pc, #360]	@ (8003b80 <HAL_DMA_Init+0x65c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d063      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a59      	ldr	r2, [pc, #356]	@ (8003b84 <HAL_DMA_Init+0x660>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d05e      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a57      	ldr	r2, [pc, #348]	@ (8003b88 <HAL_DMA_Init+0x664>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d059      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a56      	ldr	r2, [pc, #344]	@ (8003b8c <HAL_DMA_Init+0x668>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d054      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a54      	ldr	r2, [pc, #336]	@ (8003b90 <HAL_DMA_Init+0x66c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d04f      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a53      	ldr	r2, [pc, #332]	@ (8003b94 <HAL_DMA_Init+0x670>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d04a      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a51      	ldr	r2, [pc, #324]	@ (8003b98 <HAL_DMA_Init+0x674>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d045      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a50      	ldr	r2, [pc, #320]	@ (8003b9c <HAL_DMA_Init+0x678>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d040      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba0 <HAL_DMA_Init+0x67c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d03b      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ba4 <HAL_DMA_Init+0x680>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d036      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a4b      	ldr	r2, [pc, #300]	@ (8003ba8 <HAL_DMA_Init+0x684>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d031      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a4a      	ldr	r2, [pc, #296]	@ (8003bac <HAL_DMA_Init+0x688>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d02c      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a48      	ldr	r2, [pc, #288]	@ (8003bb0 <HAL_DMA_Init+0x68c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d027      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a47      	ldr	r2, [pc, #284]	@ (8003bb4 <HAL_DMA_Init+0x690>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a45      	ldr	r2, [pc, #276]	@ (8003bb8 <HAL_DMA_Init+0x694>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01d      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a44      	ldr	r2, [pc, #272]	@ (8003bbc <HAL_DMA_Init+0x698>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a42      	ldr	r2, [pc, #264]	@ (8003bc0 <HAL_DMA_Init+0x69c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a41      	ldr	r2, [pc, #260]	@ (8003bc4 <HAL_DMA_Init+0x6a0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3f      	ldr	r2, [pc, #252]	@ (8003bc8 <HAL_DMA_Init+0x6a4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8003bcc <HAL_DMA_Init+0x6a8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_DMA_Init+0x5be>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3c      	ldr	r2, [pc, #240]	@ (8003bd0 <HAL_DMA_Init+0x6ac>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_DMA_Init+0x5c2>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_DMA_Init+0x5c4>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d032      	beq.n	8003b52 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f002 fa4f 	bl	8005f90 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b80      	cmp	r3, #128	@ 0x80
 8003af8:	d102      	bne.n	8003b00 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b14:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d010      	beq.n	8003b40 <HAL_DMA_Init+0x61c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d80c      	bhi.n	8003b40 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f002 facc 	bl	80060c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e008      	b.n	8003b52 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	a7fdabf8 	.word	0xa7fdabf8
 8003b70:	cccccccd 	.word	0xcccccccd
 8003b74:	40020010 	.word	0x40020010
 8003b78:	40020028 	.word	0x40020028
 8003b7c:	40020040 	.word	0x40020040
 8003b80:	40020058 	.word	0x40020058
 8003b84:	40020070 	.word	0x40020070
 8003b88:	40020088 	.word	0x40020088
 8003b8c:	400200a0 	.word	0x400200a0
 8003b90:	400200b8 	.word	0x400200b8
 8003b94:	40020410 	.word	0x40020410
 8003b98:	40020428 	.word	0x40020428
 8003b9c:	40020440 	.word	0x40020440
 8003ba0:	40020458 	.word	0x40020458
 8003ba4:	40020470 	.word	0x40020470
 8003ba8:	40020488 	.word	0x40020488
 8003bac:	400204a0 	.word	0x400204a0
 8003bb0:	400204b8 	.word	0x400204b8
 8003bb4:	58025408 	.word	0x58025408
 8003bb8:	5802541c 	.word	0x5802541c
 8003bbc:	58025430 	.word	0x58025430
 8003bc0:	58025444 	.word	0x58025444
 8003bc4:	58025458 	.word	0x58025458
 8003bc8:	5802546c 	.word	0x5802546c
 8003bcc:	58025480 	.word	0x58025480
 8003bd0:	58025494 	.word	0x58025494

08003bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e226      	b.n	800403e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_DMA_Start_IT+0x2a>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e21f      	b.n	800403e <HAL_DMA_Start_IT+0x46a>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	f040 820a 	bne.w	8004028 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a68      	ldr	r2, [pc, #416]	@ (8003dc8 <HAL_DMA_Start_IT+0x1f4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d04a      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a66      	ldr	r2, [pc, #408]	@ (8003dcc <HAL_DMA_Start_IT+0x1f8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d045      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a65      	ldr	r2, [pc, #404]	@ (8003dd0 <HAL_DMA_Start_IT+0x1fc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d040      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a63      	ldr	r2, [pc, #396]	@ (8003dd4 <HAL_DMA_Start_IT+0x200>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d03b      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a62      	ldr	r2, [pc, #392]	@ (8003dd8 <HAL_DMA_Start_IT+0x204>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d036      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a60      	ldr	r2, [pc, #384]	@ (8003ddc <HAL_DMA_Start_IT+0x208>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d031      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a5f      	ldr	r2, [pc, #380]	@ (8003de0 <HAL_DMA_Start_IT+0x20c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d02c      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5d      	ldr	r2, [pc, #372]	@ (8003de4 <HAL_DMA_Start_IT+0x210>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d027      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a5c      	ldr	r2, [pc, #368]	@ (8003de8 <HAL_DMA_Start_IT+0x214>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a5a      	ldr	r2, [pc, #360]	@ (8003dec <HAL_DMA_Start_IT+0x218>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01d      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a59      	ldr	r2, [pc, #356]	@ (8003df0 <HAL_DMA_Start_IT+0x21c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d018      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a57      	ldr	r2, [pc, #348]	@ (8003df4 <HAL_DMA_Start_IT+0x220>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a56      	ldr	r2, [pc, #344]	@ (8003df8 <HAL_DMA_Start_IT+0x224>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a54      	ldr	r2, [pc, #336]	@ (8003dfc <HAL_DMA_Start_IT+0x228>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d009      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a53      	ldr	r2, [pc, #332]	@ (8003e00 <HAL_DMA_Start_IT+0x22c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_DMA_Start_IT+0xee>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a51      	ldr	r2, [pc, #324]	@ (8003e04 <HAL_DMA_Start_IT+0x230>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <HAL_DMA_Start_IT+0x100>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e007      	b.n	8003ce4 <HAL_DMA_Start_IT+0x110>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0201 	bic.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f001 fe76 	bl	80059dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a34      	ldr	r2, [pc, #208]	@ (8003dc8 <HAL_DMA_Start_IT+0x1f4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d04a      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a33      	ldr	r2, [pc, #204]	@ (8003dcc <HAL_DMA_Start_IT+0x1f8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d045      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a31      	ldr	r2, [pc, #196]	@ (8003dd0 <HAL_DMA_Start_IT+0x1fc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d040      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a30      	ldr	r2, [pc, #192]	@ (8003dd4 <HAL_DMA_Start_IT+0x200>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d03b      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003dd8 <HAL_DMA_Start_IT+0x204>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d036      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2d      	ldr	r2, [pc, #180]	@ (8003ddc <HAL_DMA_Start_IT+0x208>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d031      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2b      	ldr	r2, [pc, #172]	@ (8003de0 <HAL_DMA_Start_IT+0x20c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02c      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003de4 <HAL_DMA_Start_IT+0x210>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d027      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a28      	ldr	r2, [pc, #160]	@ (8003de8 <HAL_DMA_Start_IT+0x214>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d022      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a27      	ldr	r2, [pc, #156]	@ (8003dec <HAL_DMA_Start_IT+0x218>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d01d      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a25      	ldr	r2, [pc, #148]	@ (8003df0 <HAL_DMA_Start_IT+0x21c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d018      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a24      	ldr	r2, [pc, #144]	@ (8003df4 <HAL_DMA_Start_IT+0x220>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	@ (8003df8 <HAL_DMA_Start_IT+0x224>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00e      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a21      	ldr	r2, [pc, #132]	@ (8003dfc <HAL_DMA_Start_IT+0x228>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d009      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1f      	ldr	r2, [pc, #124]	@ (8003e00 <HAL_DMA_Start_IT+0x22c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <HAL_DMA_Start_IT+0x1bc>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e04 <HAL_DMA_Start_IT+0x230>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d101      	bne.n	8003d94 <HAL_DMA_Start_IT+0x1c0>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_DMA_Start_IT+0x1c2>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d036      	beq.n	8003e08 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 021e 	bic.w	r2, r3, #30
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0216 	orr.w	r2, r2, #22
 8003dac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d03e      	beq.n	8003e34 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0208 	orr.w	r2, r2, #8
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e035      	b.n	8003e34 <HAL_DMA_Start_IT+0x260>
 8003dc8:	40020010 	.word	0x40020010
 8003dcc:	40020028 	.word	0x40020028
 8003dd0:	40020040 	.word	0x40020040
 8003dd4:	40020058 	.word	0x40020058
 8003dd8:	40020070 	.word	0x40020070
 8003ddc:	40020088 	.word	0x40020088
 8003de0:	400200a0 	.word	0x400200a0
 8003de4:	400200b8 	.word	0x400200b8
 8003de8:	40020410 	.word	0x40020410
 8003dec:	40020428 	.word	0x40020428
 8003df0:	40020440 	.word	0x40020440
 8003df4:	40020458 	.word	0x40020458
 8003df8:	40020470 	.word	0x40020470
 8003dfc:	40020488 	.word	0x40020488
 8003e00:	400204a0 	.word	0x400204a0
 8003e04:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 020e 	bic.w	r2, r3, #14
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 020a 	orr.w	r2, r2, #10
 8003e1a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0204 	orr.w	r2, r2, #4
 8003e32:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a83      	ldr	r2, [pc, #524]	@ (8004048 <HAL_DMA_Start_IT+0x474>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d072      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a82      	ldr	r2, [pc, #520]	@ (800404c <HAL_DMA_Start_IT+0x478>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d06d      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a80      	ldr	r2, [pc, #512]	@ (8004050 <HAL_DMA_Start_IT+0x47c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d068      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7f      	ldr	r2, [pc, #508]	@ (8004054 <HAL_DMA_Start_IT+0x480>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d063      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a7d      	ldr	r2, [pc, #500]	@ (8004058 <HAL_DMA_Start_IT+0x484>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d05e      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7c      	ldr	r2, [pc, #496]	@ (800405c <HAL_DMA_Start_IT+0x488>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d059      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a7a      	ldr	r2, [pc, #488]	@ (8004060 <HAL_DMA_Start_IT+0x48c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d054      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a79      	ldr	r2, [pc, #484]	@ (8004064 <HAL_DMA_Start_IT+0x490>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d04f      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a77      	ldr	r2, [pc, #476]	@ (8004068 <HAL_DMA_Start_IT+0x494>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d04a      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a76      	ldr	r2, [pc, #472]	@ (800406c <HAL_DMA_Start_IT+0x498>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d045      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a74      	ldr	r2, [pc, #464]	@ (8004070 <HAL_DMA_Start_IT+0x49c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d040      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a73      	ldr	r2, [pc, #460]	@ (8004074 <HAL_DMA_Start_IT+0x4a0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d03b      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a71      	ldr	r2, [pc, #452]	@ (8004078 <HAL_DMA_Start_IT+0x4a4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d036      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a70      	ldr	r2, [pc, #448]	@ (800407c <HAL_DMA_Start_IT+0x4a8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d031      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8004080 <HAL_DMA_Start_IT+0x4ac>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d02c      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6d      	ldr	r2, [pc, #436]	@ (8004084 <HAL_DMA_Start_IT+0x4b0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d027      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a6b      	ldr	r2, [pc, #428]	@ (8004088 <HAL_DMA_Start_IT+0x4b4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d022      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6a      	ldr	r2, [pc, #424]	@ (800408c <HAL_DMA_Start_IT+0x4b8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d01d      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	@ (8004090 <HAL_DMA_Start_IT+0x4bc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d018      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a67      	ldr	r2, [pc, #412]	@ (8004094 <HAL_DMA_Start_IT+0x4c0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d013      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a65      	ldr	r2, [pc, #404]	@ (8004098 <HAL_DMA_Start_IT+0x4c4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00e      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a64      	ldr	r2, [pc, #400]	@ (800409c <HAL_DMA_Start_IT+0x4c8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a62      	ldr	r2, [pc, #392]	@ (80040a0 <HAL_DMA_Start_IT+0x4cc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_DMA_Start_IT+0x350>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a61      	ldr	r2, [pc, #388]	@ (80040a4 <HAL_DMA_Start_IT+0x4d0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_DMA_Start_IT+0x354>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <HAL_DMA_Start_IT+0x356>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d01a      	beq.n	8003f64 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f4a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f62:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a37      	ldr	r2, [pc, #220]	@ (8004048 <HAL_DMA_Start_IT+0x474>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d04a      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a36      	ldr	r2, [pc, #216]	@ (800404c <HAL_DMA_Start_IT+0x478>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d045      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a34      	ldr	r2, [pc, #208]	@ (8004050 <HAL_DMA_Start_IT+0x47c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d040      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a33      	ldr	r2, [pc, #204]	@ (8004054 <HAL_DMA_Start_IT+0x480>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d03b      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a31      	ldr	r2, [pc, #196]	@ (8004058 <HAL_DMA_Start_IT+0x484>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d036      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a30      	ldr	r2, [pc, #192]	@ (800405c <HAL_DMA_Start_IT+0x488>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d031      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8004060 <HAL_DMA_Start_IT+0x48c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d02c      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2d      	ldr	r2, [pc, #180]	@ (8004064 <HAL_DMA_Start_IT+0x490>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d027      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004068 <HAL_DMA_Start_IT+0x494>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800406c <HAL_DMA_Start_IT+0x498>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d01d      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a28      	ldr	r2, [pc, #160]	@ (8004070 <HAL_DMA_Start_IT+0x49c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d018      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a27      	ldr	r2, [pc, #156]	@ (8004074 <HAL_DMA_Start_IT+0x4a0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a25      	ldr	r2, [pc, #148]	@ (8004078 <HAL_DMA_Start_IT+0x4a4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00e      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a24      	ldr	r2, [pc, #144]	@ (800407c <HAL_DMA_Start_IT+0x4a8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d009      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a22      	ldr	r2, [pc, #136]	@ (8004080 <HAL_DMA_Start_IT+0x4ac>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_DMA_Start_IT+0x430>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	@ (8004084 <HAL_DMA_Start_IT+0x4b0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d108      	bne.n	8004016 <HAL_DMA_Start_IT+0x442>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	e012      	b.n	800403c <HAL_DMA_Start_IT+0x468>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e009      	b.n	800403c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800402e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800403c:	7dfb      	ldrb	r3, [r7, #23]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
 8004088:	58025408 	.word	0x58025408
 800408c:	5802541c 	.word	0x5802541c
 8004090:	58025430 	.word	0x58025430
 8004094:	58025444 	.word	0x58025444
 8004098:	58025458 	.word	0x58025458
 800409c:	5802546c 	.word	0x5802546c
 80040a0:	58025480 	.word	0x58025480
 80040a4:	58025494 	.word	0x58025494

080040a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7ff f880 	bl	80031b4 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e2dc      	b.n	800467a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d008      	beq.n	80040de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2280      	movs	r2, #128	@ 0x80
 80040d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e2cd      	b.n	800467a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a76      	ldr	r2, [pc, #472]	@ (80042bc <HAL_DMA_Abort+0x214>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d04a      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a74      	ldr	r2, [pc, #464]	@ (80042c0 <HAL_DMA_Abort+0x218>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d045      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a73      	ldr	r2, [pc, #460]	@ (80042c4 <HAL_DMA_Abort+0x21c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d040      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a71      	ldr	r2, [pc, #452]	@ (80042c8 <HAL_DMA_Abort+0x220>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d03b      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a70      	ldr	r2, [pc, #448]	@ (80042cc <HAL_DMA_Abort+0x224>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d036      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a6e      	ldr	r2, [pc, #440]	@ (80042d0 <HAL_DMA_Abort+0x228>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d031      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6d      	ldr	r2, [pc, #436]	@ (80042d4 <HAL_DMA_Abort+0x22c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d02c      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a6b      	ldr	r2, [pc, #428]	@ (80042d8 <HAL_DMA_Abort+0x230>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d027      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a6a      	ldr	r2, [pc, #424]	@ (80042dc <HAL_DMA_Abort+0x234>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d022      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a68      	ldr	r2, [pc, #416]	@ (80042e0 <HAL_DMA_Abort+0x238>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01d      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a67      	ldr	r2, [pc, #412]	@ (80042e4 <HAL_DMA_Abort+0x23c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d018      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a65      	ldr	r2, [pc, #404]	@ (80042e8 <HAL_DMA_Abort+0x240>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a64      	ldr	r2, [pc, #400]	@ (80042ec <HAL_DMA_Abort+0x244>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00e      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a62      	ldr	r2, [pc, #392]	@ (80042f0 <HAL_DMA_Abort+0x248>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a61      	ldr	r2, [pc, #388]	@ (80042f4 <HAL_DMA_Abort+0x24c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_DMA_Abort+0xd6>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5f      	ldr	r2, [pc, #380]	@ (80042f8 <HAL_DMA_Abort+0x250>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_DMA_Abort+0xda>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_DMA_Abort+0xdc>
 8004182:	2300      	movs	r3, #0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 021e 	bic.w	r2, r2, #30
 8004196:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	e00a      	b.n	80041c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 020e 	bic.w	r2, r2, #14
 80041be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3c      	ldr	r2, [pc, #240]	@ (80042bc <HAL_DMA_Abort+0x214>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d072      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3a      	ldr	r2, [pc, #232]	@ (80042c0 <HAL_DMA_Abort+0x218>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d06d      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a39      	ldr	r2, [pc, #228]	@ (80042c4 <HAL_DMA_Abort+0x21c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d068      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a37      	ldr	r2, [pc, #220]	@ (80042c8 <HAL_DMA_Abort+0x220>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d063      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a36      	ldr	r2, [pc, #216]	@ (80042cc <HAL_DMA_Abort+0x224>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d05e      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a34      	ldr	r2, [pc, #208]	@ (80042d0 <HAL_DMA_Abort+0x228>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d059      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a33      	ldr	r2, [pc, #204]	@ (80042d4 <HAL_DMA_Abort+0x22c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d054      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a31      	ldr	r2, [pc, #196]	@ (80042d8 <HAL_DMA_Abort+0x230>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d04f      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a30      	ldr	r2, [pc, #192]	@ (80042dc <HAL_DMA_Abort+0x234>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d04a      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2e      	ldr	r2, [pc, #184]	@ (80042e0 <HAL_DMA_Abort+0x238>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d045      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2d      	ldr	r2, [pc, #180]	@ (80042e4 <HAL_DMA_Abort+0x23c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d040      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2b      	ldr	r2, [pc, #172]	@ (80042e8 <HAL_DMA_Abort+0x240>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d03b      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2a      	ldr	r2, [pc, #168]	@ (80042ec <HAL_DMA_Abort+0x244>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d036      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a28      	ldr	r2, [pc, #160]	@ (80042f0 <HAL_DMA_Abort+0x248>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d031      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a27      	ldr	r2, [pc, #156]	@ (80042f4 <HAL_DMA_Abort+0x24c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d02c      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a25      	ldr	r2, [pc, #148]	@ (80042f8 <HAL_DMA_Abort+0x250>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d027      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a24      	ldr	r2, [pc, #144]	@ (80042fc <HAL_DMA_Abort+0x254>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d022      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <HAL_DMA_Abort+0x258>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01d      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <HAL_DMA_Abort+0x25c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d018      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1f      	ldr	r2, [pc, #124]	@ (8004308 <HAL_DMA_Abort+0x260>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <HAL_DMA_Abort+0x264>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1c      	ldr	r2, [pc, #112]	@ (8004310 <HAL_DMA_Abort+0x268>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004314 <HAL_DMA_Abort+0x26c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_DMA_Abort+0x20e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a19      	ldr	r2, [pc, #100]	@ (8004318 <HAL_DMA_Abort+0x270>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d132      	bne.n	800431c <HAL_DMA_Abort+0x274>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e031      	b.n	800431e <HAL_DMA_Abort+0x276>
 80042ba:	bf00      	nop
 80042bc:	40020010 	.word	0x40020010
 80042c0:	40020028 	.word	0x40020028
 80042c4:	40020040 	.word	0x40020040
 80042c8:	40020058 	.word	0x40020058
 80042cc:	40020070 	.word	0x40020070
 80042d0:	40020088 	.word	0x40020088
 80042d4:	400200a0 	.word	0x400200a0
 80042d8:	400200b8 	.word	0x400200b8
 80042dc:	40020410 	.word	0x40020410
 80042e0:	40020428 	.word	0x40020428
 80042e4:	40020440 	.word	0x40020440
 80042e8:	40020458 	.word	0x40020458
 80042ec:	40020470 	.word	0x40020470
 80042f0:	40020488 	.word	0x40020488
 80042f4:	400204a0 	.word	0x400204a0
 80042f8:	400204b8 	.word	0x400204b8
 80042fc:	58025408 	.word	0x58025408
 8004300:	5802541c 	.word	0x5802541c
 8004304:	58025430 	.word	0x58025430
 8004308:	58025444 	.word	0x58025444
 800430c:	58025458 	.word	0x58025458
 8004310:	5802546c 	.word	0x5802546c
 8004314:	58025480 	.word	0x58025480
 8004318:	58025494 	.word	0x58025494
 800431c:	2300      	movs	r3, #0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800432c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004330:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6d      	ldr	r2, [pc, #436]	@ (80044ec <HAL_DMA_Abort+0x444>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d04a      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a6b      	ldr	r2, [pc, #428]	@ (80044f0 <HAL_DMA_Abort+0x448>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d045      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6a      	ldr	r2, [pc, #424]	@ (80044f4 <HAL_DMA_Abort+0x44c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d040      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a68      	ldr	r2, [pc, #416]	@ (80044f8 <HAL_DMA_Abort+0x450>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d03b      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a67      	ldr	r2, [pc, #412]	@ (80044fc <HAL_DMA_Abort+0x454>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d036      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a65      	ldr	r2, [pc, #404]	@ (8004500 <HAL_DMA_Abort+0x458>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d031      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a64      	ldr	r2, [pc, #400]	@ (8004504 <HAL_DMA_Abort+0x45c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d02c      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a62      	ldr	r2, [pc, #392]	@ (8004508 <HAL_DMA_Abort+0x460>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d027      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a61      	ldr	r2, [pc, #388]	@ (800450c <HAL_DMA_Abort+0x464>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a5f      	ldr	r2, [pc, #380]	@ (8004510 <HAL_DMA_Abort+0x468>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d01d      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a5e      	ldr	r2, [pc, #376]	@ (8004514 <HAL_DMA_Abort+0x46c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d018      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a5c      	ldr	r2, [pc, #368]	@ (8004518 <HAL_DMA_Abort+0x470>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a5b      	ldr	r2, [pc, #364]	@ (800451c <HAL_DMA_Abort+0x474>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a59      	ldr	r2, [pc, #356]	@ (8004520 <HAL_DMA_Abort+0x478>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a58      	ldr	r2, [pc, #352]	@ (8004524 <HAL_DMA_Abort+0x47c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_DMA_Abort+0x32a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a56      	ldr	r2, [pc, #344]	@ (8004528 <HAL_DMA_Abort+0x480>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <HAL_DMA_Abort+0x33c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	e007      	b.n	80043f4 <HAL_DMA_Abort+0x34c>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80043f4:	e013      	b.n	800441e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043f6:	f7fe fedd 	bl	80031b4 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b05      	cmp	r3, #5
 8004402:	d90c      	bls.n	800441e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2203      	movs	r2, #3
 800440e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e12d      	b.n	800467a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2f      	ldr	r2, [pc, #188]	@ (80044ec <HAL_DMA_Abort+0x444>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d04a      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2d      	ldr	r2, [pc, #180]	@ (80044f0 <HAL_DMA_Abort+0x448>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d045      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2c      	ldr	r2, [pc, #176]	@ (80044f4 <HAL_DMA_Abort+0x44c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d040      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2a      	ldr	r2, [pc, #168]	@ (80044f8 <HAL_DMA_Abort+0x450>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d03b      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a29      	ldr	r2, [pc, #164]	@ (80044fc <HAL_DMA_Abort+0x454>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d036      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <HAL_DMA_Abort+0x458>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d031      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a26      	ldr	r2, [pc, #152]	@ (8004504 <HAL_DMA_Abort+0x45c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d02c      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a24      	ldr	r2, [pc, #144]	@ (8004508 <HAL_DMA_Abort+0x460>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d027      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a23      	ldr	r2, [pc, #140]	@ (800450c <HAL_DMA_Abort+0x464>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d022      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a21      	ldr	r2, [pc, #132]	@ (8004510 <HAL_DMA_Abort+0x468>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01d      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a20      	ldr	r2, [pc, #128]	@ (8004514 <HAL_DMA_Abort+0x46c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d018      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1e      	ldr	r2, [pc, #120]	@ (8004518 <HAL_DMA_Abort+0x470>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1d      	ldr	r2, [pc, #116]	@ (800451c <HAL_DMA_Abort+0x474>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00e      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <HAL_DMA_Abort+0x478>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004524 <HAL_DMA_Abort+0x47c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_DMA_Abort+0x422>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a18      	ldr	r2, [pc, #96]	@ (8004528 <HAL_DMA_Abort+0x480>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <HAL_DMA_Abort+0x426>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <HAL_DMA_Abort+0x428>
 80044ce:	2300      	movs	r3, #0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d02b      	beq.n	800452c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	223f      	movs	r2, #63	@ 0x3f
 80044e4:	409a      	lsls	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	e02a      	b.n	8004542 <HAL_DMA_Abort+0x49a>
 80044ec:	40020010 	.word	0x40020010
 80044f0:	40020028 	.word	0x40020028
 80044f4:	40020040 	.word	0x40020040
 80044f8:	40020058 	.word	0x40020058
 80044fc:	40020070 	.word	0x40020070
 8004500:	40020088 	.word	0x40020088
 8004504:	400200a0 	.word	0x400200a0
 8004508:	400200b8 	.word	0x400200b8
 800450c:	40020410 	.word	0x40020410
 8004510:	40020428 	.word	0x40020428
 8004514:	40020440 	.word	0x40020440
 8004518:	40020458 	.word	0x40020458
 800451c:	40020470 	.word	0x40020470
 8004520:	40020488 	.word	0x40020488
 8004524:	400204a0 	.word	0x400204a0
 8004528:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004530:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	2201      	movs	r2, #1
 800453c:	409a      	lsls	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4f      	ldr	r2, [pc, #316]	@ (8004684 <HAL_DMA_Abort+0x5dc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d072      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a4d      	ldr	r2, [pc, #308]	@ (8004688 <HAL_DMA_Abort+0x5e0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d06d      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a4c      	ldr	r2, [pc, #304]	@ (800468c <HAL_DMA_Abort+0x5e4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d068      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a4a      	ldr	r2, [pc, #296]	@ (8004690 <HAL_DMA_Abort+0x5e8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d063      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a49      	ldr	r2, [pc, #292]	@ (8004694 <HAL_DMA_Abort+0x5ec>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d05e      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a47      	ldr	r2, [pc, #284]	@ (8004698 <HAL_DMA_Abort+0x5f0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d059      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a46      	ldr	r2, [pc, #280]	@ (800469c <HAL_DMA_Abort+0x5f4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d054      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a44      	ldr	r2, [pc, #272]	@ (80046a0 <HAL_DMA_Abort+0x5f8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d04f      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a43      	ldr	r2, [pc, #268]	@ (80046a4 <HAL_DMA_Abort+0x5fc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d04a      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a41      	ldr	r2, [pc, #260]	@ (80046a8 <HAL_DMA_Abort+0x600>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d045      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a40      	ldr	r2, [pc, #256]	@ (80046ac <HAL_DMA_Abort+0x604>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d040      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a3e      	ldr	r2, [pc, #248]	@ (80046b0 <HAL_DMA_Abort+0x608>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d03b      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a3d      	ldr	r2, [pc, #244]	@ (80046b4 <HAL_DMA_Abort+0x60c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d036      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a3b      	ldr	r2, [pc, #236]	@ (80046b8 <HAL_DMA_Abort+0x610>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d031      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a3a      	ldr	r2, [pc, #232]	@ (80046bc <HAL_DMA_Abort+0x614>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d02c      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a38      	ldr	r2, [pc, #224]	@ (80046c0 <HAL_DMA_Abort+0x618>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d027      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a37      	ldr	r2, [pc, #220]	@ (80046c4 <HAL_DMA_Abort+0x61c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d022      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a35      	ldr	r2, [pc, #212]	@ (80046c8 <HAL_DMA_Abort+0x620>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01d      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a34      	ldr	r2, [pc, #208]	@ (80046cc <HAL_DMA_Abort+0x624>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d018      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a32      	ldr	r2, [pc, #200]	@ (80046d0 <HAL_DMA_Abort+0x628>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a31      	ldr	r2, [pc, #196]	@ (80046d4 <HAL_DMA_Abort+0x62c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00e      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2f      	ldr	r2, [pc, #188]	@ (80046d8 <HAL_DMA_Abort+0x630>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2e      	ldr	r2, [pc, #184]	@ (80046dc <HAL_DMA_Abort+0x634>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_DMA_Abort+0x58a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2c      	ldr	r2, [pc, #176]	@ (80046e0 <HAL_DMA_Abort+0x638>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <HAL_DMA_Abort+0x58e>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_DMA_Abort+0x590>
 8004636:	2300      	movs	r3, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d015      	beq.n	8004668 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004644:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800465c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004666:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40020010 	.word	0x40020010
 8004688:	40020028 	.word	0x40020028
 800468c:	40020040 	.word	0x40020040
 8004690:	40020058 	.word	0x40020058
 8004694:	40020070 	.word	0x40020070
 8004698:	40020088 	.word	0x40020088
 800469c:	400200a0 	.word	0x400200a0
 80046a0:	400200b8 	.word	0x400200b8
 80046a4:	40020410 	.word	0x40020410
 80046a8:	40020428 	.word	0x40020428
 80046ac:	40020440 	.word	0x40020440
 80046b0:	40020458 	.word	0x40020458
 80046b4:	40020470 	.word	0x40020470
 80046b8:	40020488 	.word	0x40020488
 80046bc:	400204a0 	.word	0x400204a0
 80046c0:	400204b8 	.word	0x400204b8
 80046c4:	58025408 	.word	0x58025408
 80046c8:	5802541c 	.word	0x5802541c
 80046cc:	58025430 	.word	0x58025430
 80046d0:	58025444 	.word	0x58025444
 80046d4:	58025458 	.word	0x58025458
 80046d8:	5802546c 	.word	0x5802546c
 80046dc:	58025480 	.word	0x58025480
 80046e0:	58025494 	.word	0x58025494

080046e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e237      	b.n	8004b66 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d004      	beq.n	800470c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2280      	movs	r2, #128	@ 0x80
 8004706:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e22c      	b.n	8004b66 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a5c      	ldr	r2, [pc, #368]	@ (8004884 <HAL_DMA_Abort_IT+0x1a0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d04a      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a5b      	ldr	r2, [pc, #364]	@ (8004888 <HAL_DMA_Abort_IT+0x1a4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d045      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a59      	ldr	r2, [pc, #356]	@ (800488c <HAL_DMA_Abort_IT+0x1a8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d040      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a58      	ldr	r2, [pc, #352]	@ (8004890 <HAL_DMA_Abort_IT+0x1ac>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d03b      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a56      	ldr	r2, [pc, #344]	@ (8004894 <HAL_DMA_Abort_IT+0x1b0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d036      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a55      	ldr	r2, [pc, #340]	@ (8004898 <HAL_DMA_Abort_IT+0x1b4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d031      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a53      	ldr	r2, [pc, #332]	@ (800489c <HAL_DMA_Abort_IT+0x1b8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02c      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a52      	ldr	r2, [pc, #328]	@ (80048a0 <HAL_DMA_Abort_IT+0x1bc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d027      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a50      	ldr	r2, [pc, #320]	@ (80048a4 <HAL_DMA_Abort_IT+0x1c0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d022      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a4f      	ldr	r2, [pc, #316]	@ (80048a8 <HAL_DMA_Abort_IT+0x1c4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d01d      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a4d      	ldr	r2, [pc, #308]	@ (80048ac <HAL_DMA_Abort_IT+0x1c8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a4c      	ldr	r2, [pc, #304]	@ (80048b0 <HAL_DMA_Abort_IT+0x1cc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a4a      	ldr	r2, [pc, #296]	@ (80048b4 <HAL_DMA_Abort_IT+0x1d0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a49      	ldr	r2, [pc, #292]	@ (80048b8 <HAL_DMA_Abort_IT+0x1d4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a47      	ldr	r2, [pc, #284]	@ (80048bc <HAL_DMA_Abort_IT+0x1d8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_DMA_Abort_IT+0xc8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a46      	ldr	r2, [pc, #280]	@ (80048c0 <HAL_DMA_Abort_IT+0x1dc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d101      	bne.n	80047b0 <HAL_DMA_Abort_IT+0xcc>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_DMA_Abort_IT+0xce>
 80047b0:	2300      	movs	r3, #0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 8086 	beq.w	80048c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2204      	movs	r2, #4
 80047bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004884 <HAL_DMA_Abort_IT+0x1a0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d04a      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2e      	ldr	r2, [pc, #184]	@ (8004888 <HAL_DMA_Abort_IT+0x1a4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d045      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2c      	ldr	r2, [pc, #176]	@ (800488c <HAL_DMA_Abort_IT+0x1a8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d040      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004890 <HAL_DMA_Abort_IT+0x1ac>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d03b      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a29      	ldr	r2, [pc, #164]	@ (8004894 <HAL_DMA_Abort_IT+0x1b0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d036      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a28      	ldr	r2, [pc, #160]	@ (8004898 <HAL_DMA_Abort_IT+0x1b4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d031      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a26      	ldr	r2, [pc, #152]	@ (800489c <HAL_DMA_Abort_IT+0x1b8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d02c      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a25      	ldr	r2, [pc, #148]	@ (80048a0 <HAL_DMA_Abort_IT+0x1bc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d027      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a23      	ldr	r2, [pc, #140]	@ (80048a4 <HAL_DMA_Abort_IT+0x1c0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d022      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a22      	ldr	r2, [pc, #136]	@ (80048a8 <HAL_DMA_Abort_IT+0x1c4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d01d      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a20      	ldr	r2, [pc, #128]	@ (80048ac <HAL_DMA_Abort_IT+0x1c8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d018      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1f      	ldr	r2, [pc, #124]	@ (80048b0 <HAL_DMA_Abort_IT+0x1cc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d013      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1d      	ldr	r2, [pc, #116]	@ (80048b4 <HAL_DMA_Abort_IT+0x1d0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00e      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1c      	ldr	r2, [pc, #112]	@ (80048b8 <HAL_DMA_Abort_IT+0x1d4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d009      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1a      	ldr	r2, [pc, #104]	@ (80048bc <HAL_DMA_Abort_IT+0x1d8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_DMA_Abort_IT+0x17c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a19      	ldr	r2, [pc, #100]	@ (80048c0 <HAL_DMA_Abort_IT+0x1dc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d108      	bne.n	8004872 <HAL_DMA_Abort_IT+0x18e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e178      	b.n	8004b64 <HAL_DMA_Abort_IT+0x480>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	e16f      	b.n	8004b64 <HAL_DMA_Abort_IT+0x480>
 8004884:	40020010 	.word	0x40020010
 8004888:	40020028 	.word	0x40020028
 800488c:	40020040 	.word	0x40020040
 8004890:	40020058 	.word	0x40020058
 8004894:	40020070 	.word	0x40020070
 8004898:	40020088 	.word	0x40020088
 800489c:	400200a0 	.word	0x400200a0
 80048a0:	400200b8 	.word	0x400200b8
 80048a4:	40020410 	.word	0x40020410
 80048a8:	40020428 	.word	0x40020428
 80048ac:	40020440 	.word	0x40020440
 80048b0:	40020458 	.word	0x40020458
 80048b4:	40020470 	.word	0x40020470
 80048b8:	40020488 	.word	0x40020488
 80048bc:	400204a0 	.word	0x400204a0
 80048c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 020e 	bic.w	r2, r2, #14
 80048d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a6c      	ldr	r2, [pc, #432]	@ (8004a8c <HAL_DMA_Abort_IT+0x3a8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d04a      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004a90 <HAL_DMA_Abort_IT+0x3ac>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d045      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a69      	ldr	r2, [pc, #420]	@ (8004a94 <HAL_DMA_Abort_IT+0x3b0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d040      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a68      	ldr	r2, [pc, #416]	@ (8004a98 <HAL_DMA_Abort_IT+0x3b4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d03b      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a66      	ldr	r2, [pc, #408]	@ (8004a9c <HAL_DMA_Abort_IT+0x3b8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d036      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a65      	ldr	r2, [pc, #404]	@ (8004aa0 <HAL_DMA_Abort_IT+0x3bc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d031      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a63      	ldr	r2, [pc, #396]	@ (8004aa4 <HAL_DMA_Abort_IT+0x3c0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d02c      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a62      	ldr	r2, [pc, #392]	@ (8004aa8 <HAL_DMA_Abort_IT+0x3c4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d027      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a60      	ldr	r2, [pc, #384]	@ (8004aac <HAL_DMA_Abort_IT+0x3c8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d022      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5f      	ldr	r2, [pc, #380]	@ (8004ab0 <HAL_DMA_Abort_IT+0x3cc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d01d      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ab4 <HAL_DMA_Abort_IT+0x3d0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d018      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a5c      	ldr	r2, [pc, #368]	@ (8004ab8 <HAL_DMA_Abort_IT+0x3d4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a5a      	ldr	r2, [pc, #360]	@ (8004abc <HAL_DMA_Abort_IT+0x3d8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a59      	ldr	r2, [pc, #356]	@ (8004ac0 <HAL_DMA_Abort_IT+0x3dc>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a57      	ldr	r2, [pc, #348]	@ (8004ac4 <HAL_DMA_Abort_IT+0x3e0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_DMA_Abort_IT+0x290>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a56      	ldr	r2, [pc, #344]	@ (8004ac8 <HAL_DMA_Abort_IT+0x3e4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d108      	bne.n	8004986 <HAL_DMA_Abort_IT+0x2a2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0201 	bic.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e007      	b.n	8004996 <HAL_DMA_Abort_IT+0x2b2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a3c      	ldr	r2, [pc, #240]	@ (8004a8c <HAL_DMA_Abort_IT+0x3a8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d072      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a3a      	ldr	r2, [pc, #232]	@ (8004a90 <HAL_DMA_Abort_IT+0x3ac>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d06d      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a39      	ldr	r2, [pc, #228]	@ (8004a94 <HAL_DMA_Abort_IT+0x3b0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d068      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a37      	ldr	r2, [pc, #220]	@ (8004a98 <HAL_DMA_Abort_IT+0x3b4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d063      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a36      	ldr	r2, [pc, #216]	@ (8004a9c <HAL_DMA_Abort_IT+0x3b8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d05e      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a34      	ldr	r2, [pc, #208]	@ (8004aa0 <HAL_DMA_Abort_IT+0x3bc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d059      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a33      	ldr	r2, [pc, #204]	@ (8004aa4 <HAL_DMA_Abort_IT+0x3c0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d054      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a31      	ldr	r2, [pc, #196]	@ (8004aa8 <HAL_DMA_Abort_IT+0x3c4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d04f      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a30      	ldr	r2, [pc, #192]	@ (8004aac <HAL_DMA_Abort_IT+0x3c8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d04a      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ab0 <HAL_DMA_Abort_IT+0x3cc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d045      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab4 <HAL_DMA_Abort_IT+0x3d0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d040      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab8 <HAL_DMA_Abort_IT+0x3d4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d03b      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2a      	ldr	r2, [pc, #168]	@ (8004abc <HAL_DMA_Abort_IT+0x3d8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d036      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a28      	ldr	r2, [pc, #160]	@ (8004ac0 <HAL_DMA_Abort_IT+0x3dc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d031      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a27      	ldr	r2, [pc, #156]	@ (8004ac4 <HAL_DMA_Abort_IT+0x3e0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d02c      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a25      	ldr	r2, [pc, #148]	@ (8004ac8 <HAL_DMA_Abort_IT+0x3e4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d027      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a24      	ldr	r2, [pc, #144]	@ (8004acc <HAL_DMA_Abort_IT+0x3e8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d022      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a22      	ldr	r2, [pc, #136]	@ (8004ad0 <HAL_DMA_Abort_IT+0x3ec>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d01d      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a21      	ldr	r2, [pc, #132]	@ (8004ad4 <HAL_DMA_Abort_IT+0x3f0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d018      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad8 <HAL_DMA_Abort_IT+0x3f4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <HAL_DMA_Abort_IT+0x3f8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae0 <HAL_DMA_Abort_IT+0x3fc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d009      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HAL_DMA_Abort_IT+0x400>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x3a2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a19      	ldr	r2, [pc, #100]	@ (8004ae8 <HAL_DMA_Abort_IT+0x404>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d132      	bne.n	8004aec <HAL_DMA_Abort_IT+0x408>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e031      	b.n	8004aee <HAL_DMA_Abort_IT+0x40a>
 8004a8a:	bf00      	nop
 8004a8c:	40020010 	.word	0x40020010
 8004a90:	40020028 	.word	0x40020028
 8004a94:	40020040 	.word	0x40020040
 8004a98:	40020058 	.word	0x40020058
 8004a9c:	40020070 	.word	0x40020070
 8004aa0:	40020088 	.word	0x40020088
 8004aa4:	400200a0 	.word	0x400200a0
 8004aa8:	400200b8 	.word	0x400200b8
 8004aac:	40020410 	.word	0x40020410
 8004ab0:	40020428 	.word	0x40020428
 8004ab4:	40020440 	.word	0x40020440
 8004ab8:	40020458 	.word	0x40020458
 8004abc:	40020470 	.word	0x40020470
 8004ac0:	40020488 	.word	0x40020488
 8004ac4:	400204a0 	.word	0x400204a0
 8004ac8:	400204b8 	.word	0x400204b8
 8004acc:	58025408 	.word	0x58025408
 8004ad0:	5802541c 	.word	0x5802541c
 8004ad4:	58025430 	.word	0x58025430
 8004ad8:	58025444 	.word	0x58025444
 8004adc:	58025458 	.word	0x58025458
 8004ae0:	5802546c 	.word	0x5802546c
 8004ae4:	58025480 	.word	0x58025480
 8004ae8:	58025494 	.word	0x58025494
 8004aec:	2300      	movs	r3, #0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d028      	beq.n	8004b44 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b00:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b06:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	2201      	movs	r2, #1
 8004b12:	409a      	lsls	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b20:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00c      	beq.n	8004b44 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b38:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b42:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop

08004b70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	@ 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b7c:	4b67      	ldr	r3, [pc, #412]	@ (8004d1c <HAL_DMA_IRQHandler+0x1ac>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a67      	ldr	r2, [pc, #412]	@ (8004d20 <HAL_DMA_IRQHandler+0x1b0>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	0a9b      	lsrs	r3, r3, #10
 8004b88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a5f      	ldr	r2, [pc, #380]	@ (8004d24 <HAL_DMA_IRQHandler+0x1b4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d04a      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5d      	ldr	r2, [pc, #372]	@ (8004d28 <HAL_DMA_IRQHandler+0x1b8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d045      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5c      	ldr	r2, [pc, #368]	@ (8004d2c <HAL_DMA_IRQHandler+0x1bc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d040      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8004d30 <HAL_DMA_IRQHandler+0x1c0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d03b      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a59      	ldr	r2, [pc, #356]	@ (8004d34 <HAL_DMA_IRQHandler+0x1c4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d036      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a57      	ldr	r2, [pc, #348]	@ (8004d38 <HAL_DMA_IRQHandler+0x1c8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d031      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a56      	ldr	r2, [pc, #344]	@ (8004d3c <HAL_DMA_IRQHandler+0x1cc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d02c      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a54      	ldr	r2, [pc, #336]	@ (8004d40 <HAL_DMA_IRQHandler+0x1d0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d027      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a53      	ldr	r2, [pc, #332]	@ (8004d44 <HAL_DMA_IRQHandler+0x1d4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d022      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a51      	ldr	r2, [pc, #324]	@ (8004d48 <HAL_DMA_IRQHandler+0x1d8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01d      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a50      	ldr	r2, [pc, #320]	@ (8004d4c <HAL_DMA_IRQHandler+0x1dc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d018      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a4e      	ldr	r2, [pc, #312]	@ (8004d50 <HAL_DMA_IRQHandler+0x1e0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a4d      	ldr	r2, [pc, #308]	@ (8004d54 <HAL_DMA_IRQHandler+0x1e4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a4b      	ldr	r2, [pc, #300]	@ (8004d58 <HAL_DMA_IRQHandler+0x1e8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a4a      	ldr	r2, [pc, #296]	@ (8004d5c <HAL_DMA_IRQHandler+0x1ec>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xd2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a48      	ldr	r2, [pc, #288]	@ (8004d60 <HAL_DMA_IRQHandler+0x1f0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d101      	bne.n	8004c46 <HAL_DMA_IRQHandler+0xd6>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <HAL_DMA_IRQHandler+0xd8>
 8004c46:	2300      	movs	r3, #0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 842b 	beq.w	80054a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	2208      	movs	r2, #8
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a2 	beq.w	8004da8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2e      	ldr	r2, [pc, #184]	@ (8004d24 <HAL_DMA_IRQHandler+0x1b4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d04a      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2d      	ldr	r2, [pc, #180]	@ (8004d28 <HAL_DMA_IRQHandler+0x1b8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d045      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004d2c <HAL_DMA_IRQHandler+0x1bc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d040      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2a      	ldr	r2, [pc, #168]	@ (8004d30 <HAL_DMA_IRQHandler+0x1c0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d03b      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a28      	ldr	r2, [pc, #160]	@ (8004d34 <HAL_DMA_IRQHandler+0x1c4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d036      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a27      	ldr	r2, [pc, #156]	@ (8004d38 <HAL_DMA_IRQHandler+0x1c8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d031      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a25      	ldr	r2, [pc, #148]	@ (8004d3c <HAL_DMA_IRQHandler+0x1cc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d02c      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a24      	ldr	r2, [pc, #144]	@ (8004d40 <HAL_DMA_IRQHandler+0x1d0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d027      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a22      	ldr	r2, [pc, #136]	@ (8004d44 <HAL_DMA_IRQHandler+0x1d4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d022      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a21      	ldr	r2, [pc, #132]	@ (8004d48 <HAL_DMA_IRQHandler+0x1d8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d01d      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d4c <HAL_DMA_IRQHandler+0x1dc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d018      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d50 <HAL_DMA_IRQHandler+0x1e0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d54 <HAL_DMA_IRQHandler+0x1e4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00e      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1b      	ldr	r2, [pc, #108]	@ (8004d58 <HAL_DMA_IRQHandler+0x1e8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a19      	ldr	r2, [pc, #100]	@ (8004d5c <HAL_DMA_IRQHandler+0x1ec>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x194>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a18      	ldr	r2, [pc, #96]	@ (8004d60 <HAL_DMA_IRQHandler+0x1f0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d12f      	bne.n	8004d64 <HAL_DMA_IRQHandler+0x1f4>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bf14      	ite	ne
 8004d12:	2301      	movne	r3, #1
 8004d14:	2300      	moveq	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	e02e      	b.n	8004d78 <HAL_DMA_IRQHandler+0x208>
 8004d1a:	bf00      	nop
 8004d1c:	24000008 	.word	0x24000008
 8004d20:	1b4e81b5 	.word	0x1b4e81b5
 8004d24:	40020010 	.word	0x40020010
 8004d28:	40020028 	.word	0x40020028
 8004d2c:	40020040 	.word	0x40020040
 8004d30:	40020058 	.word	0x40020058
 8004d34:	40020070 	.word	0x40020070
 8004d38:	40020088 	.word	0x40020088
 8004d3c:	400200a0 	.word	0x400200a0
 8004d40:	400200b8 	.word	0x400200b8
 8004d44:	40020410 	.word	0x40020410
 8004d48:	40020428 	.word	0x40020428
 8004d4c:	40020440 	.word	0x40020440
 8004d50:	40020458 	.word	0x40020458
 8004d54:	40020470 	.word	0x40020470
 8004d58:	40020488 	.word	0x40020488
 8004d5c:	400204a0 	.word	0x400204a0
 8004d60:	400204b8 	.word	0x400204b8
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	2208      	movs	r2, #8
 8004d96:	409a      	lsls	r2, r3
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da0:	f043 0201 	orr.w	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	fa22 f303 	lsr.w	r3, r2, r3
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d06e      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a69      	ldr	r2, [pc, #420]	@ (8004f68 <HAL_DMA_IRQHandler+0x3f8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d04a      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a67      	ldr	r2, [pc, #412]	@ (8004f6c <HAL_DMA_IRQHandler+0x3fc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d045      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a66      	ldr	r2, [pc, #408]	@ (8004f70 <HAL_DMA_IRQHandler+0x400>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d040      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a64      	ldr	r2, [pc, #400]	@ (8004f74 <HAL_DMA_IRQHandler+0x404>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d03b      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a63      	ldr	r2, [pc, #396]	@ (8004f78 <HAL_DMA_IRQHandler+0x408>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d036      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a61      	ldr	r2, [pc, #388]	@ (8004f7c <HAL_DMA_IRQHandler+0x40c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d031      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a60      	ldr	r2, [pc, #384]	@ (8004f80 <HAL_DMA_IRQHandler+0x410>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d02c      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a5e      	ldr	r2, [pc, #376]	@ (8004f84 <HAL_DMA_IRQHandler+0x414>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d027      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a5d      	ldr	r2, [pc, #372]	@ (8004f88 <HAL_DMA_IRQHandler+0x418>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d022      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a5b      	ldr	r2, [pc, #364]	@ (8004f8c <HAL_DMA_IRQHandler+0x41c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01d      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a5a      	ldr	r2, [pc, #360]	@ (8004f90 <HAL_DMA_IRQHandler+0x420>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d018      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a58      	ldr	r2, [pc, #352]	@ (8004f94 <HAL_DMA_IRQHandler+0x424>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a57      	ldr	r2, [pc, #348]	@ (8004f98 <HAL_DMA_IRQHandler+0x428>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a55      	ldr	r2, [pc, #340]	@ (8004f9c <HAL_DMA_IRQHandler+0x42c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a54      	ldr	r2, [pc, #336]	@ (8004fa0 <HAL_DMA_IRQHandler+0x430>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2ee>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a52      	ldr	r2, [pc, #328]	@ (8004fa4 <HAL_DMA_IRQHandler+0x434>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d10a      	bne.n	8004e74 <HAL_DMA_IRQHandler+0x304>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf14      	ite	ne
 8004e6c:	2301      	movne	r3, #1
 8004e6e:	2300      	moveq	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	e003      	b.n	8004e7c <HAL_DMA_IRQHandler+0x30c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	2201      	movs	r2, #1
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e94:	f043 0202 	orr.w	r2, r3, #2
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	409a      	lsls	r2, r3
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 808f 	beq.w	8004fd0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f68 <HAL_DMA_IRQHandler+0x3f8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d04a      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f6c <HAL_DMA_IRQHandler+0x3fc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d045      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a29      	ldr	r2, [pc, #164]	@ (8004f70 <HAL_DMA_IRQHandler+0x400>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d040      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a27      	ldr	r2, [pc, #156]	@ (8004f74 <HAL_DMA_IRQHandler+0x404>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d03b      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a26      	ldr	r2, [pc, #152]	@ (8004f78 <HAL_DMA_IRQHandler+0x408>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d036      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a24      	ldr	r2, [pc, #144]	@ (8004f7c <HAL_DMA_IRQHandler+0x40c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d031      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a23      	ldr	r2, [pc, #140]	@ (8004f80 <HAL_DMA_IRQHandler+0x410>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d02c      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a21      	ldr	r2, [pc, #132]	@ (8004f84 <HAL_DMA_IRQHandler+0x414>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d027      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a20      	ldr	r2, [pc, #128]	@ (8004f88 <HAL_DMA_IRQHandler+0x418>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d022      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1e      	ldr	r2, [pc, #120]	@ (8004f8c <HAL_DMA_IRQHandler+0x41c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01d      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004f90 <HAL_DMA_IRQHandler+0x420>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d018      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1b      	ldr	r2, [pc, #108]	@ (8004f94 <HAL_DMA_IRQHandler+0x424>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f98 <HAL_DMA_IRQHandler+0x428>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00e      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a18      	ldr	r2, [pc, #96]	@ (8004f9c <HAL_DMA_IRQHandler+0x42c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d009      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a17      	ldr	r2, [pc, #92]	@ (8004fa0 <HAL_DMA_IRQHandler+0x430>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x3e2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a15      	ldr	r2, [pc, #84]	@ (8004fa4 <HAL_DMA_IRQHandler+0x434>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d12a      	bne.n	8004fa8 <HAL_DMA_IRQHandler+0x438>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e023      	b.n	8004fb0 <HAL_DMA_IRQHandler+0x440>
 8004f68:	40020010 	.word	0x40020010
 8004f6c:	40020028 	.word	0x40020028
 8004f70:	40020040 	.word	0x40020040
 8004f74:	40020058 	.word	0x40020058
 8004f78:	40020070 	.word	0x40020070
 8004f7c:	40020088 	.word	0x40020088
 8004f80:	400200a0 	.word	0x400200a0
 8004f84:	400200b8 	.word	0x400200b8
 8004f88:	40020410 	.word	0x40020410
 8004f8c:	40020428 	.word	0x40020428
 8004f90:	40020440 	.word	0x40020440
 8004f94:	40020458 	.word	0x40020458
 8004f98:	40020470 	.word	0x40020470
 8004f9c:	40020488 	.word	0x40020488
 8004fa0:	400204a0 	.word	0x400204a0
 8004fa4:	400204b8 	.word	0x400204b8
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00d      	beq.n	8004fd0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc8:	f043 0204 	orr.w	r2, r3, #4
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2210      	movs	r2, #16
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80a6 	beq.w	8005132 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a85      	ldr	r2, [pc, #532]	@ (8005200 <HAL_DMA_IRQHandler+0x690>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d04a      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a83      	ldr	r2, [pc, #524]	@ (8005204 <HAL_DMA_IRQHandler+0x694>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d045      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a82      	ldr	r2, [pc, #520]	@ (8005208 <HAL_DMA_IRQHandler+0x698>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d040      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a80      	ldr	r2, [pc, #512]	@ (800520c <HAL_DMA_IRQHandler+0x69c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d03b      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a7f      	ldr	r2, [pc, #508]	@ (8005210 <HAL_DMA_IRQHandler+0x6a0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d036      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7d      	ldr	r2, [pc, #500]	@ (8005214 <HAL_DMA_IRQHandler+0x6a4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d031      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a7c      	ldr	r2, [pc, #496]	@ (8005218 <HAL_DMA_IRQHandler+0x6a8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d02c      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a7a      	ldr	r2, [pc, #488]	@ (800521c <HAL_DMA_IRQHandler+0x6ac>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d027      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a79      	ldr	r2, [pc, #484]	@ (8005220 <HAL_DMA_IRQHandler+0x6b0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d022      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a77      	ldr	r2, [pc, #476]	@ (8005224 <HAL_DMA_IRQHandler+0x6b4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01d      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a76      	ldr	r2, [pc, #472]	@ (8005228 <HAL_DMA_IRQHandler+0x6b8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d018      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a74      	ldr	r2, [pc, #464]	@ (800522c <HAL_DMA_IRQHandler+0x6bc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a73      	ldr	r2, [pc, #460]	@ (8005230 <HAL_DMA_IRQHandler+0x6c0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00e      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a71      	ldr	r2, [pc, #452]	@ (8005234 <HAL_DMA_IRQHandler+0x6c4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d009      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a70      	ldr	r2, [pc, #448]	@ (8005238 <HAL_DMA_IRQHandler+0x6c8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_DMA_IRQHandler+0x516>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a6e      	ldr	r2, [pc, #440]	@ (800523c <HAL_DMA_IRQHandler+0x6cc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d10a      	bne.n	800509c <HAL_DMA_IRQHandler+0x52c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	e009      	b.n	80050b0 <HAL_DMA_IRQHandler+0x540>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bf14      	ite	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	2300      	moveq	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d03e      	beq.n	8005132 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2210      	movs	r2, #16
 80050be:	409a      	lsls	r2, r3
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d018      	beq.n	8005104 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d108      	bne.n	80050f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d024      	beq.n	8005132 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
 80050f0:	e01f      	b.n	8005132 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01b      	beq.n	8005132 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	4798      	blx	r3
 8005102:	e016      	b.n	8005132 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d107      	bne.n	8005122 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0208 	bic.w	r2, r2, #8
 8005120:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2220      	movs	r2, #32
 800513c:	409a      	lsls	r2, r3
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8110 	beq.w	8005368 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2c      	ldr	r2, [pc, #176]	@ (8005200 <HAL_DMA_IRQHandler+0x690>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d04a      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2b      	ldr	r2, [pc, #172]	@ (8005204 <HAL_DMA_IRQHandler+0x694>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d045      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a29      	ldr	r2, [pc, #164]	@ (8005208 <HAL_DMA_IRQHandler+0x698>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d040      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a28      	ldr	r2, [pc, #160]	@ (800520c <HAL_DMA_IRQHandler+0x69c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d03b      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a26      	ldr	r2, [pc, #152]	@ (8005210 <HAL_DMA_IRQHandler+0x6a0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d036      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a25      	ldr	r2, [pc, #148]	@ (8005214 <HAL_DMA_IRQHandler+0x6a4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d031      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a23      	ldr	r2, [pc, #140]	@ (8005218 <HAL_DMA_IRQHandler+0x6a8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d02c      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a22      	ldr	r2, [pc, #136]	@ (800521c <HAL_DMA_IRQHandler+0x6ac>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d027      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a20      	ldr	r2, [pc, #128]	@ (8005220 <HAL_DMA_IRQHandler+0x6b0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d022      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005224 <HAL_DMA_IRQHandler+0x6b4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d01d      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005228 <HAL_DMA_IRQHandler+0x6b8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d018      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1c      	ldr	r2, [pc, #112]	@ (800522c <HAL_DMA_IRQHandler+0x6bc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d013      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005230 <HAL_DMA_IRQHandler+0x6c0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a19      	ldr	r2, [pc, #100]	@ (8005234 <HAL_DMA_IRQHandler+0x6c4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a17      	ldr	r2, [pc, #92]	@ (8005238 <HAL_DMA_IRQHandler+0x6c8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x678>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a16      	ldr	r2, [pc, #88]	@ (800523c <HAL_DMA_IRQHandler+0x6cc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d12b      	bne.n	8005240 <HAL_DMA_IRQHandler+0x6d0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bf14      	ite	ne
 80051f6:	2301      	movne	r3, #1
 80051f8:	2300      	moveq	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	e02a      	b.n	8005254 <HAL_DMA_IRQHandler+0x6e4>
 80051fe:	bf00      	nop
 8005200:	40020010 	.word	0x40020010
 8005204:	40020028 	.word	0x40020028
 8005208:	40020040 	.word	0x40020040
 800520c:	40020058 	.word	0x40020058
 8005210:	40020070 	.word	0x40020070
 8005214:	40020088 	.word	0x40020088
 8005218:	400200a0 	.word	0x400200a0
 800521c:	400200b8 	.word	0x400200b8
 8005220:	40020410 	.word	0x40020410
 8005224:	40020428 	.word	0x40020428
 8005228:	40020440 	.word	0x40020440
 800522c:	40020458 	.word	0x40020458
 8005230:	40020470 	.word	0x40020470
 8005234:	40020488 	.word	0x40020488
 8005238:	400204a0 	.word	0x400204a0
 800523c:	400204b8 	.word	0x400204b8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	bf14      	ite	ne
 800524e:	2301      	movne	r3, #1
 8005250:	2300      	moveq	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8087 	beq.w	8005368 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	2220      	movs	r2, #32
 8005264:	409a      	lsls	r2, r3
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b04      	cmp	r3, #4
 8005274:	d139      	bne.n	80052ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0216 	bic.w	r2, r2, #22
 8005284:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695a      	ldr	r2, [r3, #20]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005294:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d103      	bne.n	80052a6 <HAL_DMA_IRQHandler+0x736>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0208 	bic.w	r2, r2, #8
 80052b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	223f      	movs	r2, #63	@ 0x3f
 80052c0:	409a      	lsls	r2, r3
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 834a 	beq.w	8005974 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
          }
          return;
 80052e8:	e344      	b.n	8005974 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d018      	beq.n	800532a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d108      	bne.n	8005318 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	2b00      	cmp	r3, #0
 800530c:	d02c      	beq.n	8005368 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
 8005316:	e027      	b.n	8005368 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531c:	2b00      	cmp	r3, #0
 800531e:	d023      	beq.n	8005368 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
 8005328:	e01e      	b.n	8005368 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10f      	bne.n	8005358 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0210 	bic.w	r2, r2, #16
 8005346:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8306 	beq.w	800597e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8088 	beq.w	8005490 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2204      	movs	r2, #4
 8005384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a7a      	ldr	r2, [pc, #488]	@ (8005578 <HAL_DMA_IRQHandler+0xa08>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d04a      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a79      	ldr	r2, [pc, #484]	@ (800557c <HAL_DMA_IRQHandler+0xa0c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d045      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a77      	ldr	r2, [pc, #476]	@ (8005580 <HAL_DMA_IRQHandler+0xa10>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d040      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a76      	ldr	r2, [pc, #472]	@ (8005584 <HAL_DMA_IRQHandler+0xa14>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d03b      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a74      	ldr	r2, [pc, #464]	@ (8005588 <HAL_DMA_IRQHandler+0xa18>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d036      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a73      	ldr	r2, [pc, #460]	@ (800558c <HAL_DMA_IRQHandler+0xa1c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d031      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a71      	ldr	r2, [pc, #452]	@ (8005590 <HAL_DMA_IRQHandler+0xa20>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d02c      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a70      	ldr	r2, [pc, #448]	@ (8005594 <HAL_DMA_IRQHandler+0xa24>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d027      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005598 <HAL_DMA_IRQHandler+0xa28>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d022      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a6d      	ldr	r2, [pc, #436]	@ (800559c <HAL_DMA_IRQHandler+0xa2c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d01d      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a6b      	ldr	r2, [pc, #428]	@ (80055a0 <HAL_DMA_IRQHandler+0xa30>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d018      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a6a      	ldr	r2, [pc, #424]	@ (80055a4 <HAL_DMA_IRQHandler+0xa34>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d013      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a68      	ldr	r2, [pc, #416]	@ (80055a8 <HAL_DMA_IRQHandler+0xa38>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00e      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a67      	ldr	r2, [pc, #412]	@ (80055ac <HAL_DMA_IRQHandler+0xa3c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a65      	ldr	r2, [pc, #404]	@ (80055b0 <HAL_DMA_IRQHandler+0xa40>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_DMA_IRQHandler+0x8b8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a64      	ldr	r2, [pc, #400]	@ (80055b4 <HAL_DMA_IRQHandler+0xa44>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d108      	bne.n	800543a <HAL_DMA_IRQHandler+0x8ca>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	e007      	b.n	800544a <HAL_DMA_IRQHandler+0x8da>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005452:	429a      	cmp	r2, r3
 8005454:	d307      	bcc.n	8005466 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f2      	bne.n	800544a <HAL_DMA_IRQHandler+0x8da>
 8005464:	e000      	b.n	8005468 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005466:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d004      	beq.n	8005480 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2203      	movs	r2, #3
 800547a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800547e:	e003      	b.n	8005488 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8272 	beq.w	800597e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
 80054a2:	e26c      	b.n	800597e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a43      	ldr	r2, [pc, #268]	@ (80055b8 <HAL_DMA_IRQHandler+0xa48>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d022      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x984>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a42      	ldr	r2, [pc, #264]	@ (80055bc <HAL_DMA_IRQHandler+0xa4c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d01d      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x984>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a40      	ldr	r2, [pc, #256]	@ (80055c0 <HAL_DMA_IRQHandler+0xa50>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d018      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x984>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a3f      	ldr	r2, [pc, #252]	@ (80055c4 <HAL_DMA_IRQHandler+0xa54>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d013      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x984>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a3d      	ldr	r2, [pc, #244]	@ (80055c8 <HAL_DMA_IRQHandler+0xa58>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00e      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x984>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a3c      	ldr	r2, [pc, #240]	@ (80055cc <HAL_DMA_IRQHandler+0xa5c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d009      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x984>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a3a      	ldr	r2, [pc, #232]	@ (80055d0 <HAL_DMA_IRQHandler+0xa60>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x984>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a39      	ldr	r2, [pc, #228]	@ (80055d4 <HAL_DMA_IRQHandler+0xa64>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d101      	bne.n	80054f8 <HAL_DMA_IRQHandler+0x988>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_DMA_IRQHandler+0x98a>
 80054f8:	2300      	movs	r3, #0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 823f 	beq.w	800597e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	2204      	movs	r2, #4
 8005512:	409a      	lsls	r2, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80cd 	beq.w	80056b8 <HAL_DMA_IRQHandler+0xb48>
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 80c7 	beq.w	80056b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552e:	f003 031f 	and.w	r3, r3, #31
 8005532:	2204      	movs	r2, #4
 8005534:	409a      	lsls	r2, r3
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d049      	beq.n	80055d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 8210 	beq.w	8005978 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005560:	e20a      	b.n	8005978 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8206 	beq.w	8005978 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005574:	e200      	b.n	8005978 <HAL_DMA_IRQHandler+0xe08>
 8005576:	bf00      	nop
 8005578:	40020010 	.word	0x40020010
 800557c:	40020028 	.word	0x40020028
 8005580:	40020040 	.word	0x40020040
 8005584:	40020058 	.word	0x40020058
 8005588:	40020070 	.word	0x40020070
 800558c:	40020088 	.word	0x40020088
 8005590:	400200a0 	.word	0x400200a0
 8005594:	400200b8 	.word	0x400200b8
 8005598:	40020410 	.word	0x40020410
 800559c:	40020428 	.word	0x40020428
 80055a0:	40020440 	.word	0x40020440
 80055a4:	40020458 	.word	0x40020458
 80055a8:	40020470 	.word	0x40020470
 80055ac:	40020488 	.word	0x40020488
 80055b0:	400204a0 	.word	0x400204a0
 80055b4:	400204b8 	.word	0x400204b8
 80055b8:	58025408 	.word	0x58025408
 80055bc:	5802541c 	.word	0x5802541c
 80055c0:	58025430 	.word	0x58025430
 80055c4:	58025444 	.word	0x58025444
 80055c8:	58025458 	.word	0x58025458
 80055cc:	5802546c 	.word	0x5802546c
 80055d0:	58025480 	.word	0x58025480
 80055d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d160      	bne.n	80056a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a7f      	ldr	r2, [pc, #508]	@ (80057e4 <HAL_DMA_IRQHandler+0xc74>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d04a      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a7d      	ldr	r2, [pc, #500]	@ (80057e8 <HAL_DMA_IRQHandler+0xc78>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d045      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a7c      	ldr	r2, [pc, #496]	@ (80057ec <HAL_DMA_IRQHandler+0xc7c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d040      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a7a      	ldr	r2, [pc, #488]	@ (80057f0 <HAL_DMA_IRQHandler+0xc80>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d03b      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a79      	ldr	r2, [pc, #484]	@ (80057f4 <HAL_DMA_IRQHandler+0xc84>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d036      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a77      	ldr	r2, [pc, #476]	@ (80057f8 <HAL_DMA_IRQHandler+0xc88>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d031      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a76      	ldr	r2, [pc, #472]	@ (80057fc <HAL_DMA_IRQHandler+0xc8c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d02c      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a74      	ldr	r2, [pc, #464]	@ (8005800 <HAL_DMA_IRQHandler+0xc90>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d027      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a73      	ldr	r2, [pc, #460]	@ (8005804 <HAL_DMA_IRQHandler+0xc94>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d022      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a71      	ldr	r2, [pc, #452]	@ (8005808 <HAL_DMA_IRQHandler+0xc98>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d01d      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a70      	ldr	r2, [pc, #448]	@ (800580c <HAL_DMA_IRQHandler+0xc9c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d018      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a6e      	ldr	r2, [pc, #440]	@ (8005810 <HAL_DMA_IRQHandler+0xca0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d013      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6d      	ldr	r2, [pc, #436]	@ (8005814 <HAL_DMA_IRQHandler+0xca4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00e      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a6b      	ldr	r2, [pc, #428]	@ (8005818 <HAL_DMA_IRQHandler+0xca8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d009      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6a      	ldr	r2, [pc, #424]	@ (800581c <HAL_DMA_IRQHandler+0xcac>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d004      	beq.n	8005682 <HAL_DMA_IRQHandler+0xb12>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a68      	ldr	r2, [pc, #416]	@ (8005820 <HAL_DMA_IRQHandler+0xcb0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d108      	bne.n	8005694 <HAL_DMA_IRQHandler+0xb24>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0208 	bic.w	r2, r2, #8
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e007      	b.n	80056a4 <HAL_DMA_IRQHandler+0xb34>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0204 	bic.w	r2, r2, #4
 80056a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8165 	beq.w	8005978 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056b6:	e15f      	b.n	8005978 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2202      	movs	r2, #2
 80056c2:	409a      	lsls	r2, r3
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80c5 	beq.w	8005858 <HAL_DMA_IRQHandler+0xce8>
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80bf 	beq.w	8005858 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	2202      	movs	r2, #2
 80056e4:	409a      	lsls	r2, r3
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d018      	beq.n	8005726 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 813a 	beq.w	800597c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005710:	e134      	b.n	800597c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 8130 	beq.w	800597c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005724:	e12a      	b.n	800597c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	f040 8089 	bne.w	8005844 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a2b      	ldr	r2, [pc, #172]	@ (80057e4 <HAL_DMA_IRQHandler+0xc74>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d04a      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a29      	ldr	r2, [pc, #164]	@ (80057e8 <HAL_DMA_IRQHandler+0xc78>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d045      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a28      	ldr	r2, [pc, #160]	@ (80057ec <HAL_DMA_IRQHandler+0xc7c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d040      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a26      	ldr	r2, [pc, #152]	@ (80057f0 <HAL_DMA_IRQHandler+0xc80>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d03b      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a25      	ldr	r2, [pc, #148]	@ (80057f4 <HAL_DMA_IRQHandler+0xc84>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d036      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a23      	ldr	r2, [pc, #140]	@ (80057f8 <HAL_DMA_IRQHandler+0xc88>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d031      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a22      	ldr	r2, [pc, #136]	@ (80057fc <HAL_DMA_IRQHandler+0xc8c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d02c      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a20      	ldr	r2, [pc, #128]	@ (8005800 <HAL_DMA_IRQHandler+0xc90>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d027      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1f      	ldr	r2, [pc, #124]	@ (8005804 <HAL_DMA_IRQHandler+0xc94>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d022      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1d      	ldr	r2, [pc, #116]	@ (8005808 <HAL_DMA_IRQHandler+0xc98>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01d      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1c      	ldr	r2, [pc, #112]	@ (800580c <HAL_DMA_IRQHandler+0xc9c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d018      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005810 <HAL_DMA_IRQHandler+0xca0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a19      	ldr	r2, [pc, #100]	@ (8005814 <HAL_DMA_IRQHandler+0xca4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a17      	ldr	r2, [pc, #92]	@ (8005818 <HAL_DMA_IRQHandler+0xca8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a16      	ldr	r2, [pc, #88]	@ (800581c <HAL_DMA_IRQHandler+0xcac>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xc62>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a14      	ldr	r2, [pc, #80]	@ (8005820 <HAL_DMA_IRQHandler+0xcb0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d128      	bne.n	8005824 <HAL_DMA_IRQHandler+0xcb4>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0214 	bic.w	r2, r2, #20
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	e027      	b.n	8005834 <HAL_DMA_IRQHandler+0xcc4>
 80057e4:	40020010 	.word	0x40020010
 80057e8:	40020028 	.word	0x40020028
 80057ec:	40020040 	.word	0x40020040
 80057f0:	40020058 	.word	0x40020058
 80057f4:	40020070 	.word	0x40020070
 80057f8:	40020088 	.word	0x40020088
 80057fc:	400200a0 	.word	0x400200a0
 8005800:	400200b8 	.word	0x400200b8
 8005804:	40020410 	.word	0x40020410
 8005808:	40020428 	.word	0x40020428
 800580c:	40020440 	.word	0x40020440
 8005810:	40020458 	.word	0x40020458
 8005814:	40020470 	.word	0x40020470
 8005818:	40020488 	.word	0x40020488
 800581c:	400204a0 	.word	0x400204a0
 8005820:	400204b8 	.word	0x400204b8
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 020a 	bic.w	r2, r2, #10
 8005832:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8097 	beq.w	800597c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005856:	e091      	b.n	800597c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	2208      	movs	r2, #8
 8005862:	409a      	lsls	r2, r3
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4013      	ands	r3, r2
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8088 	beq.w	800597e <HAL_DMA_IRQHandler+0xe0e>
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8082 	beq.w	800597e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a41      	ldr	r2, [pc, #260]	@ (8005984 <HAL_DMA_IRQHandler+0xe14>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d04a      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a3f      	ldr	r2, [pc, #252]	@ (8005988 <HAL_DMA_IRQHandler+0xe18>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d045      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a3e      	ldr	r2, [pc, #248]	@ (800598c <HAL_DMA_IRQHandler+0xe1c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d040      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a3c      	ldr	r2, [pc, #240]	@ (8005990 <HAL_DMA_IRQHandler+0xe20>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d03b      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005994 <HAL_DMA_IRQHandler+0xe24>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d036      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a39      	ldr	r2, [pc, #228]	@ (8005998 <HAL_DMA_IRQHandler+0xe28>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d031      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a38      	ldr	r2, [pc, #224]	@ (800599c <HAL_DMA_IRQHandler+0xe2c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d02c      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a36      	ldr	r2, [pc, #216]	@ (80059a0 <HAL_DMA_IRQHandler+0xe30>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d027      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a35      	ldr	r2, [pc, #212]	@ (80059a4 <HAL_DMA_IRQHandler+0xe34>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d022      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a33      	ldr	r2, [pc, #204]	@ (80059a8 <HAL_DMA_IRQHandler+0xe38>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01d      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a32      	ldr	r2, [pc, #200]	@ (80059ac <HAL_DMA_IRQHandler+0xe3c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d018      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a30      	ldr	r2, [pc, #192]	@ (80059b0 <HAL_DMA_IRQHandler+0xe40>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a2f      	ldr	r2, [pc, #188]	@ (80059b4 <HAL_DMA_IRQHandler+0xe44>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2d      	ldr	r2, [pc, #180]	@ (80059b8 <HAL_DMA_IRQHandler+0xe48>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2c      	ldr	r2, [pc, #176]	@ (80059bc <HAL_DMA_IRQHandler+0xe4c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_DMA_IRQHandler+0xdaa>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2a      	ldr	r2, [pc, #168]	@ (80059c0 <HAL_DMA_IRQHandler+0xe50>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d108      	bne.n	800592c <HAL_DMA_IRQHandler+0xdbc>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 021c 	bic.w	r2, r2, #28
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e007      	b.n	800593c <HAL_DMA_IRQHandler+0xdcc>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 020e 	bic.w	r2, r2, #14
 800593a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2201      	movs	r2, #1
 8005946:	409a      	lsls	r2, r3
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
 8005972:	e004      	b.n	800597e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005974:	bf00      	nop
 8005976:	e002      	b.n	800597e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005978:	bf00      	nop
 800597a:	e000      	b.n	800597e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800597c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800597e:	3728      	adds	r7, #40	@ 0x28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40020010 	.word	0x40020010
 8005988:	40020028 	.word	0x40020028
 800598c:	40020040 	.word	0x40020040
 8005990:	40020058 	.word	0x40020058
 8005994:	40020070 	.word	0x40020070
 8005998:	40020088 	.word	0x40020088
 800599c:	400200a0 	.word	0x400200a0
 80059a0:	400200b8 	.word	0x400200b8
 80059a4:	40020410 	.word	0x40020410
 80059a8:	40020428 	.word	0x40020428
 80059ac:	40020440 	.word	0x40020440
 80059b0:	40020458 	.word	0x40020458
 80059b4:	40020470 	.word	0x40020470
 80059b8:	40020488 	.word	0x40020488
 80059bc:	400204a0 	.word	0x400204a0
 80059c0:	400204b8 	.word	0x400204b8

080059c4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7f      	ldr	r2, [pc, #508]	@ (8005bf8 <DMA_SetConfig+0x21c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d072      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a7d      	ldr	r2, [pc, #500]	@ (8005bfc <DMA_SetConfig+0x220>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d06d      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c00 <DMA_SetConfig+0x224>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d068      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a7a      	ldr	r2, [pc, #488]	@ (8005c04 <DMA_SetConfig+0x228>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d063      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a79      	ldr	r2, [pc, #484]	@ (8005c08 <DMA_SetConfig+0x22c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d05e      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a77      	ldr	r2, [pc, #476]	@ (8005c0c <DMA_SetConfig+0x230>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d059      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a76      	ldr	r2, [pc, #472]	@ (8005c10 <DMA_SetConfig+0x234>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d054      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a74      	ldr	r2, [pc, #464]	@ (8005c14 <DMA_SetConfig+0x238>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d04f      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a73      	ldr	r2, [pc, #460]	@ (8005c18 <DMA_SetConfig+0x23c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d04a      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a71      	ldr	r2, [pc, #452]	@ (8005c1c <DMA_SetConfig+0x240>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d045      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a70      	ldr	r2, [pc, #448]	@ (8005c20 <DMA_SetConfig+0x244>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d040      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a6e      	ldr	r2, [pc, #440]	@ (8005c24 <DMA_SetConfig+0x248>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d03b      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a6d      	ldr	r2, [pc, #436]	@ (8005c28 <DMA_SetConfig+0x24c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d036      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a6b      	ldr	r2, [pc, #428]	@ (8005c2c <DMA_SetConfig+0x250>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d031      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a6a      	ldr	r2, [pc, #424]	@ (8005c30 <DMA_SetConfig+0x254>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d02c      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a68      	ldr	r2, [pc, #416]	@ (8005c34 <DMA_SetConfig+0x258>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d027      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a67      	ldr	r2, [pc, #412]	@ (8005c38 <DMA_SetConfig+0x25c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d022      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a65      	ldr	r2, [pc, #404]	@ (8005c3c <DMA_SetConfig+0x260>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01d      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a64      	ldr	r2, [pc, #400]	@ (8005c40 <DMA_SetConfig+0x264>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d018      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a62      	ldr	r2, [pc, #392]	@ (8005c44 <DMA_SetConfig+0x268>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a61      	ldr	r2, [pc, #388]	@ (8005c48 <DMA_SetConfig+0x26c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a5f      	ldr	r2, [pc, #380]	@ (8005c4c <DMA_SetConfig+0x270>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a5e      	ldr	r2, [pc, #376]	@ (8005c50 <DMA_SetConfig+0x274>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <DMA_SetConfig+0x10a>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a5c      	ldr	r2, [pc, #368]	@ (8005c54 <DMA_SetConfig+0x278>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d101      	bne.n	8005aea <DMA_SetConfig+0x10e>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <DMA_SetConfig+0x110>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00d      	beq.n	8005b0c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005af8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d004      	beq.n	8005b0c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b0a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a39      	ldr	r2, [pc, #228]	@ (8005bf8 <DMA_SetConfig+0x21c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d04a      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a38      	ldr	r2, [pc, #224]	@ (8005bfc <DMA_SetConfig+0x220>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d045      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a36      	ldr	r2, [pc, #216]	@ (8005c00 <DMA_SetConfig+0x224>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d040      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a35      	ldr	r2, [pc, #212]	@ (8005c04 <DMA_SetConfig+0x228>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d03b      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a33      	ldr	r2, [pc, #204]	@ (8005c08 <DMA_SetConfig+0x22c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d036      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a32      	ldr	r2, [pc, #200]	@ (8005c0c <DMA_SetConfig+0x230>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d031      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a30      	ldr	r2, [pc, #192]	@ (8005c10 <DMA_SetConfig+0x234>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d02c      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a2f      	ldr	r2, [pc, #188]	@ (8005c14 <DMA_SetConfig+0x238>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d027      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a2d      	ldr	r2, [pc, #180]	@ (8005c18 <DMA_SetConfig+0x23c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d022      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c1c <DMA_SetConfig+0x240>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d01d      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a2a      	ldr	r2, [pc, #168]	@ (8005c20 <DMA_SetConfig+0x244>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d018      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a29      	ldr	r2, [pc, #164]	@ (8005c24 <DMA_SetConfig+0x248>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d013      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a27      	ldr	r2, [pc, #156]	@ (8005c28 <DMA_SetConfig+0x24c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00e      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a26      	ldr	r2, [pc, #152]	@ (8005c2c <DMA_SetConfig+0x250>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d009      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a24      	ldr	r2, [pc, #144]	@ (8005c30 <DMA_SetConfig+0x254>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <DMA_SetConfig+0x1d0>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a23      	ldr	r2, [pc, #140]	@ (8005c34 <DMA_SetConfig+0x258>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d101      	bne.n	8005bb0 <DMA_SetConfig+0x1d4>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <DMA_SetConfig+0x1d6>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d059      	beq.n	8005c6a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	223f      	movs	r2, #63	@ 0x3f
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005bd4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b40      	cmp	r3, #64	@ 0x40
 8005be4:	d138      	bne.n	8005c58 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005bf6:	e086      	b.n	8005d06 <DMA_SetConfig+0x32a>
 8005bf8:	40020010 	.word	0x40020010
 8005bfc:	40020028 	.word	0x40020028
 8005c00:	40020040 	.word	0x40020040
 8005c04:	40020058 	.word	0x40020058
 8005c08:	40020070 	.word	0x40020070
 8005c0c:	40020088 	.word	0x40020088
 8005c10:	400200a0 	.word	0x400200a0
 8005c14:	400200b8 	.word	0x400200b8
 8005c18:	40020410 	.word	0x40020410
 8005c1c:	40020428 	.word	0x40020428
 8005c20:	40020440 	.word	0x40020440
 8005c24:	40020458 	.word	0x40020458
 8005c28:	40020470 	.word	0x40020470
 8005c2c:	40020488 	.word	0x40020488
 8005c30:	400204a0 	.word	0x400204a0
 8005c34:	400204b8 	.word	0x400204b8
 8005c38:	58025408 	.word	0x58025408
 8005c3c:	5802541c 	.word	0x5802541c
 8005c40:	58025430 	.word	0x58025430
 8005c44:	58025444 	.word	0x58025444
 8005c48:	58025458 	.word	0x58025458
 8005c4c:	5802546c 	.word	0x5802546c
 8005c50:	58025480 	.word	0x58025480
 8005c54:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]
}
 8005c68:	e04d      	b.n	8005d06 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a29      	ldr	r2, [pc, #164]	@ (8005d14 <DMA_SetConfig+0x338>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d022      	beq.n	8005cba <DMA_SetConfig+0x2de>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a27      	ldr	r2, [pc, #156]	@ (8005d18 <DMA_SetConfig+0x33c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d01d      	beq.n	8005cba <DMA_SetConfig+0x2de>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a26      	ldr	r2, [pc, #152]	@ (8005d1c <DMA_SetConfig+0x340>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d018      	beq.n	8005cba <DMA_SetConfig+0x2de>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a24      	ldr	r2, [pc, #144]	@ (8005d20 <DMA_SetConfig+0x344>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d013      	beq.n	8005cba <DMA_SetConfig+0x2de>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a23      	ldr	r2, [pc, #140]	@ (8005d24 <DMA_SetConfig+0x348>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00e      	beq.n	8005cba <DMA_SetConfig+0x2de>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a21      	ldr	r2, [pc, #132]	@ (8005d28 <DMA_SetConfig+0x34c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d009      	beq.n	8005cba <DMA_SetConfig+0x2de>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a20      	ldr	r2, [pc, #128]	@ (8005d2c <DMA_SetConfig+0x350>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d004      	beq.n	8005cba <DMA_SetConfig+0x2de>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005d30 <DMA_SetConfig+0x354>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d101      	bne.n	8005cbe <DMA_SetConfig+0x2e2>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <DMA_SetConfig+0x2e4>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d020      	beq.n	8005d06 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	2201      	movs	r2, #1
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b40      	cmp	r3, #64	@ 0x40
 8005ce2:	d108      	bne.n	8005cf6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	60da      	str	r2, [r3, #12]
}
 8005cf4:	e007      	b.n	8005d06 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	60da      	str	r2, [r3, #12]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	58025408 	.word	0x58025408
 8005d18:	5802541c 	.word	0x5802541c
 8005d1c:	58025430 	.word	0x58025430
 8005d20:	58025444 	.word	0x58025444
 8005d24:	58025458 	.word	0x58025458
 8005d28:	5802546c 	.word	0x5802546c
 8005d2c:	58025480 	.word	0x58025480
 8005d30:	58025494 	.word	0x58025494

08005d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a42      	ldr	r2, [pc, #264]	@ (8005e4c <DMA_CalcBaseAndBitshift+0x118>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d04a      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a41      	ldr	r2, [pc, #260]	@ (8005e50 <DMA_CalcBaseAndBitshift+0x11c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d045      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a3f      	ldr	r2, [pc, #252]	@ (8005e54 <DMA_CalcBaseAndBitshift+0x120>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d040      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8005e58 <DMA_CalcBaseAndBitshift+0x124>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d03b      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a3c      	ldr	r2, [pc, #240]	@ (8005e5c <DMA_CalcBaseAndBitshift+0x128>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d036      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a3b      	ldr	r2, [pc, #236]	@ (8005e60 <DMA_CalcBaseAndBitshift+0x12c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d031      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a39      	ldr	r2, [pc, #228]	@ (8005e64 <DMA_CalcBaseAndBitshift+0x130>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d02c      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a38      	ldr	r2, [pc, #224]	@ (8005e68 <DMA_CalcBaseAndBitshift+0x134>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d027      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a36      	ldr	r2, [pc, #216]	@ (8005e6c <DMA_CalcBaseAndBitshift+0x138>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d022      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a35      	ldr	r2, [pc, #212]	@ (8005e70 <DMA_CalcBaseAndBitshift+0x13c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d01d      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a33      	ldr	r2, [pc, #204]	@ (8005e74 <DMA_CalcBaseAndBitshift+0x140>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a32      	ldr	r2, [pc, #200]	@ (8005e78 <DMA_CalcBaseAndBitshift+0x144>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a30      	ldr	r2, [pc, #192]	@ (8005e7c <DMA_CalcBaseAndBitshift+0x148>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8005e80 <DMA_CalcBaseAndBitshift+0x14c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8005e84 <DMA_CalcBaseAndBitshift+0x150>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xa8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8005e88 <DMA_CalcBaseAndBitshift+0x154>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d101      	bne.n	8005de0 <DMA_CalcBaseAndBitshift+0xac>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <DMA_CalcBaseAndBitshift+0xae>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d024      	beq.n	8005e30 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	3b10      	subs	r3, #16
 8005dee:	4a27      	ldr	r2, [pc, #156]	@ (8005e8c <DMA_CalcBaseAndBitshift+0x158>)
 8005df0:	fba2 2303 	umull	r2, r3, r2, r3
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	4a24      	ldr	r2, [pc, #144]	@ (8005e90 <DMA_CalcBaseAndBitshift+0x15c>)
 8005e00:	5cd3      	ldrb	r3, [r2, r3]
 8005e02:	461a      	mov	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d908      	bls.n	8005e20 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	4b1f      	ldr	r3, [pc, #124]	@ (8005e94 <DMA_CalcBaseAndBitshift+0x160>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	1d1a      	adds	r2, r3, #4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e1e:	e00d      	b.n	8005e3c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	4b1b      	ldr	r3, [pc, #108]	@ (8005e94 <DMA_CalcBaseAndBitshift+0x160>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e2e:	e005      	b.n	8005e3c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	40020010 	.word	0x40020010
 8005e50:	40020028 	.word	0x40020028
 8005e54:	40020040 	.word	0x40020040
 8005e58:	40020058 	.word	0x40020058
 8005e5c:	40020070 	.word	0x40020070
 8005e60:	40020088 	.word	0x40020088
 8005e64:	400200a0 	.word	0x400200a0
 8005e68:	400200b8 	.word	0x400200b8
 8005e6c:	40020410 	.word	0x40020410
 8005e70:	40020428 	.word	0x40020428
 8005e74:	40020440 	.word	0x40020440
 8005e78:	40020458 	.word	0x40020458
 8005e7c:	40020470 	.word	0x40020470
 8005e80:	40020488 	.word	0x40020488
 8005e84:	400204a0 	.word	0x400204a0
 8005e88:	400204b8 	.word	0x400204b8
 8005e8c:	aaaaaaab 	.word	0xaaaaaaab
 8005e90:	0800ef80 	.word	0x0800ef80
 8005e94:	fffffc00 	.word	0xfffffc00

08005e98 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d120      	bne.n	8005eee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d858      	bhi.n	8005f66 <DMA_CheckFifoParam+0xce>
 8005eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ebc <DMA_CheckFifoParam+0x24>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005ecd 	.word	0x08005ecd
 8005ec0:	08005edf 	.word	0x08005edf
 8005ec4:	08005ecd 	.word	0x08005ecd
 8005ec8:	08005f67 	.word	0x08005f67
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d048      	beq.n	8005f6a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005edc:	e045      	b.n	8005f6a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ee6:	d142      	bne.n	8005f6e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005eec:	e03f      	b.n	8005f6e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ef6:	d123      	bne.n	8005f40 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d838      	bhi.n	8005f72 <DMA_CheckFifoParam+0xda>
 8005f00:	a201      	add	r2, pc, #4	@ (adr r2, 8005f08 <DMA_CheckFifoParam+0x70>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f19 	.word	0x08005f19
 8005f0c:	08005f1f 	.word	0x08005f1f
 8005f10:	08005f19 	.word	0x08005f19
 8005f14:	08005f31 	.word	0x08005f31
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	73fb      	strb	r3, [r7, #15]
        break;
 8005f1c:	e030      	b.n	8005f80 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d025      	beq.n	8005f76 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f2e:	e022      	b.n	8005f76 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005f38:	d11f      	bne.n	8005f7a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f3e:	e01c      	b.n	8005f7a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d902      	bls.n	8005f4e <DMA_CheckFifoParam+0xb6>
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d003      	beq.n	8005f54 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005f4c:	e018      	b.n	8005f80 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	73fb      	strb	r3, [r7, #15]
        break;
 8005f52:	e015      	b.n	8005f80 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00e      	beq.n	8005f7e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
    break;
 8005f64:	e00b      	b.n	8005f7e <DMA_CheckFifoParam+0xe6>
        break;
 8005f66:	bf00      	nop
 8005f68:	e00a      	b.n	8005f80 <DMA_CheckFifoParam+0xe8>
        break;
 8005f6a:	bf00      	nop
 8005f6c:	e008      	b.n	8005f80 <DMA_CheckFifoParam+0xe8>
        break;
 8005f6e:	bf00      	nop
 8005f70:	e006      	b.n	8005f80 <DMA_CheckFifoParam+0xe8>
        break;
 8005f72:	bf00      	nop
 8005f74:	e004      	b.n	8005f80 <DMA_CheckFifoParam+0xe8>
        break;
 8005f76:	bf00      	nop
 8005f78:	e002      	b.n	8005f80 <DMA_CheckFifoParam+0xe8>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e000      	b.n	8005f80 <DMA_CheckFifoParam+0xe8>
    break;
 8005f7e:	bf00      	nop
    }
  }

  return status;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop

08005f90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a38      	ldr	r2, [pc, #224]	@ (8006084 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a36      	ldr	r2, [pc, #216]	@ (8006088 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01d      	beq.n	8005fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a35      	ldr	r2, [pc, #212]	@ (800608c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d018      	beq.n	8005fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a33      	ldr	r2, [pc, #204]	@ (8006090 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a32      	ldr	r2, [pc, #200]	@ (8006094 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a30      	ldr	r2, [pc, #192]	@ (8006098 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a2f      	ldr	r2, [pc, #188]	@ (800609c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80060a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d101      	bne.n	8005ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01a      	beq.n	800602e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	3b08      	subs	r3, #8
 8006000:	4a28      	ldr	r2, [pc, #160]	@ (80060a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4b26      	ldr	r3, [pc, #152]	@ (80060a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	461a      	mov	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a24      	ldr	r2, [pc, #144]	@ (80060ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800601c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	2201      	movs	r2, #1
 8006026:	409a      	lsls	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800602c:	e024      	b.n	8006078 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	3b10      	subs	r3, #16
 8006036:	4a1e      	ldr	r2, [pc, #120]	@ (80060b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006038:	fba2 2303 	umull	r2, r3, r2, r3
 800603c:	091b      	lsrs	r3, r3, #4
 800603e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4a1c      	ldr	r2, [pc, #112]	@ (80060b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d806      	bhi.n	8006056 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a1b      	ldr	r2, [pc, #108]	@ (80060b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d902      	bls.n	8006056 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3308      	adds	r3, #8
 8006054:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4b18      	ldr	r3, [pc, #96]	@ (80060bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a16      	ldr	r2, [pc, #88]	@ (80060c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006068:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	2201      	movs	r2, #1
 8006072:	409a      	lsls	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006078:	bf00      	nop
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	58025408 	.word	0x58025408
 8006088:	5802541c 	.word	0x5802541c
 800608c:	58025430 	.word	0x58025430
 8006090:	58025444 	.word	0x58025444
 8006094:	58025458 	.word	0x58025458
 8006098:	5802546c 	.word	0x5802546c
 800609c:	58025480 	.word	0x58025480
 80060a0:	58025494 	.word	0x58025494
 80060a4:	cccccccd 	.word	0xcccccccd
 80060a8:	16009600 	.word	0x16009600
 80060ac:	58025880 	.word	0x58025880
 80060b0:	aaaaaaab 	.word	0xaaaaaaab
 80060b4:	400204b8 	.word	0x400204b8
 80060b8:	4002040f 	.word	0x4002040f
 80060bc:	10008200 	.word	0x10008200
 80060c0:	40020880 	.word	0x40020880

080060c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d04a      	beq.n	8006170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d847      	bhi.n	8006170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a25      	ldr	r2, [pc, #148]	@ (800617c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d022      	beq.n	8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a24      	ldr	r2, [pc, #144]	@ (8006180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d01d      	beq.n	8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a22      	ldr	r2, [pc, #136]	@ (8006184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d018      	beq.n	8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a21      	ldr	r2, [pc, #132]	@ (8006188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d013      	beq.n	8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1f      	ldr	r2, [pc, #124]	@ (800618c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00e      	beq.n	8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1e      	ldr	r2, [pc, #120]	@ (8006190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d009      	beq.n	8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1c      	ldr	r2, [pc, #112]	@ (8006194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1b      	ldr	r2, [pc, #108]	@ (8006198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d101      	bne.n	8006134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006134:	2300      	movs	r3, #0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4b17      	ldr	r3, [pc, #92]	@ (800619c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	461a      	mov	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a15      	ldr	r2, [pc, #84]	@ (80061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800614c:	671a      	str	r2, [r3, #112]	@ 0x70
 800614e:	e009      	b.n	8006164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4b14      	ldr	r3, [pc, #80]	@ (80061a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a11      	ldr	r2, [pc, #68]	@ (80061a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006162:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3b01      	subs	r3, #1
 8006168:	2201      	movs	r2, #1
 800616a:	409a      	lsls	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	58025408 	.word	0x58025408
 8006180:	5802541c 	.word	0x5802541c
 8006184:	58025430 	.word	0x58025430
 8006188:	58025444 	.word	0x58025444
 800618c:	58025458 	.word	0x58025458
 8006190:	5802546c 	.word	0x5802546c
 8006194:	58025480 	.word	0x58025480
 8006198:	58025494 	.word	0x58025494
 800619c:	1600963f 	.word	0x1600963f
 80061a0:	58025940 	.word	0x58025940
 80061a4:	1000823f 	.word	0x1000823f
 80061a8:	40020940 	.word	0x40020940

080061ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b089      	sub	sp, #36	@ 0x24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80061ba:	4b86      	ldr	r3, [pc, #536]	@ (80063d4 <HAL_GPIO_Init+0x228>)
 80061bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061be:	e18c      	b.n	80064da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	2101      	movs	r1, #1
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	fa01 f303 	lsl.w	r3, r1, r3
 80061cc:	4013      	ands	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 817e 	beq.w	80064d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f003 0303 	and.w	r3, r3, #3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d005      	beq.n	80061f0 <HAL_GPIO_Init+0x44>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d130      	bne.n	8006252 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	2203      	movs	r2, #3
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43db      	mvns	r3, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4013      	ands	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006226:	2201      	movs	r2, #1
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	4013      	ands	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	091b      	lsrs	r3, r3, #4
 800623c:	f003 0201 	and.w	r2, r3, #1
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	4313      	orrs	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b03      	cmp	r3, #3
 800625c:	d017      	beq.n	800628e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	2203      	movs	r2, #3
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	43db      	mvns	r3, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4013      	ands	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4313      	orrs	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d123      	bne.n	80062e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	08da      	lsrs	r2, r3, #3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3208      	adds	r2, #8
 80062a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	220f      	movs	r2, #15
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43db      	mvns	r3, r3
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	4013      	ands	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	08da      	lsrs	r2, r3, #3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3208      	adds	r2, #8
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	2203      	movs	r2, #3
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	43db      	mvns	r3, r3
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4013      	ands	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f003 0203 	and.w	r2, r3, #3
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	fa02 f303 	lsl.w	r3, r2, r3
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	4313      	orrs	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 80d8 	beq.w	80064d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006324:	4b2c      	ldr	r3, [pc, #176]	@ (80063d8 <HAL_GPIO_Init+0x22c>)
 8006326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800632a:	4a2b      	ldr	r2, [pc, #172]	@ (80063d8 <HAL_GPIO_Init+0x22c>)
 800632c:	f043 0302 	orr.w	r3, r3, #2
 8006330:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006334:	4b28      	ldr	r3, [pc, #160]	@ (80063d8 <HAL_GPIO_Init+0x22c>)
 8006336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006342:	4a26      	ldr	r2, [pc, #152]	@ (80063dc <HAL_GPIO_Init+0x230>)
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	089b      	lsrs	r3, r3, #2
 8006348:	3302      	adds	r3, #2
 800634a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	220f      	movs	r2, #15
 800635a:	fa02 f303 	lsl.w	r3, r2, r3
 800635e:	43db      	mvns	r3, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4013      	ands	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1d      	ldr	r2, [pc, #116]	@ (80063e0 <HAL_GPIO_Init+0x234>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d04a      	beq.n	8006404 <HAL_GPIO_Init+0x258>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1c      	ldr	r2, [pc, #112]	@ (80063e4 <HAL_GPIO_Init+0x238>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d02b      	beq.n	80063ce <HAL_GPIO_Init+0x222>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1b      	ldr	r2, [pc, #108]	@ (80063e8 <HAL_GPIO_Init+0x23c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d025      	beq.n	80063ca <HAL_GPIO_Init+0x21e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1a      	ldr	r2, [pc, #104]	@ (80063ec <HAL_GPIO_Init+0x240>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d01f      	beq.n	80063c6 <HAL_GPIO_Init+0x21a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a19      	ldr	r2, [pc, #100]	@ (80063f0 <HAL_GPIO_Init+0x244>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d019      	beq.n	80063c2 <HAL_GPIO_Init+0x216>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a18      	ldr	r2, [pc, #96]	@ (80063f4 <HAL_GPIO_Init+0x248>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d013      	beq.n	80063be <HAL_GPIO_Init+0x212>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a17      	ldr	r2, [pc, #92]	@ (80063f8 <HAL_GPIO_Init+0x24c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00d      	beq.n	80063ba <HAL_GPIO_Init+0x20e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <HAL_GPIO_Init+0x250>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d007      	beq.n	80063b6 <HAL_GPIO_Init+0x20a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a15      	ldr	r2, [pc, #84]	@ (8006400 <HAL_GPIO_Init+0x254>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d101      	bne.n	80063b2 <HAL_GPIO_Init+0x206>
 80063ae:	2309      	movs	r3, #9
 80063b0:	e029      	b.n	8006406 <HAL_GPIO_Init+0x25a>
 80063b2:	230a      	movs	r3, #10
 80063b4:	e027      	b.n	8006406 <HAL_GPIO_Init+0x25a>
 80063b6:	2307      	movs	r3, #7
 80063b8:	e025      	b.n	8006406 <HAL_GPIO_Init+0x25a>
 80063ba:	2306      	movs	r3, #6
 80063bc:	e023      	b.n	8006406 <HAL_GPIO_Init+0x25a>
 80063be:	2305      	movs	r3, #5
 80063c0:	e021      	b.n	8006406 <HAL_GPIO_Init+0x25a>
 80063c2:	2304      	movs	r3, #4
 80063c4:	e01f      	b.n	8006406 <HAL_GPIO_Init+0x25a>
 80063c6:	2303      	movs	r3, #3
 80063c8:	e01d      	b.n	8006406 <HAL_GPIO_Init+0x25a>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e01b      	b.n	8006406 <HAL_GPIO_Init+0x25a>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e019      	b.n	8006406 <HAL_GPIO_Init+0x25a>
 80063d2:	bf00      	nop
 80063d4:	58000080 	.word	0x58000080
 80063d8:	58024400 	.word	0x58024400
 80063dc:	58000400 	.word	0x58000400
 80063e0:	58020000 	.word	0x58020000
 80063e4:	58020400 	.word	0x58020400
 80063e8:	58020800 	.word	0x58020800
 80063ec:	58020c00 	.word	0x58020c00
 80063f0:	58021000 	.word	0x58021000
 80063f4:	58021400 	.word	0x58021400
 80063f8:	58021800 	.word	0x58021800
 80063fc:	58021c00 	.word	0x58021c00
 8006400:	58022400 	.word	0x58022400
 8006404:	2300      	movs	r3, #0
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	f002 0203 	and.w	r2, r2, #3
 800640c:	0092      	lsls	r2, r2, #2
 800640e:	4093      	lsls	r3, r2
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4313      	orrs	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006416:	4938      	ldr	r1, [pc, #224]	@ (80064f8 <HAL_GPIO_Init+0x34c>)
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	3302      	adds	r3, #2
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	43db      	mvns	r3, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4013      	ands	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800644a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	43db      	mvns	r3, r3
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	4013      	ands	r3, r2
 8006462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	43db      	mvns	r3, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4013      	ands	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	43db      	mvns	r3, r3
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	4013      	ands	r3, r2
 80064b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	fa22 f303 	lsr.w	r3, r2, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f ae6b 	bne.w	80061c0 <HAL_GPIO_Init+0x14>
  }
}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	3724      	adds	r7, #36	@ 0x24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	58000400 	.word	0x58000400

080064fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	807b      	strh	r3, [r7, #2]
 8006508:	4613      	mov	r3, r2
 800650a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800650c:	787b      	ldrb	r3, [r7, #1]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006512:	887a      	ldrh	r2, [r7, #2]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006518:	e003      	b.n	8006522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	041a      	lsls	r2, r3, #16
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	619a      	str	r2, [r3, #24]
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006540:	887a      	ldrh	r2, [r7, #2]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4013      	ands	r3, r2
 8006546:	041a      	lsls	r2, r3, #16
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	43d9      	mvns	r1, r3
 800654c:	887b      	ldrh	r3, [r7, #2]
 800654e:	400b      	ands	r3, r1
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	619a      	str	r2, [r3, #24]
}
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800656c:	4b19      	ldr	r3, [pc, #100]	@ (80065d4 <HAL_PWREx_ConfigSupply+0x70>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b04      	cmp	r3, #4
 8006576:	d00a      	beq.n	800658e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006578:	4b16      	ldr	r3, [pc, #88]	@ (80065d4 <HAL_PWREx_ConfigSupply+0x70>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d001      	beq.n	800658a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e01f      	b.n	80065ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e01d      	b.n	80065ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800658e:	4b11      	ldr	r3, [pc, #68]	@ (80065d4 <HAL_PWREx_ConfigSupply+0x70>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f023 0207 	bic.w	r2, r3, #7
 8006596:	490f      	ldr	r1, [pc, #60]	@ (80065d4 <HAL_PWREx_ConfigSupply+0x70>)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4313      	orrs	r3, r2
 800659c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800659e:	f7fc fe09 	bl	80031b4 <HAL_GetTick>
 80065a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065a4:	e009      	b.n	80065ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80065a6:	f7fc fe05 	bl	80031b4 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065b4:	d901      	bls.n	80065ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e007      	b.n	80065ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065ba:	4b06      	ldr	r3, [pc, #24]	@ (80065d4 <HAL_PWREx_ConfigSupply+0x70>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065c6:	d1ee      	bne.n	80065a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	58024800 	.word	0x58024800

080065d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	@ 0x30
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e3c8      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 8087 	beq.w	8006706 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065f8:	4b88      	ldr	r3, [pc, #544]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006602:	4b86      	ldr	r3, [pc, #536]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006606:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660a:	2b10      	cmp	r3, #16
 800660c:	d007      	beq.n	800661e <HAL_RCC_OscConfig+0x46>
 800660e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006610:	2b18      	cmp	r3, #24
 8006612:	d110      	bne.n	8006636 <HAL_RCC_OscConfig+0x5e>
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d10b      	bne.n	8006636 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800661e:	4b7f      	ldr	r3, [pc, #508]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d06c      	beq.n	8006704 <HAL_RCC_OscConfig+0x12c>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d168      	bne.n	8006704 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e3a2      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800663e:	d106      	bne.n	800664e <HAL_RCC_OscConfig+0x76>
 8006640:	4b76      	ldr	r3, [pc, #472]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a75      	ldr	r2, [pc, #468]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e02e      	b.n	80066ac <HAL_RCC_OscConfig+0xd4>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10c      	bne.n	8006670 <HAL_RCC_OscConfig+0x98>
 8006656:	4b71      	ldr	r3, [pc, #452]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a70      	ldr	r2, [pc, #448]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 800665c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	4b6e      	ldr	r3, [pc, #440]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a6d      	ldr	r2, [pc, #436]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006668:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e01d      	b.n	80066ac <HAL_RCC_OscConfig+0xd4>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006678:	d10c      	bne.n	8006694 <HAL_RCC_OscConfig+0xbc>
 800667a:	4b68      	ldr	r3, [pc, #416]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a67      	ldr	r2, [pc, #412]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	4b65      	ldr	r3, [pc, #404]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a64      	ldr	r2, [pc, #400]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 800668c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0xd4>
 8006694:	4b61      	ldr	r3, [pc, #388]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a60      	ldr	r2, [pc, #384]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 800669a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	4b5e      	ldr	r3, [pc, #376]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a5d      	ldr	r2, [pc, #372]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80066a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d013      	beq.n	80066dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fc fd7e 	bl	80031b4 <HAL_GetTick>
 80066b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066bc:	f7fc fd7a 	bl	80031b4 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b64      	cmp	r3, #100	@ 0x64
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e356      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066ce:	4b53      	ldr	r3, [pc, #332]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0xe4>
 80066da:	e014      	b.n	8006706 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066dc:	f7fc fd6a 	bl	80031b4 <HAL_GetTick>
 80066e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066e4:	f7fc fd66 	bl	80031b4 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	@ 0x64
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e342      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066f6:	4b49      	ldr	r3, [pc, #292]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f0      	bne.n	80066e4 <HAL_RCC_OscConfig+0x10c>
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 808c 	beq.w	800682c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006714:	4b41      	ldr	r3, [pc, #260]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800671c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800671e:	4b3f      	ldr	r3, [pc, #252]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006722:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d007      	beq.n	800673a <HAL_RCC_OscConfig+0x162>
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	2b18      	cmp	r3, #24
 800672e:	d137      	bne.n	80067a0 <HAL_RCC_OscConfig+0x1c8>
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d132      	bne.n	80067a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800673a:	4b38      	ldr	r3, [pc, #224]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_RCC_OscConfig+0x17a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e314      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006752:	4b32      	ldr	r3, [pc, #200]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 0219 	bic.w	r2, r3, #25
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	492f      	ldr	r1, [pc, #188]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006760:	4313      	orrs	r3, r2
 8006762:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fc fd26 	bl	80031b4 <HAL_GetTick>
 8006768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800676c:	f7fc fd22 	bl	80031b4 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e2fe      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800677e:	4b27      	ldr	r3, [pc, #156]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0f0      	beq.n	800676c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800678a:	4b24      	ldr	r3, [pc, #144]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	061b      	lsls	r3, r3, #24
 8006798:	4920      	ldr	r1, [pc, #128]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 800679a:	4313      	orrs	r3, r2
 800679c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800679e:	e045      	b.n	800682c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d026      	beq.n	80067f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067a8:	4b1c      	ldr	r3, [pc, #112]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f023 0219 	bic.w	r2, r3, #25
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4919      	ldr	r1, [pc, #100]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ba:	f7fc fcfb 	bl	80031b4 <HAL_GetTick>
 80067be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c2:	f7fc fcf7 	bl	80031b4 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e2d3      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067d4:	4b11      	ldr	r3, [pc, #68]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e0:	4b0e      	ldr	r3, [pc, #56]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	061b      	lsls	r3, r3, #24
 80067ee:	490b      	ldr	r1, [pc, #44]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	604b      	str	r3, [r1, #4]
 80067f4:	e01a      	b.n	800682c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067f6:	4b09      	ldr	r3, [pc, #36]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a08      	ldr	r2, [pc, #32]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006802:	f7fc fcd7 	bl	80031b4 <HAL_GetTick>
 8006806:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006808:	e00a      	b.n	8006820 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800680a:	f7fc fcd3 	bl	80031b4 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d903      	bls.n	8006820 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e2af      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
 800681c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006820:	4b96      	ldr	r3, [pc, #600]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1ee      	bne.n	800680a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b00      	cmp	r3, #0
 8006836:	d06a      	beq.n	800690e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006838:	4b90      	ldr	r3, [pc, #576]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006840:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006842:	4b8e      	ldr	r3, [pc, #568]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006846:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b08      	cmp	r3, #8
 800684c:	d007      	beq.n	800685e <HAL_RCC_OscConfig+0x286>
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b18      	cmp	r3, #24
 8006852:	d11b      	bne.n	800688c <HAL_RCC_OscConfig+0x2b4>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	2b01      	cmp	r3, #1
 800685c:	d116      	bne.n	800688c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800685e:	4b87      	ldr	r3, [pc, #540]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_RCC_OscConfig+0x29e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	2b80      	cmp	r3, #128	@ 0x80
 8006870:	d001      	beq.n	8006876 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e282      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006876:	4b81      	ldr	r3, [pc, #516]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	061b      	lsls	r3, r3, #24
 8006884:	497d      	ldr	r1, [pc, #500]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006886:	4313      	orrs	r3, r2
 8006888:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800688a:	e040      	b.n	800690e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d023      	beq.n	80068dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006894:	4b79      	ldr	r3, [pc, #484]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a78      	ldr	r2, [pc, #480]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 800689a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a0:	f7fc fc88 	bl	80031b4 <HAL_GetTick>
 80068a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80068a8:	f7fc fc84 	bl	80031b4 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e260      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068ba:	4b70      	ldr	r3, [pc, #448]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068c6:	4b6d      	ldr	r3, [pc, #436]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	061b      	lsls	r3, r3, #24
 80068d4:	4969      	ldr	r1, [pc, #420]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60cb      	str	r3, [r1, #12]
 80068da:	e018      	b.n	800690e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80068dc:	4b67      	ldr	r3, [pc, #412]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a66      	ldr	r2, [pc, #408]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 80068e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e8:	f7fc fc64 	bl	80031b4 <HAL_GetTick>
 80068ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80068f0:	f7fc fc60 	bl	80031b4 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e23c      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006902:	4b5e      	ldr	r3, [pc, #376]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f0      	bne.n	80068f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d036      	beq.n	8006988 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d019      	beq.n	8006956 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006922:	4b56      	ldr	r3, [pc, #344]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006926:	4a55      	ldr	r2, [pc, #340]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692e:	f7fc fc41 	bl	80031b4 <HAL_GetTick>
 8006932:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006934:	e008      	b.n	8006948 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006936:	f7fc fc3d 	bl	80031b4 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e219      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006948:	4b4c      	ldr	r3, [pc, #304]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 800694a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0f0      	beq.n	8006936 <HAL_RCC_OscConfig+0x35e>
 8006954:	e018      	b.n	8006988 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006956:	4b49      	ldr	r3, [pc, #292]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695a:	4a48      	ldr	r2, [pc, #288]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 800695c:	f023 0301 	bic.w	r3, r3, #1
 8006960:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006962:	f7fc fc27 	bl	80031b4 <HAL_GetTick>
 8006966:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800696a:	f7fc fc23 	bl	80031b4 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e1ff      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800697c:	4b3f      	ldr	r3, [pc, #252]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 800697e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1f0      	bne.n	800696a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	d036      	beq.n	8006a02 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d019      	beq.n	80069d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800699c:	4b37      	ldr	r3, [pc, #220]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a36      	ldr	r2, [pc, #216]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 80069a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80069a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069a8:	f7fc fc04 	bl	80031b4 <HAL_GetTick>
 80069ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069b0:	f7fc fc00 	bl	80031b4 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e1dc      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069c2:	4b2e      	ldr	r3, [pc, #184]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0x3d8>
 80069ce:	e018      	b.n	8006a02 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069d0:	4b2a      	ldr	r3, [pc, #168]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a29      	ldr	r2, [pc, #164]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 80069d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069dc:	f7fc fbea 	bl	80031b4 <HAL_GetTick>
 80069e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069e4:	f7fc fbe6 	bl	80031b4 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e1c2      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069f6:	4b21      	ldr	r3, [pc, #132]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8086 	beq.w	8006b1c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a10:	4b1b      	ldr	r3, [pc, #108]	@ (8006a80 <HAL_RCC_OscConfig+0x4a8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a1a      	ldr	r2, [pc, #104]	@ (8006a80 <HAL_RCC_OscConfig+0x4a8>)
 8006a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a1c:	f7fc fbca 	bl	80031b4 <HAL_GetTick>
 8006a20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a24:	f7fc fbc6 	bl	80031b4 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b64      	cmp	r3, #100	@ 0x64
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e1a2      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a36:	4b12      	ldr	r3, [pc, #72]	@ (8006a80 <HAL_RCC_OscConfig+0x4a8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d106      	bne.n	8006a58 <HAL_RCC_OscConfig+0x480>
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a56:	e032      	b.n	8006abe <HAL_RCC_OscConfig+0x4e6>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d111      	bne.n	8006a84 <HAL_RCC_OscConfig+0x4ac>
 8006a60:	4b06      	ldr	r3, [pc, #24]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a64:	4a05      	ldr	r2, [pc, #20]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006a66:	f023 0301 	bic.w	r3, r3, #1
 8006a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a6c:	4b03      	ldr	r3, [pc, #12]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a70:	4a02      	ldr	r2, [pc, #8]	@ (8006a7c <HAL_RCC_OscConfig+0x4a4>)
 8006a72:	f023 0304 	bic.w	r3, r3, #4
 8006a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a78:	e021      	b.n	8006abe <HAL_RCC_OscConfig+0x4e6>
 8006a7a:	bf00      	nop
 8006a7c:	58024400 	.word	0x58024400
 8006a80:	58024800 	.word	0x58024800
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b05      	cmp	r3, #5
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x4ce>
 8006a8c:	4b83      	ldr	r3, [pc, #524]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a90:	4a82      	ldr	r2, [pc, #520]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006a92:	f043 0304 	orr.w	r3, r3, #4
 8006a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a98:	4b80      	ldr	r3, [pc, #512]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a9c:	4a7f      	ldr	r2, [pc, #508]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aa4:	e00b      	b.n	8006abe <HAL_RCC_OscConfig+0x4e6>
 8006aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aaa:	4a7c      	ldr	r2, [pc, #496]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ab2:	4b7a      	ldr	r3, [pc, #488]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab6:	4a79      	ldr	r2, [pc, #484]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006ab8:	f023 0304 	bic.w	r3, r3, #4
 8006abc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d015      	beq.n	8006af2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac6:	f7fc fb75 	bl	80031b4 <HAL_GetTick>
 8006aca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006acc:	e00a      	b.n	8006ae4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ace:	f7fc fb71 	bl	80031b4 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e14b      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ae4:	4b6d      	ldr	r3, [pc, #436]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0ee      	beq.n	8006ace <HAL_RCC_OscConfig+0x4f6>
 8006af0:	e014      	b.n	8006b1c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af2:	f7fc fb5f 	bl	80031b4 <HAL_GetTick>
 8006af6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006af8:	e00a      	b.n	8006b10 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afa:	f7fc fb5b 	bl	80031b4 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e135      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b10:	4b62      	ldr	r3, [pc, #392]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1ee      	bne.n	8006afa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 812a 	beq.w	8006d7a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b26:	4b5d      	ldr	r3, [pc, #372]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b2e:	2b18      	cmp	r3, #24
 8006b30:	f000 80ba 	beq.w	8006ca8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	f040 8095 	bne.w	8006c68 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b3e:	4b57      	ldr	r3, [pc, #348]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a56      	ldr	r2, [pc, #344]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006b44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4a:	f7fc fb33 	bl	80031b4 <HAL_GetTick>
 8006b4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b52:	f7fc fb2f 	bl	80031b4 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e10b      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b64:	4b4d      	ldr	r3, [pc, #308]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f0      	bne.n	8006b52 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b70:	4b4a      	ldr	r3, [pc, #296]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006b72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b74:	4b4a      	ldr	r3, [pc, #296]	@ (8006ca0 <HAL_RCC_OscConfig+0x6c8>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b80:	0112      	lsls	r2, r2, #4
 8006b82:	430a      	orrs	r2, r1
 8006b84:	4945      	ldr	r1, [pc, #276]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	025b      	lsls	r3, r3, #9
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	041b      	lsls	r3, r3, #16
 8006ba8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	061b      	lsls	r3, r3, #24
 8006bb6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bba:	4938      	ldr	r1, [pc, #224]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006bc0:	4b36      	ldr	r3, [pc, #216]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	4a35      	ldr	r2, [pc, #212]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bcc:	4b33      	ldr	r3, [pc, #204]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006bce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bd0:	4b34      	ldr	r3, [pc, #208]	@ (8006ca4 <HAL_RCC_OscConfig+0x6cc>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006bd8:	00d2      	lsls	r2, r2, #3
 8006bda:	4930      	ldr	r1, [pc, #192]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006be0:	4b2e      	ldr	r3, [pc, #184]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be4:	f023 020c 	bic.w	r2, r3, #12
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bec:	492b      	ldr	r1, [pc, #172]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf6:	f023 0202 	bic.w	r2, r3, #2
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfe:	4927      	ldr	r1, [pc, #156]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c04:	4b25      	ldr	r3, [pc, #148]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	4a24      	ldr	r2, [pc, #144]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c10:	4b22      	ldr	r3, [pc, #136]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c14:	4a21      	ldr	r2, [pc, #132]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c20:	4a1e      	ldr	r2, [pc, #120]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006c28:	4b1c      	ldr	r3, [pc, #112]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c2e:	f043 0301 	orr.w	r3, r3, #1
 8006c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c34:	4b19      	ldr	r3, [pc, #100]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a18      	ldr	r2, [pc, #96]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7fc fab8 	bl	80031b4 <HAL_GetTick>
 8006c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c48:	f7fc fab4 	bl	80031b4 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e090      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c5a:	4b10      	ldr	r3, [pc, #64]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <HAL_RCC_OscConfig+0x670>
 8006c66:	e088      	b.n	8006d7a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c68:	4b0c      	ldr	r3, [pc, #48]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c74:	f7fc fa9e 	bl	80031b4 <HAL_GetTick>
 8006c78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c7c:	f7fc fa9a 	bl	80031b4 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e076      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c8e:	4b03      	ldr	r3, [pc, #12]	@ (8006c9c <HAL_RCC_OscConfig+0x6c4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f0      	bne.n	8006c7c <HAL_RCC_OscConfig+0x6a4>
 8006c9a:	e06e      	b.n	8006d7a <HAL_RCC_OscConfig+0x7a2>
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	fffffc0c 	.word	0xfffffc0c
 8006ca4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ca8:	4b36      	ldr	r3, [pc, #216]	@ (8006d84 <HAL_RCC_OscConfig+0x7ac>)
 8006caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006cae:	4b35      	ldr	r3, [pc, #212]	@ (8006d84 <HAL_RCC_OscConfig+0x7ac>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d031      	beq.n	8006d20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f003 0203 	and.w	r2, r3, #3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d12a      	bne.n	8006d20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	091b      	lsrs	r3, r3, #4
 8006cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d122      	bne.n	8006d20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d11a      	bne.n	8006d20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	0a5b      	lsrs	r3, r3, #9
 8006cee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d111      	bne.n	8006d20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	0c1b      	lsrs	r3, r3, #16
 8006d00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d108      	bne.n	8006d20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	0e1b      	lsrs	r3, r3, #24
 8006d12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d001      	beq.n	8006d24 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e02b      	b.n	8006d7c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006d24:	4b17      	ldr	r3, [pc, #92]	@ (8006d84 <HAL_RCC_OscConfig+0x7ac>)
 8006d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d28:	08db      	lsrs	r3, r3, #3
 8006d2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d01f      	beq.n	8006d7a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006d3a:	4b12      	ldr	r3, [pc, #72]	@ (8006d84 <HAL_RCC_OscConfig+0x7ac>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	4a11      	ldr	r2, [pc, #68]	@ (8006d84 <HAL_RCC_OscConfig+0x7ac>)
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d46:	f7fc fa35 	bl	80031b4 <HAL_GetTick>
 8006d4a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006d4c:	bf00      	nop
 8006d4e:	f7fc fa31 	bl	80031b4 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d0f9      	beq.n	8006d4e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d84 <HAL_RCC_OscConfig+0x7ac>)
 8006d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d88 <HAL_RCC_OscConfig+0x7b0>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006d66:	00d2      	lsls	r2, r2, #3
 8006d68:	4906      	ldr	r1, [pc, #24]	@ (8006d84 <HAL_RCC_OscConfig+0x7ac>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006d6e:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <HAL_RCC_OscConfig+0x7ac>)
 8006d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d72:	4a04      	ldr	r2, [pc, #16]	@ (8006d84 <HAL_RCC_OscConfig+0x7ac>)
 8006d74:	f043 0301 	orr.w	r3, r3, #1
 8006d78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3730      	adds	r7, #48	@ 0x30
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	58024400 	.word	0x58024400
 8006d88:	ffff0007 	.word	0xffff0007

08006d8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e19c      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006da0:	4b8a      	ldr	r3, [pc, #552]	@ (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d910      	bls.n	8006dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dae:	4b87      	ldr	r3, [pc, #540]	@ (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 020f 	bic.w	r2, r3, #15
 8006db6:	4985      	ldr	r1, [pc, #532]	@ (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b83      	ldr	r3, [pc, #524]	@ (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e184      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d010      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	4b7b      	ldr	r3, [pc, #492]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d908      	bls.n	8006dfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dec:	4b78      	ldr	r3, [pc, #480]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	4975      	ldr	r1, [pc, #468]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d010      	beq.n	8006e2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	695a      	ldr	r2, [r3, #20]
 8006e0e:	4b70      	ldr	r3, [pc, #448]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d908      	bls.n	8006e2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	496a      	ldr	r1, [pc, #424]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699a      	ldr	r2, [r3, #24]
 8006e3c:	4b64      	ldr	r3, [pc, #400]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d908      	bls.n	8006e5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e48:	4b61      	ldr	r3, [pc, #388]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	495e      	ldr	r1, [pc, #376]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d010      	beq.n	8006e88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	4b59      	ldr	r3, [pc, #356]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d908      	bls.n	8006e88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e76:	4b56      	ldr	r3, [pc, #344]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	4953      	ldr	r1, [pc, #332]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d010      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	4b4d      	ldr	r3, [pc, #308]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d908      	bls.n	8006eb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f023 020f 	bic.w	r2, r3, #15
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	4947      	ldr	r1, [pc, #284]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d055      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ec2:	4b43      	ldr	r3, [pc, #268]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	4940      	ldr	r1, [pc, #256]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d107      	bne.n	8006eec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006edc:	4b3c      	ldr	r3, [pc, #240]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d121      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0f6      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d107      	bne.n	8006f04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ef4:	4b36      	ldr	r3, [pc, #216]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d115      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e0ea      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d107      	bne.n	8006f1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f0c:	4b30      	ldr	r3, [pc, #192]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e0de      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e0d6      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f2c:	4b28      	ldr	r3, [pc, #160]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f023 0207 	bic.w	r2, r3, #7
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	4925      	ldr	r1, [pc, #148]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f3e:	f7fc f939 	bl	80031b4 <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f44:	e00a      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f46:	f7fc f935 	bl	80031b4 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e0be      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d1eb      	bne.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d010      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	4b14      	ldr	r3, [pc, #80]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d208      	bcs.n	8006f9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f8a:	4b11      	ldr	r3, [pc, #68]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f023 020f 	bic.w	r2, r3, #15
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	490e      	ldr	r1, [pc, #56]	@ (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d214      	bcs.n	8006fd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006faa:	4b08      	ldr	r3, [pc, #32]	@ (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f023 020f 	bic.w	r2, r3, #15
 8006fb2:	4906      	ldr	r1, [pc, #24]	@ (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fba:	4b04      	ldr	r3, [pc, #16]	@ (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e086      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
 8006fcc:	52002000 	.word	0x52002000
 8006fd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d010      	beq.n	8007002 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	4b3f      	ldr	r3, [pc, #252]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d208      	bcs.n	8007002 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	4939      	ldr	r1, [pc, #228]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d010      	beq.n	8007030 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695a      	ldr	r2, [r3, #20]
 8007012:	4b34      	ldr	r3, [pc, #208]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800701a:	429a      	cmp	r2, r3
 800701c:	d208      	bcs.n	8007030 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800701e:	4b31      	ldr	r3, [pc, #196]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	492e      	ldr	r1, [pc, #184]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800702c:	4313      	orrs	r3, r2
 800702e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	d010      	beq.n	800705e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	4b28      	ldr	r3, [pc, #160]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007048:	429a      	cmp	r2, r3
 800704a:	d208      	bcs.n	800705e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800704c:	4b25      	ldr	r3, [pc, #148]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	4922      	ldr	r1, [pc, #136]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800705a:	4313      	orrs	r3, r2
 800705c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d010      	beq.n	800708c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69da      	ldr	r2, [r3, #28]
 800706e:	4b1d      	ldr	r3, [pc, #116]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007076:	429a      	cmp	r2, r3
 8007078:	d208      	bcs.n	800708c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800707a:	4b1a      	ldr	r3, [pc, #104]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	4917      	ldr	r1, [pc, #92]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007088:	4313      	orrs	r3, r2
 800708a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800708c:	f000 f834 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 8007090:	4602      	mov	r2, r0
 8007092:	4b14      	ldr	r3, [pc, #80]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	0a1b      	lsrs	r3, r3, #8
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	4912      	ldr	r1, [pc, #72]	@ (80070e8 <HAL_RCC_ClockConfig+0x35c>)
 800709e:	5ccb      	ldrb	r3, [r1, r3]
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
 80070a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070aa:	4b0e      	ldr	r3, [pc, #56]	@ (80070e4 <HAL_RCC_ClockConfig+0x358>)
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	4a0d      	ldr	r2, [pc, #52]	@ (80070e8 <HAL_RCC_ClockConfig+0x35c>)
 80070b4:	5cd3      	ldrb	r3, [r2, r3]
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
 80070c0:	4a0a      	ldr	r2, [pc, #40]	@ (80070ec <HAL_RCC_ClockConfig+0x360>)
 80070c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070c4:	4a0a      	ldr	r2, [pc, #40]	@ (80070f0 <HAL_RCC_ClockConfig+0x364>)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80070ca:	4b0a      	ldr	r3, [pc, #40]	@ (80070f4 <HAL_RCC_ClockConfig+0x368>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fc f826 	bl	8003120 <HAL_InitTick>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	58024400 	.word	0x58024400
 80070e8:	0800ef70 	.word	0x0800ef70
 80070ec:	2400000c 	.word	0x2400000c
 80070f0:	24000008 	.word	0x24000008
 80070f4:	24000010 	.word	0x24000010

080070f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	@ 0x24
 80070fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070fe:	4bb3      	ldr	r3, [pc, #716]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007106:	2b18      	cmp	r3, #24
 8007108:	f200 8155 	bhi.w	80073b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800710c:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <HAL_RCC_GetSysClockFreq+0x1c>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007179 	.word	0x08007179
 8007118:	080073b7 	.word	0x080073b7
 800711c:	080073b7 	.word	0x080073b7
 8007120:	080073b7 	.word	0x080073b7
 8007124:	080073b7 	.word	0x080073b7
 8007128:	080073b7 	.word	0x080073b7
 800712c:	080073b7 	.word	0x080073b7
 8007130:	080073b7 	.word	0x080073b7
 8007134:	0800719f 	.word	0x0800719f
 8007138:	080073b7 	.word	0x080073b7
 800713c:	080073b7 	.word	0x080073b7
 8007140:	080073b7 	.word	0x080073b7
 8007144:	080073b7 	.word	0x080073b7
 8007148:	080073b7 	.word	0x080073b7
 800714c:	080073b7 	.word	0x080073b7
 8007150:	080073b7 	.word	0x080073b7
 8007154:	080071a5 	.word	0x080071a5
 8007158:	080073b7 	.word	0x080073b7
 800715c:	080073b7 	.word	0x080073b7
 8007160:	080073b7 	.word	0x080073b7
 8007164:	080073b7 	.word	0x080073b7
 8007168:	080073b7 	.word	0x080073b7
 800716c:	080073b7 	.word	0x080073b7
 8007170:	080073b7 	.word	0x080073b7
 8007174:	080071ab 	.word	0x080071ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007178:	4b94      	ldr	r3, [pc, #592]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007184:	4b91      	ldr	r3, [pc, #580]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	08db      	lsrs	r3, r3, #3
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	4a90      	ldr	r2, [pc, #576]	@ (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007190:	fa22 f303 	lsr.w	r3, r2, r3
 8007194:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007196:	e111      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007198:	4b8d      	ldr	r3, [pc, #564]	@ (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800719a:	61bb      	str	r3, [r7, #24]
      break;
 800719c:	e10e      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800719e:	4b8d      	ldr	r3, [pc, #564]	@ (80073d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071a0:	61bb      	str	r3, [r7, #24]
      break;
 80071a2:	e10b      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80071a4:	4b8c      	ldr	r3, [pc, #560]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80071a6:	61bb      	str	r3, [r7, #24]
      break;
 80071a8:	e108      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071aa:	4b88      	ldr	r3, [pc, #544]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80071b4:	4b85      	ldr	r3, [pc, #532]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071c0:	4b82      	ldr	r3, [pc, #520]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80071ca:	4b80      	ldr	r3, [pc, #512]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ce:	08db      	lsrs	r3, r3, #3
 80071d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80e1 	beq.w	80073b0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	f000 8083 	beq.w	80072fc <HAL_RCC_GetSysClockFreq+0x204>
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	f200 80a1 	bhi.w	8007340 <HAL_RCC_GetSysClockFreq+0x248>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_RCC_GetSysClockFreq+0x114>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d056      	beq.n	80072b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800720a:	e099      	b.n	8007340 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800720c:	4b6f      	ldr	r3, [pc, #444]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d02d      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007218:	4b6c      	ldr	r3, [pc, #432]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	08db      	lsrs	r3, r3, #3
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	4a6b      	ldr	r2, [pc, #428]	@ (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007242:	4b62      	ldr	r3, [pc, #392]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007252:	ed97 6a02 	vldr	s12, [r7, #8]
 8007256:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800725a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007272:	e087      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80073e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007286:	4b51      	ldr	r3, [pc, #324]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007296:	ed97 6a02 	vldr	s12, [r7, #8]
 800729a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800729e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072b6:	e065      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80073e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ca:	4b40      	ldr	r3, [pc, #256]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072da:	ed97 6a02 	vldr	s12, [r7, #8]
 80072de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80072e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072fa:	e043      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80073e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800730a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730e:	4b2f      	ldr	r3, [pc, #188]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007322:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800733e:	e021      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80073e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007352:	4b1e      	ldr	r3, [pc, #120]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007362:	ed97 6a02 	vldr	s12, [r7, #8]
 8007366:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800736a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007382:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007384:	4b11      	ldr	r3, [pc, #68]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007388:	0a5b      	lsrs	r3, r3, #9
 800738a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800738e:	3301      	adds	r3, #1
 8007390:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800739c:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a8:	ee17 3a90 	vmov	r3, s15
 80073ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80073ae:	e005      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
      break;
 80073b4:	e002      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80073b6:	4b07      	ldr	r3, [pc, #28]	@ (80073d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073b8:	61bb      	str	r3, [r7, #24]
      break;
 80073ba:	bf00      	nop
  }

  return sysclockfreq;
 80073bc:	69bb      	ldr	r3, [r7, #24]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3724      	adds	r7, #36	@ 0x24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	58024400 	.word	0x58024400
 80073d0:	03d09000 	.word	0x03d09000
 80073d4:	003d0900 	.word	0x003d0900
 80073d8:	017d7840 	.word	0x017d7840
 80073dc:	46000000 	.word	0x46000000
 80073e0:	4c742400 	.word	0x4c742400
 80073e4:	4a742400 	.word	0x4a742400
 80073e8:	4bbebc20 	.word	0x4bbebc20

080073ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073f2:	f7ff fe81 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 80073f6:	4602      	mov	r2, r0
 80073f8:	4b10      	ldr	r3, [pc, #64]	@ (800743c <HAL_RCC_GetHCLKFreq+0x50>)
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	490f      	ldr	r1, [pc, #60]	@ (8007440 <HAL_RCC_GetHCLKFreq+0x54>)
 8007404:	5ccb      	ldrb	r3, [r1, r3]
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007410:	4b0a      	ldr	r3, [pc, #40]	@ (800743c <HAL_RCC_GetHCLKFreq+0x50>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	4a09      	ldr	r2, [pc, #36]	@ (8007440 <HAL_RCC_GetHCLKFreq+0x54>)
 800741a:	5cd3      	ldrb	r3, [r2, r3]
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	fa22 f303 	lsr.w	r3, r2, r3
 8007426:	4a07      	ldr	r2, [pc, #28]	@ (8007444 <HAL_RCC_GetHCLKFreq+0x58>)
 8007428:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800742a:	4a07      	ldr	r2, [pc, #28]	@ (8007448 <HAL_RCC_GetHCLKFreq+0x5c>)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007430:	4b04      	ldr	r3, [pc, #16]	@ (8007444 <HAL_RCC_GetHCLKFreq+0x58>)
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	58024400 	.word	0x58024400
 8007440:	0800ef70 	.word	0x0800ef70
 8007444:	2400000c 	.word	0x2400000c
 8007448:	24000008 	.word	0x24000008

0800744c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007450:	f7ff ffcc 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8007454:	4602      	mov	r2, r0
 8007456:	4b06      	ldr	r3, [pc, #24]	@ (8007470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	4904      	ldr	r1, [pc, #16]	@ (8007474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007462:	5ccb      	ldrb	r3, [r1, r3]
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}
 8007470:	58024400 	.word	0x58024400
 8007474:	0800ef70 	.word	0x0800ef70

08007478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800747c:	f7ff ffb6 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8007480:	4602      	mov	r2, r0
 8007482:	4b06      	ldr	r3, [pc, #24]	@ (800749c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	4904      	ldr	r1, [pc, #16]	@ (80074a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800748e:	5ccb      	ldrb	r3, [r1, r3]
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007498:	4618      	mov	r0, r3
 800749a:	bd80      	pop	{r7, pc}
 800749c:	58024400 	.word	0x58024400
 80074a0:	0800ef70 	.word	0x0800ef70

080074a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074a8:	b0c6      	sub	sp, #280	@ 0x118
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074b6:	2300      	movs	r3, #0
 80074b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80074c8:	2500      	movs	r5, #0
 80074ca:	ea54 0305 	orrs.w	r3, r4, r5
 80074ce:	d049      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80074d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074da:	d02f      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80074dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074e0:	d828      	bhi.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80074e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074e6:	d01a      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80074e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074ec:	d822      	bhi.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80074f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074f6:	d007      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074f8:	e01c      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fa:	4bab      	ldr	r3, [pc, #684]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	4aaa      	ldr	r2, [pc, #680]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007504:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007506:	e01a      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750c:	3308      	adds	r3, #8
 800750e:	2102      	movs	r1, #2
 8007510:	4618      	mov	r0, r3
 8007512:	f001 fc25 	bl	8008d60 <RCCEx_PLL2_Config>
 8007516:	4603      	mov	r3, r0
 8007518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800751c:	e00f      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007522:	3328      	adds	r3, #40	@ 0x28
 8007524:	2102      	movs	r1, #2
 8007526:	4618      	mov	r0, r3
 8007528:	f001 fccc 	bl	8008ec4 <RCCEx_PLL3_Config>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007532:	e004      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800753a:	e000      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800753c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800753e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10a      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007546:	4b98      	ldr	r3, [pc, #608]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800754a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800754e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007554:	4a94      	ldr	r2, [pc, #592]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007556:	430b      	orrs	r3, r1
 8007558:	6513      	str	r3, [r2, #80]	@ 0x50
 800755a:	e003      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007560:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007570:	f04f 0900 	mov.w	r9, #0
 8007574:	ea58 0309 	orrs.w	r3, r8, r9
 8007578:	d047      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800757a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007580:	2b04      	cmp	r3, #4
 8007582:	d82a      	bhi.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007584:	a201      	add	r2, pc, #4	@ (adr r2, 800758c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	080075a1 	.word	0x080075a1
 8007590:	080075af 	.word	0x080075af
 8007594:	080075c5 	.word	0x080075c5
 8007598:	080075e3 	.word	0x080075e3
 800759c:	080075e3 	.word	0x080075e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a0:	4b81      	ldr	r3, [pc, #516]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	4a80      	ldr	r2, [pc, #512]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075ac:	e01a      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b2:	3308      	adds	r3, #8
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 fbd2 	bl	8008d60 <RCCEx_PLL2_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075c2:	e00f      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c8:	3328      	adds	r3, #40	@ 0x28
 80075ca:	2100      	movs	r1, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 fc79 	bl	8008ec4 <RCCEx_PLL3_Config>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075d8:	e004      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075e0:	e000      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80075e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075ec:	4b6e      	ldr	r3, [pc, #440]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f0:	f023 0107 	bic.w	r1, r3, #7
 80075f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075fa:	4a6b      	ldr	r2, [pc, #428]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007600:	e003      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007602:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007606:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007616:	f04f 0b00 	mov.w	fp, #0
 800761a:	ea5a 030b 	orrs.w	r3, sl, fp
 800761e:	d05b      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007624:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007628:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800762c:	d03b      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800762e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007632:	d834      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007634:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007638:	d037      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800763a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800763e:	d82e      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007640:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007644:	d033      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007646:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800764a:	d828      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800764c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007650:	d01a      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007656:	d822      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800765c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007660:	d007      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007662:	e01c      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007664:	4b50      	ldr	r3, [pc, #320]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	4a4f      	ldr	r2, [pc, #316]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800766a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800766e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007670:	e01e      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007676:	3308      	adds	r3, #8
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f001 fb70 	bl	8008d60 <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007686:	e013      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768c:	3328      	adds	r3, #40	@ 0x28
 800768e:	2100      	movs	r1, #0
 8007690:	4618      	mov	r0, r3
 8007692:	f001 fc17 	bl	8008ec4 <RCCEx_PLL3_Config>
 8007696:	4603      	mov	r3, r0
 8007698:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800769c:	e008      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076a4:	e004      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80076a6:	bf00      	nop
 80076a8:	e002      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80076aa:	bf00      	nop
 80076ac:	e000      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80076ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10b      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80076b8:	4b3b      	ldr	r3, [pc, #236]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076bc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80076c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076c8:	4a37      	ldr	r2, [pc, #220]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076ca:	430b      	orrs	r3, r1
 80076cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80076ce:	e003      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80076d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80076e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076e8:	2300      	movs	r3, #0
 80076ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80076ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80076f2:	460b      	mov	r3, r1
 80076f4:	4313      	orrs	r3, r2
 80076f6:	d05d      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80076f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007700:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007704:	d03b      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007706:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800770a:	d834      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800770c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007710:	d037      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007712:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007716:	d82e      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007718:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800771c:	d033      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800771e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007722:	d828      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007724:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007728:	d01a      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800772a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800772e:	d822      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007738:	d007      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800773a:	e01c      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773c:	4b1a      	ldr	r3, [pc, #104]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800773e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007740:	4a19      	ldr	r2, [pc, #100]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007748:	e01e      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800774a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774e:	3308      	adds	r3, #8
 8007750:	2100      	movs	r1, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f001 fb04 	bl	8008d60 <RCCEx_PLL2_Config>
 8007758:	4603      	mov	r3, r0
 800775a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800775e:	e013      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007764:	3328      	adds	r3, #40	@ 0x28
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f001 fbab 	bl	8008ec4 <RCCEx_PLL3_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007774:	e008      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800777c:	e004      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800777e:	bf00      	nop
 8007780:	e002      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007782:	bf00      	nop
 8007784:	e000      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007788:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10d      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007790:	4b05      	ldr	r3, [pc, #20]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007794:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077a0:	4a01      	ldr	r2, [pc, #4]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077a2:	430b      	orrs	r3, r1
 80077a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80077a6:	e005      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80077a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80077c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80077ca:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4313      	orrs	r3, r2
 80077d2:	d03a      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077da:	2b30      	cmp	r3, #48	@ 0x30
 80077dc:	d01f      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80077de:	2b30      	cmp	r3, #48	@ 0x30
 80077e0:	d819      	bhi.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d00c      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d815      	bhi.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d019      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80077ee:	2b10      	cmp	r3, #16
 80077f0:	d111      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f2:	4baa      	ldr	r3, [pc, #680]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f6:	4aa9      	ldr	r2, [pc, #676]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80077fe:	e011      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007804:	3308      	adds	r3, #8
 8007806:	2102      	movs	r1, #2
 8007808:	4618      	mov	r0, r3
 800780a:	f001 faa9 	bl	8008d60 <RCCEx_PLL2_Config>
 800780e:	4603      	mov	r3, r0
 8007810:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007814:	e006      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800781c:	e002      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800781e:	bf00      	nop
 8007820:	e000      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10a      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800782c:	4b9b      	ldr	r3, [pc, #620]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800782e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007830:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800783a:	4a98      	ldr	r2, [pc, #608]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800783c:	430b      	orrs	r3, r1
 800783e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007840:	e003      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007842:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007846:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800784a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800785a:	2300      	movs	r3, #0
 800785c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007860:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007864:	460b      	mov	r3, r1
 8007866:	4313      	orrs	r3, r2
 8007868:	d051      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800786a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007874:	d035      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007876:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800787a:	d82e      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x436>
 800787c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007880:	d031      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007882:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007886:	d828      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800788c:	d01a      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800788e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007892:	d822      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789c:	d007      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800789e:	e01c      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a0:	4b7e      	ldr	r3, [pc, #504]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a4:	4a7d      	ldr	r2, [pc, #500]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80078ac:	e01c      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	3308      	adds	r3, #8
 80078b4:	2100      	movs	r1, #0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 fa52 	bl	8008d60 <RCCEx_PLL2_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80078c2:	e011      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	3328      	adds	r3, #40	@ 0x28
 80078ca:	2100      	movs	r1, #0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 faf9 	bl	8008ec4 <RCCEx_PLL3_Config>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80078d8:	e006      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078e0:	e002      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80078e2:	bf00      	nop
 80078e4:	e000      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80078e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10a      	bne.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80078f0:	4b6a      	ldr	r3, [pc, #424]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80078f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078fe:	4a67      	ldr	r2, [pc, #412]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007900:	430b      	orrs	r3, r1
 8007902:	6513      	str	r3, [r2, #80]	@ 0x50
 8007904:	e003      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800790a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800791a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800791e:	2300      	movs	r3, #0
 8007920:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007924:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007928:	460b      	mov	r3, r1
 800792a:	4313      	orrs	r3, r2
 800792c:	d053      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800792e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007938:	d033      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800793a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800793e:	d82c      	bhi.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007940:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007944:	d02f      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007946:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800794a:	d826      	bhi.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800794c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007950:	d02b      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007952:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007956:	d820      	bhi.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800795c:	d012      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800795e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007962:	d81a      	bhi.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007964:	2b00      	cmp	r3, #0
 8007966:	d022      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800796c:	d115      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800796e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007972:	3308      	adds	r3, #8
 8007974:	2101      	movs	r1, #1
 8007976:	4618      	mov	r0, r3
 8007978:	f001 f9f2 	bl	8008d60 <RCCEx_PLL2_Config>
 800797c:	4603      	mov	r3, r0
 800797e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007982:	e015      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007988:	3328      	adds	r3, #40	@ 0x28
 800798a:	2101      	movs	r1, #1
 800798c:	4618      	mov	r0, r3
 800798e:	f001 fa99 	bl	8008ec4 <RCCEx_PLL3_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007998:	e00a      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079a0:	e006      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80079a2:	bf00      	nop
 80079a4:	e004      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80079a6:	bf00      	nop
 80079a8:	e002      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80079aa:	bf00      	nop
 80079ac:	e000      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80079ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80079b8:	4b38      	ldr	r3, [pc, #224]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80079c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079c6:	4a35      	ldr	r2, [pc, #212]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079c8:	430b      	orrs	r3, r1
 80079ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80079cc:	e003      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80079e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079e6:	2300      	movs	r3, #0
 80079e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079f0:	460b      	mov	r3, r1
 80079f2:	4313      	orrs	r3, r2
 80079f4:	d058      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80079f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80079fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a02:	d033      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a08:	d82c      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a0e:	d02f      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a14:	d826      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a1a:	d02b      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007a1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a20:	d820      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a26:	d012      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a2c:	d81a      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d022      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007a32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a36:	d115      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	2101      	movs	r1, #1
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 f98d 	bl	8008d60 <RCCEx_PLL2_Config>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a4c:	e015      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	3328      	adds	r3, #40	@ 0x28
 8007a54:	2101      	movs	r1, #1
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 fa34 	bl	8008ec4 <RCCEx_PLL3_Config>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a62:	e00a      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a6a:	e006      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007a6c:	bf00      	nop
 8007a6e:	e004      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007a70:	bf00      	nop
 8007a72:	e002      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007a74:	bf00      	nop
 8007a76:	e000      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10e      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007a82:	4b06      	ldr	r3, [pc, #24]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a92:	4a02      	ldr	r2, [pc, #8]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a94:	430b      	orrs	r3, r1
 8007a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a98:	e006      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007a9a:	bf00      	nop
 8007a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007abe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	d037      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ad2:	d00e      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007ad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ad8:	d816      	bhi.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d018      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007ade:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ae2:	d111      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae4:	4bc4      	ldr	r3, [pc, #784]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	4ac3      	ldr	r2, [pc, #780]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007af0:	e00f      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	3308      	adds	r3, #8
 8007af8:	2101      	movs	r1, #1
 8007afa:	4618      	mov	r0, r3
 8007afc:	f001 f930 	bl	8008d60 <RCCEx_PLL2_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b06:	e004      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b0e:	e000      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b1a:	4bb7      	ldr	r3, [pc, #732]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b28:	4ab3      	ldr	r2, [pc, #716]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b2e:	e003      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007b44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007b52:	460b      	mov	r3, r1
 8007b54:	4313      	orrs	r3, r2
 8007b56:	d039      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d81c      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007b62:	a201      	add	r2, pc, #4	@ (adr r2, 8007b68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007ba5 	.word	0x08007ba5
 8007b6c:	08007b79 	.word	0x08007b79
 8007b70:	08007b87 	.word	0x08007b87
 8007b74:	08007ba5 	.word	0x08007ba5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b78:	4b9f      	ldr	r3, [pc, #636]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	4a9e      	ldr	r2, [pc, #632]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b84:	e00f      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	2102      	movs	r1, #2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 f8e6 	bl	8008d60 <RCCEx_PLL2_Config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b9a:	e004      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ba2:	e000      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007bae:	4b92      	ldr	r3, [pc, #584]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bb2:	f023 0103 	bic.w	r1, r3, #3
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bbc:	4a8e      	ldr	r2, [pc, #568]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007bc2:	e003      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007be2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4313      	orrs	r3, r2
 8007bea:	f000 8099 	beq.w	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bee:	4b83      	ldr	r3, [pc, #524]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a82      	ldr	r2, [pc, #520]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bfa:	f7fb fadb 	bl	80031b4 <HAL_GetTick>
 8007bfe:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c02:	e00b      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c04:	f7fb fad6 	bl	80031b4 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b64      	cmp	r3, #100	@ 0x64
 8007c12:	d903      	bls.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c1a:	e005      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c1c:	4b77      	ldr	r3, [pc, #476]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0ed      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007c28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d173      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c30:	4b71      	ldr	r3, [pc, #452]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c3c:	4053      	eors	r3, r2
 8007c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d015      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c46:	4b6c      	ldr	r3, [pc, #432]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c52:	4b69      	ldr	r3, [pc, #420]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c56:	4a68      	ldr	r2, [pc, #416]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c5e:	4b66      	ldr	r3, [pc, #408]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c62:	4a65      	ldr	r2, [pc, #404]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007c6a:	4a63      	ldr	r2, [pc, #396]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c7e:	d118      	bne.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c80:	f7fb fa98 	bl	80031b4 <HAL_GetTick>
 8007c84:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c88:	e00d      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c8a:	f7fb fa93 	bl	80031b4 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007c94:	1ad2      	subs	r2, r2, r3
 8007c96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d903      	bls.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007ca4:	e005      	b.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ca6:	4b54      	ldr	r3, [pc, #336]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0eb      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d129      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cca:	d10e      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007cdc:	091a      	lsrs	r2, r3, #4
 8007cde:	4b48      	ldr	r3, [pc, #288]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	4a45      	ldr	r2, [pc, #276]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ce4:	430b      	orrs	r3, r1
 8007ce6:	6113      	str	r3, [r2, #16]
 8007ce8:	e005      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007cea:	4b43      	ldr	r3, [pc, #268]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	4a42      	ldr	r2, [pc, #264]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cf0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007cf4:	6113      	str	r3, [r2, #16]
 8007cf6:	4b40      	ldr	r3, [pc, #256]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cf8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d06:	4a3c      	ldr	r2, [pc, #240]	@ (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d0c:	e008      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007d16:	e003      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f002 0301 	and.w	r3, r2, #1
 8007d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d30:	2300      	movs	r3, #0
 8007d32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	f000 808f 	beq.w	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d48:	2b28      	cmp	r3, #40	@ 0x28
 8007d4a:	d871      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d52:	bf00      	nop
 8007d54:	08007e39 	.word	0x08007e39
 8007d58:	08007e31 	.word	0x08007e31
 8007d5c:	08007e31 	.word	0x08007e31
 8007d60:	08007e31 	.word	0x08007e31
 8007d64:	08007e31 	.word	0x08007e31
 8007d68:	08007e31 	.word	0x08007e31
 8007d6c:	08007e31 	.word	0x08007e31
 8007d70:	08007e31 	.word	0x08007e31
 8007d74:	08007e05 	.word	0x08007e05
 8007d78:	08007e31 	.word	0x08007e31
 8007d7c:	08007e31 	.word	0x08007e31
 8007d80:	08007e31 	.word	0x08007e31
 8007d84:	08007e31 	.word	0x08007e31
 8007d88:	08007e31 	.word	0x08007e31
 8007d8c:	08007e31 	.word	0x08007e31
 8007d90:	08007e31 	.word	0x08007e31
 8007d94:	08007e1b 	.word	0x08007e1b
 8007d98:	08007e31 	.word	0x08007e31
 8007d9c:	08007e31 	.word	0x08007e31
 8007da0:	08007e31 	.word	0x08007e31
 8007da4:	08007e31 	.word	0x08007e31
 8007da8:	08007e31 	.word	0x08007e31
 8007dac:	08007e31 	.word	0x08007e31
 8007db0:	08007e31 	.word	0x08007e31
 8007db4:	08007e39 	.word	0x08007e39
 8007db8:	08007e31 	.word	0x08007e31
 8007dbc:	08007e31 	.word	0x08007e31
 8007dc0:	08007e31 	.word	0x08007e31
 8007dc4:	08007e31 	.word	0x08007e31
 8007dc8:	08007e31 	.word	0x08007e31
 8007dcc:	08007e31 	.word	0x08007e31
 8007dd0:	08007e31 	.word	0x08007e31
 8007dd4:	08007e39 	.word	0x08007e39
 8007dd8:	08007e31 	.word	0x08007e31
 8007ddc:	08007e31 	.word	0x08007e31
 8007de0:	08007e31 	.word	0x08007e31
 8007de4:	08007e31 	.word	0x08007e31
 8007de8:	08007e31 	.word	0x08007e31
 8007dec:	08007e31 	.word	0x08007e31
 8007df0:	08007e31 	.word	0x08007e31
 8007df4:	08007e39 	.word	0x08007e39
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	58024800 	.word	0x58024800
 8007e00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e08:	3308      	adds	r3, #8
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 ffa7 	bl	8008d60 <RCCEx_PLL2_Config>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e18:	e00f      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1e:	3328      	adds	r3, #40	@ 0x28
 8007e20:	2101      	movs	r1, #1
 8007e22:	4618      	mov	r0, r3
 8007e24:	f001 f84e 	bl	8008ec4 <RCCEx_PLL3_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e2e:	e004      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e36:	e000      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007e42:	4bbf      	ldr	r3, [pc, #764]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e50:	4abb      	ldr	r2, [pc, #748]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e52:	430b      	orrs	r3, r1
 8007e54:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e56:	e003      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f002 0302 	and.w	r3, r2, #2
 8007e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e70:	2300      	movs	r3, #0
 8007e72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	d041      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e86:	2b05      	cmp	r3, #5
 8007e88:	d824      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e90:	08007edd 	.word	0x08007edd
 8007e94:	08007ea9 	.word	0x08007ea9
 8007e98:	08007ebf 	.word	0x08007ebf
 8007e9c:	08007edd 	.word	0x08007edd
 8007ea0:	08007edd 	.word	0x08007edd
 8007ea4:	08007edd 	.word	0x08007edd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eac:	3308      	adds	r3, #8
 8007eae:	2101      	movs	r1, #1
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 ff55 	bl	8008d60 <RCCEx_PLL2_Config>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007ebc:	e00f      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec2:	3328      	adds	r3, #40	@ 0x28
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fffc 	bl	8008ec4 <RCCEx_PLL3_Config>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007ed2:	e004      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007eda:	e000      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ede:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10a      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ee6:	4b96      	ldr	r3, [pc, #600]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eea:	f023 0107 	bic.w	r1, r3, #7
 8007eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ef4:	4a92      	ldr	r2, [pc, #584]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007efa:	e003      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007efc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	f002 0304 	and.w	r3, r2, #4
 8007f10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f14:	2300      	movs	r3, #0
 8007f16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f1a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4313      	orrs	r3, r2
 8007f22:	d044      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f2c:	2b05      	cmp	r3, #5
 8007f2e:	d825      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007f30:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f85 	.word	0x08007f85
 8007f3c:	08007f51 	.word	0x08007f51
 8007f40:	08007f67 	.word	0x08007f67
 8007f44:	08007f85 	.word	0x08007f85
 8007f48:	08007f85 	.word	0x08007f85
 8007f4c:	08007f85 	.word	0x08007f85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f54:	3308      	adds	r3, #8
 8007f56:	2101      	movs	r1, #1
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 ff01 	bl	8008d60 <RCCEx_PLL2_Config>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007f64:	e00f      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6a:	3328      	adds	r3, #40	@ 0x28
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 ffa8 	bl	8008ec4 <RCCEx_PLL3_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007f7a:	e004      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f82:	e000      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10b      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f8e:	4b6c      	ldr	r3, [pc, #432]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f92:	f023 0107 	bic.w	r1, r3, #7
 8007f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f9e:	4a68      	ldr	r2, [pc, #416]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007fa0:	430b      	orrs	r3, r1
 8007fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fa4:	e003      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007faa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f002 0320 	and.w	r3, r2, #32
 8007fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fc4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	d055      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fda:	d033      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fe0:	d82c      	bhi.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe6:	d02f      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fec:	d826      	bhi.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007fee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ff2:	d02b      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007ff4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ff8:	d820      	bhi.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ffe:	d012      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008004:	d81a      	bhi.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d022      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800800a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800800e:	d115      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008014:	3308      	adds	r3, #8
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fea1 	bl	8008d60 <RCCEx_PLL2_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008024:	e015      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802a:	3328      	adds	r3, #40	@ 0x28
 800802c:	2102      	movs	r1, #2
 800802e:	4618      	mov	r0, r3
 8008030:	f000 ff48 	bl	8008ec4 <RCCEx_PLL3_Config>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800803a:	e00a      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008042:	e006      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008044:	bf00      	nop
 8008046:	e004      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008048:	bf00      	nop
 800804a:	e002      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800804c:	bf00      	nop
 800804e:	e000      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800805a:	4b39      	ldr	r3, [pc, #228]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800805c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800805e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800806a:	4a35      	ldr	r2, [pc, #212]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800806c:	430b      	orrs	r3, r1
 800806e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008070:	e003      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008072:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008076:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800807a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008086:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800808a:	2300      	movs	r3, #0
 800808c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008090:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008094:	460b      	mov	r3, r1
 8008096:	4313      	orrs	r3, r2
 8008098:	d058      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80080a6:	d033      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80080a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80080ac:	d82c      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80080ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080b2:	d02f      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80080b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080b8:	d826      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80080ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080be:	d02b      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80080c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080c4:	d820      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80080c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ca:	d012      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80080cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080d0:	d81a      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d022      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80080d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080da:	d115      	bne.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e0:	3308      	adds	r3, #8
 80080e2:	2100      	movs	r1, #0
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 fe3b 	bl	8008d60 <RCCEx_PLL2_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80080f0:	e015      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f6:	3328      	adds	r3, #40	@ 0x28
 80080f8:	2102      	movs	r1, #2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fee2 	bl	8008ec4 <RCCEx_PLL3_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008106:	e00a      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800810e:	e006      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008110:	bf00      	nop
 8008112:	e004      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008114:	bf00      	nop
 8008116:	e002      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008118:	bf00      	nop
 800811a:	e000      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800811c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800811e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10e      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008126:	4b06      	ldr	r3, [pc, #24]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800812a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800812e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008132:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008136:	4a02      	ldr	r2, [pc, #8]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008138:	430b      	orrs	r3, r1
 800813a:	6593      	str	r3, [r2, #88]	@ 0x58
 800813c:	e006      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800813e:	bf00      	nop
 8008140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008148:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800814c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008158:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800815c:	2300      	movs	r3, #0
 800815e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008162:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008166:	460b      	mov	r3, r1
 8008168:	4313      	orrs	r3, r2
 800816a:	d055      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800816c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008170:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008174:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008178:	d033      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800817a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800817e:	d82c      	bhi.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008184:	d02f      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800818a:	d826      	bhi.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800818c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008190:	d02b      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008192:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008196:	d820      	bhi.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800819c:	d012      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800819e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081a2:	d81a      	bhi.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d022      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80081a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ac:	d115      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b2:	3308      	adds	r3, #8
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 fdd2 	bl	8008d60 <RCCEx_PLL2_Config>
 80081bc:	4603      	mov	r3, r0
 80081be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80081c2:	e015      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c8:	3328      	adds	r3, #40	@ 0x28
 80081ca:	2102      	movs	r1, #2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 fe79 	bl	8008ec4 <RCCEx_PLL3_Config>
 80081d2:	4603      	mov	r3, r0
 80081d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80081d8:	e00a      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081e0:	e006      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80081e2:	bf00      	nop
 80081e4:	e004      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80081e6:	bf00      	nop
 80081e8:	e002      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80081ea:	bf00      	nop
 80081ec:	e000      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80081ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10b      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80081f8:	4ba0      	ldr	r3, [pc, #640]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008204:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008208:	4a9c      	ldr	r2, [pc, #624]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800820a:	430b      	orrs	r3, r1
 800820c:	6593      	str	r3, [r2, #88]	@ 0x58
 800820e:	e003      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008214:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f002 0308 	and.w	r3, r2, #8
 8008224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008228:	2300      	movs	r3, #0
 800822a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800822e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008232:	460b      	mov	r3, r1
 8008234:	4313      	orrs	r3, r2
 8008236:	d01e      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008244:	d10c      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824a:	3328      	adds	r3, #40	@ 0x28
 800824c:	2102      	movs	r1, #2
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fe38 	bl	8008ec4 <RCCEx_PLL3_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008260:	4b86      	ldr	r3, [pc, #536]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008264:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008270:	4a82      	ldr	r2, [pc, #520]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008272:	430b      	orrs	r3, r1
 8008274:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	f002 0310 	and.w	r3, r2, #16
 8008282:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008286:	2300      	movs	r3, #0
 8008288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800828c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008290:	460b      	mov	r3, r1
 8008292:	4313      	orrs	r3, r2
 8008294:	d01e      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800829a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800829e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082a2:	d10c      	bne.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a8:	3328      	adds	r3, #40	@ 0x28
 80082aa:	2102      	movs	r1, #2
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fe09 	bl	8008ec4 <RCCEx_PLL3_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082be:	4b6f      	ldr	r3, [pc, #444]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80082c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082ce:	4a6b      	ldr	r2, [pc, #428]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082d0:	430b      	orrs	r3, r1
 80082d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80082e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082e2:	2300      	movs	r3, #0
 80082e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082e6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80082ea:	460b      	mov	r3, r1
 80082ec:	4313      	orrs	r3, r2
 80082ee:	d03e      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80082f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80082f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082fc:	d022      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80082fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008302:	d81b      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800830c:	d00b      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800830e:	e015      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008314:	3308      	adds	r3, #8
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fd21 	bl	8008d60 <RCCEx_PLL2_Config>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008324:	e00f      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832a:	3328      	adds	r3, #40	@ 0x28
 800832c:	2102      	movs	r1, #2
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fdc8 	bl	8008ec4 <RCCEx_PLL3_Config>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800833a:	e004      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008342:	e000      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008346:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10b      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800834e:	4b4b      	ldr	r3, [pc, #300]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008352:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800835e:	4a47      	ldr	r2, [pc, #284]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008360:	430b      	orrs	r3, r1
 8008362:	6593      	str	r3, [r2, #88]	@ 0x58
 8008364:	e003      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800836a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800836e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800837a:	673b      	str	r3, [r7, #112]	@ 0x70
 800837c:	2300      	movs	r3, #0
 800837e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008380:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008384:	460b      	mov	r3, r1
 8008386:	4313      	orrs	r3, r2
 8008388:	d03b      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800838a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800838e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008392:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008396:	d01f      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008398:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800839c:	d818      	bhi.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800839e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083a2:	d003      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80083a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083a8:	d007      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80083aa:	e011      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ac:	4b33      	ldr	r3, [pc, #204]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b0:	4a32      	ldr	r2, [pc, #200]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80083b8:	e00f      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083be:	3328      	adds	r3, #40	@ 0x28
 80083c0:	2101      	movs	r1, #1
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fd7e 	bl	8008ec4 <RCCEx_PLL3_Config>
 80083c8:	4603      	mov	r3, r0
 80083ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80083ce:	e004      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083d6:	e000      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80083d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10b      	bne.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083e2:	4b26      	ldr	r3, [pc, #152]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80083ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083f2:	4a22      	ldr	r2, [pc, #136]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083f4:	430b      	orrs	r3, r1
 80083f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80083f8:	e003      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800840e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008410:	2300      	movs	r3, #0
 8008412:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008414:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008418:	460b      	mov	r3, r1
 800841a:	4313      	orrs	r3, r2
 800841c:	d034      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800841e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800842c:	d007      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800842e:	e011      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008430:	4b12      	ldr	r3, [pc, #72]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008434:	4a11      	ldr	r2, [pc, #68]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800843a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800843c:	e00e      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800843e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008442:	3308      	adds	r3, #8
 8008444:	2102      	movs	r1, #2
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fc8a 	bl	8008d60 <RCCEx_PLL2_Config>
 800844c:	4603      	mov	r3, r0
 800844e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008452:	e003      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800845a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10d      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008464:	4b05      	ldr	r3, [pc, #20]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008468:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800846c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008472:	4a02      	ldr	r2, [pc, #8]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008474:	430b      	orrs	r3, r1
 8008476:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008478:	e006      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800847a:	bf00      	nop
 800847c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008484:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008494:	663b      	str	r3, [r7, #96]	@ 0x60
 8008496:	2300      	movs	r3, #0
 8008498:	667b      	str	r3, [r7, #100]	@ 0x64
 800849a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800849e:	460b      	mov	r3, r1
 80084a0:	4313      	orrs	r3, r2
 80084a2:	d00c      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80084a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a8:	3328      	adds	r3, #40	@ 0x28
 80084aa:	2102      	movs	r1, #2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fd09 	bl	8008ec4 <RCCEx_PLL3_Config>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80084be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80084ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084cc:	2300      	movs	r3, #0
 80084ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084d0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80084d4:	460b      	mov	r3, r1
 80084d6:	4313      	orrs	r3, r2
 80084d8:	d036      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80084da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084e4:	d018      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80084e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084ea:	d811      	bhi.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80084ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084f0:	d014      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80084f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084f6:	d80b      	bhi.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d011      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80084fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008500:	d106      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008502:	4bb7      	ldr	r3, [pc, #732]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008506:	4ab6      	ldr	r2, [pc, #728]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800850c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800850e:	e008      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008516:	e004      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008518:	bf00      	nop
 800851a:	e002      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800851c:	bf00      	nop
 800851e:	e000      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008522:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10a      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800852a:	4bad      	ldr	r3, [pc, #692]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800852c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800852e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008536:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008538:	4aa9      	ldr	r2, [pc, #676]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800853a:	430b      	orrs	r3, r1
 800853c:	6553      	str	r3, [r2, #84]	@ 0x54
 800853e:	e003      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008554:	653b      	str	r3, [r7, #80]	@ 0x50
 8008556:	2300      	movs	r3, #0
 8008558:	657b      	str	r3, [r7, #84]	@ 0x54
 800855a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800855e:	460b      	mov	r3, r1
 8008560:	4313      	orrs	r3, r2
 8008562:	d009      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008564:	4b9e      	ldr	r3, [pc, #632]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008568:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800856c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008572:	4a9b      	ldr	r2, [pc, #620]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008574:	430b      	orrs	r3, r1
 8008576:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008586:	2300      	movs	r3, #0
 8008588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800858a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800858e:	460b      	mov	r3, r1
 8008590:	4313      	orrs	r3, r2
 8008592:	d009      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008594:	4b92      	ldr	r3, [pc, #584]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008598:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800859c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085a2:	4a8f      	ldr	r2, [pc, #572]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085a4:	430b      	orrs	r3, r1
 80085a6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80085a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80085b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80085b6:	2300      	movs	r3, #0
 80085b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80085be:	460b      	mov	r3, r1
 80085c0:	4313      	orrs	r3, r2
 80085c2:	d00e      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085c4:	4b86      	ldr	r3, [pc, #536]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	4a85      	ldr	r2, [pc, #532]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085ce:	6113      	str	r3, [r2, #16]
 80085d0:	4b83      	ldr	r3, [pc, #524]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085d2:	6919      	ldr	r1, [r3, #16]
 80085d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085dc:	4a80      	ldr	r2, [pc, #512]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085de:	430b      	orrs	r3, r1
 80085e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80085e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80085ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085f0:	2300      	movs	r3, #0
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80085f8:	460b      	mov	r3, r1
 80085fa:	4313      	orrs	r3, r2
 80085fc:	d009      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80085fe:	4b78      	ldr	r3, [pc, #480]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008602:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800860c:	4a74      	ldr	r2, [pc, #464]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800860e:	430b      	orrs	r3, r1
 8008610:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800861e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008620:	2300      	movs	r3, #0
 8008622:	637b      	str	r3, [r7, #52]	@ 0x34
 8008624:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008628:	460b      	mov	r3, r1
 800862a:	4313      	orrs	r3, r2
 800862c:	d00a      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800862e:	4b6c      	ldr	r3, [pc, #432]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008632:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800863e:	4a68      	ldr	r2, [pc, #416]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008640:	430b      	orrs	r3, r1
 8008642:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	2100      	movs	r1, #0
 800864e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008656:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800865a:	460b      	mov	r3, r1
 800865c:	4313      	orrs	r3, r2
 800865e:	d011      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008664:	3308      	adds	r3, #8
 8008666:	2100      	movs	r1, #0
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fb79 	bl	8008d60 <RCCEx_PLL2_Config>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	2100      	movs	r1, #0
 800868e:	6239      	str	r1, [r7, #32]
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	627b      	str	r3, [r7, #36]	@ 0x24
 8008696:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800869a:	460b      	mov	r3, r1
 800869c:	4313      	orrs	r3, r2
 800869e:	d011      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a4:	3308      	adds	r3, #8
 80086a6:	2101      	movs	r1, #1
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fb59 	bl	8008d60 <RCCEx_PLL2_Config>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80086b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80086c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	2100      	movs	r1, #0
 80086ce:	61b9      	str	r1, [r7, #24]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	61fb      	str	r3, [r7, #28]
 80086d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80086da:	460b      	mov	r3, r1
 80086dc:	4313      	orrs	r3, r2
 80086de:	d011      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e4:	3308      	adds	r3, #8
 80086e6:	2102      	movs	r1, #2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fb39 	bl	8008d60 <RCCEx_PLL2_Config>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80086f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008700:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	2100      	movs	r1, #0
 800870e:	6139      	str	r1, [r7, #16]
 8008710:	f003 0308 	and.w	r3, r3, #8
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800871a:	460b      	mov	r3, r1
 800871c:	4313      	orrs	r3, r2
 800871e:	d011      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008724:	3328      	adds	r3, #40	@ 0x28
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fbcb 	bl	8008ec4 <RCCEx_PLL3_Config>
 800872e:	4603      	mov	r3, r0
 8008730:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800873c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	2100      	movs	r1, #0
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	f003 0310 	and.w	r3, r3, #16
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800875a:	460b      	mov	r3, r1
 800875c:	4313      	orrs	r3, r2
 800875e:	d011      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008764:	3328      	adds	r3, #40	@ 0x28
 8008766:	2101      	movs	r1, #1
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fbab 	bl	8008ec4 <RCCEx_PLL3_Config>
 800876e:	4603      	mov	r3, r0
 8008770:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800877c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008780:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	2100      	movs	r1, #0
 800878e:	6039      	str	r1, [r7, #0]
 8008790:	f003 0320 	and.w	r3, r3, #32
 8008794:	607b      	str	r3, [r7, #4]
 8008796:	e9d7 1200 	ldrd	r1, r2, [r7]
 800879a:	460b      	mov	r3, r1
 800879c:	4313      	orrs	r3, r2
 800879e:	d011      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a4:	3328      	adds	r3, #40	@ 0x28
 80087a6:	2102      	movs	r1, #2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 fb8b 	bl	8008ec4 <RCCEx_PLL3_Config>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80087b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80087c4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	e000      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80087d8:	46bd      	mov	sp, r7
 80087da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087de:	bf00      	nop
 80087e0:	58024400 	.word	0x58024400

080087e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087e8:	f7fe fe00 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 80087ec:	4602      	mov	r2, r0
 80087ee:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	091b      	lsrs	r3, r3, #4
 80087f4:	f003 0307 	and.w	r3, r3, #7
 80087f8:	4904      	ldr	r1, [pc, #16]	@ (800880c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087fa:	5ccb      	ldrb	r3, [r1, r3]
 80087fc:	f003 031f 	and.w	r3, r3, #31
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008804:	4618      	mov	r0, r3
 8008806:	bd80      	pop	{r7, pc}
 8008808:	58024400 	.word	0x58024400
 800880c:	0800ef70 	.word	0x0800ef70

08008810 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008810:	b480      	push	{r7}
 8008812:	b089      	sub	sp, #36	@ 0x24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008818:	4ba1      	ldr	r3, [pc, #644]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800881a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881c:	f003 0303 	and.w	r3, r3, #3
 8008820:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008822:	4b9f      	ldr	r3, [pc, #636]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008826:	0b1b      	lsrs	r3, r3, #12
 8008828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800882c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800882e:	4b9c      	ldr	r3, [pc, #624]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008832:	091b      	lsrs	r3, r3, #4
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800883a:	4b99      	ldr	r3, [pc, #612]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800883c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883e:	08db      	lsrs	r3, r3, #3
 8008840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8111 	beq.w	8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2b02      	cmp	r3, #2
 8008862:	f000 8083 	beq.w	800896c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b02      	cmp	r3, #2
 800886a:	f200 80a1 	bhi.w	80089b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d056      	beq.n	8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800887a:	e099      	b.n	80089b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800887c:	4b88      	ldr	r3, [pc, #544]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0320 	and.w	r3, r3, #32
 8008884:	2b00      	cmp	r3, #0
 8008886:	d02d      	beq.n	80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008888:	4b85      	ldr	r3, [pc, #532]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	08db      	lsrs	r3, r3, #3
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	4a84      	ldr	r2, [pc, #528]	@ (8008aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008894:	fa22 f303 	lsr.w	r3, r2, r3
 8008898:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b2:	4b7b      	ldr	r3, [pc, #492]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088e2:	e087      	b.n	80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008aac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f6:	4b6a      	ldr	r3, [pc, #424]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	ed97 6a03 	vldr	s12, [r7, #12]
 800890a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800890e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008926:	e065      	b.n	80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893a:	4b59      	ldr	r3, [pc, #356]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a03 	vldr	s12, [r7, #12]
 800894e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800896a:	e043      	b.n	80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008976:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800897a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897e:	4b48      	ldr	r3, [pc, #288]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008992:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ae:	e021      	b.n	80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c2:	4b37      	ldr	r3, [pc, #220]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80089f4:	4b2a      	ldr	r3, [pc, #168]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f8:	0a5b      	lsrs	r3, r3, #9
 80089fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a1a:	ee17 2a90 	vmov	r2, s15
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008a22:	4b1f      	ldr	r3, [pc, #124]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a48:	ee17 2a90 	vmov	r2, s15
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a50:	4b13      	ldr	r3, [pc, #76]	@ (8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a54:	0e1b      	lsrs	r3, r3, #24
 8008a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a76:	ee17 2a90 	vmov	r2, s15
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a7e:	e008      	b.n	8008a92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	609a      	str	r2, [r3, #8]
}
 8008a92:	bf00      	nop
 8008a94:	3724      	adds	r7, #36	@ 0x24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	58024400 	.word	0x58024400
 8008aa4:	03d09000 	.word	0x03d09000
 8008aa8:	46000000 	.word	0x46000000
 8008aac:	4c742400 	.word	0x4c742400
 8008ab0:	4a742400 	.word	0x4a742400
 8008ab4:	4bbebc20 	.word	0x4bbebc20

08008ab8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b089      	sub	sp, #36	@ 0x24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ac0:	4ba1      	ldr	r3, [pc, #644]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac4:	f003 0303 	and.w	r3, r3, #3
 8008ac8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008aca:	4b9f      	ldr	r3, [pc, #636]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ace:	0d1b      	lsrs	r3, r3, #20
 8008ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ad4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ad6:	4b9c      	ldr	r3, [pc, #624]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ada:	0a1b      	lsrs	r3, r3, #8
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ae2:	4b99      	ldr	r3, [pc, #612]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae6:	08db      	lsrs	r3, r3, #3
 8008ae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	fb02 f303 	mul.w	r3, r2, r3
 8008af2:	ee07 3a90 	vmov	s15, r3
 8008af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8111 	beq.w	8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	f000 8083 	beq.w	8008c14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	f200 80a1 	bhi.w	8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d056      	beq.n	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008b22:	e099      	b.n	8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b24:	4b88      	ldr	r3, [pc, #544]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0320 	and.w	r3, r3, #32
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d02d      	beq.n	8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b30:	4b85      	ldr	r3, [pc, #532]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	08db      	lsrs	r3, r3, #3
 8008b36:	f003 0303 	and.w	r3, r3, #3
 8008b3a:	4a84      	ldr	r2, [pc, #528]	@ (8008d4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	ee07 3a90 	vmov	s15, r3
 8008b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5a:	4b7b      	ldr	r3, [pc, #492]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b8a:	e087      	b.n	8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008d54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bce:	e065      	b.n	8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be2:	4b59      	ldr	r3, [pc, #356]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bf6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c12:	e043      	b.n	8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008d5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c26:	4b48      	ldr	r3, [pc, #288]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c56:	e021      	b.n	8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c6a:	4b37      	ldr	r3, [pc, #220]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca0:	0a5b      	lsrs	r3, r3, #9
 8008ca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cc2:	ee17 2a90 	vmov	r2, s15
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008cca:	4b1f      	ldr	r3, [pc, #124]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cce:	0c1b      	lsrs	r3, r3, #16
 8008cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cd4:	ee07 3a90 	vmov	s15, r3
 8008cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cf0:	ee17 2a90 	vmov	r2, s15
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008cf8:	4b13      	ldr	r3, [pc, #76]	@ (8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfc:	0e1b      	lsrs	r3, r3, #24
 8008cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d1e:	ee17 2a90 	vmov	r2, s15
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d26:	e008      	b.n	8008d3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	609a      	str	r2, [r3, #8]
}
 8008d3a:	bf00      	nop
 8008d3c:	3724      	adds	r7, #36	@ 0x24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	58024400 	.word	0x58024400
 8008d4c:	03d09000 	.word	0x03d09000
 8008d50:	46000000 	.word	0x46000000
 8008d54:	4c742400 	.word	0x4c742400
 8008d58:	4a742400 	.word	0x4a742400
 8008d5c:	4bbebc20 	.word	0x4bbebc20

08008d60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d6e:	4b53      	ldr	r3, [pc, #332]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d101      	bne.n	8008d7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e099      	b.n	8008eb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a4e      	ldr	r2, [pc, #312]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008d84:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d8a:	f7fa fa13 	bl	80031b4 <HAL_GetTick>
 8008d8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d90:	e008      	b.n	8008da4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d92:	f7fa fa0f 	bl	80031b4 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d901      	bls.n	8008da4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e086      	b.n	8008eb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008da4:	4b45      	ldr	r3, [pc, #276]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1f0      	bne.n	8008d92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008db0:	4b42      	ldr	r3, [pc, #264]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	031b      	lsls	r3, r3, #12
 8008dbe:	493f      	ldr	r1, [pc, #252]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	025b      	lsls	r3, r3, #9
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	041b      	lsls	r3, r3, #16
 8008de2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008de6:	431a      	orrs	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	061b      	lsls	r3, r3, #24
 8008df0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008df4:	4931      	ldr	r1, [pc, #196]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008dfa:	4b30      	ldr	r3, [pc, #192]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	492d      	ldr	r1, [pc, #180]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e10:	f023 0220 	bic.w	r2, r3, #32
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	4928      	ldr	r1, [pc, #160]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e1e:	4b27      	ldr	r3, [pc, #156]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e22:	4a26      	ldr	r2, [pc, #152]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e24:	f023 0310 	bic.w	r3, r3, #16
 8008e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e2a:	4b24      	ldr	r3, [pc, #144]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e2e:	4b24      	ldr	r3, [pc, #144]	@ (8008ec0 <RCCEx_PLL2_Config+0x160>)
 8008e30:	4013      	ands	r3, r2
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	69d2      	ldr	r2, [r2, #28]
 8008e36:	00d2      	lsls	r2, r2, #3
 8008e38:	4920      	ldr	r1, [pc, #128]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e42:	4a1e      	ldr	r2, [pc, #120]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e44:	f043 0310 	orr.w	r3, r3, #16
 8008e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d106      	bne.n	8008e5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e50:	4b1a      	ldr	r3, [pc, #104]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	4a19      	ldr	r2, [pc, #100]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e5c:	e00f      	b.n	8008e7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d106      	bne.n	8008e72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e64:	4b15      	ldr	r3, [pc, #84]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e68:	4a14      	ldr	r2, [pc, #80]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e70:	e005      	b.n	8008e7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e72:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e76:	4a11      	ldr	r2, [pc, #68]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a0e      	ldr	r2, [pc, #56]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008e84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e8a:	f7fa f993 	bl	80031b4 <HAL_GetTick>
 8008e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e90:	e008      	b.n	8008ea4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e92:	f7fa f98f 	bl	80031b4 <HAL_GetTick>
 8008e96:	4602      	mov	r2, r0
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d901      	bls.n	8008ea4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e006      	b.n	8008eb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ea4:	4b05      	ldr	r3, [pc, #20]	@ (8008ebc <RCCEx_PLL2_Config+0x15c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0f0      	beq.n	8008e92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	58024400 	.word	0x58024400
 8008ec0:	ffff0007 	.word	0xffff0007

08008ec4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ed2:	4b53      	ldr	r3, [pc, #332]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d101      	bne.n	8008ee2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e099      	b.n	8009016 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a4e      	ldr	r2, [pc, #312]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eee:	f7fa f961 	bl	80031b4 <HAL_GetTick>
 8008ef2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ef4:	e008      	b.n	8008f08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ef6:	f7fa f95d 	bl	80031b4 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e086      	b.n	8009016 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f08:	4b45      	ldr	r3, [pc, #276]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f0      	bne.n	8008ef6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f14:	4b42      	ldr	r3, [pc, #264]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f18:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	051b      	lsls	r3, r3, #20
 8008f22:	493f      	ldr	r1, [pc, #252]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	025b      	lsls	r3, r3, #9
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	041b      	lsls	r3, r3, #16
 8008f46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	061b      	lsls	r3, r3, #24
 8008f54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f58:	4931      	ldr	r1, [pc, #196]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f5e:	4b30      	ldr	r3, [pc, #192]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	492d      	ldr	r1, [pc, #180]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f70:	4b2b      	ldr	r3, [pc, #172]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f74:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	4928      	ldr	r1, [pc, #160]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f82:	4b27      	ldr	r3, [pc, #156]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f86:	4a26      	ldr	r2, [pc, #152]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f8e:	4b24      	ldr	r3, [pc, #144]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f92:	4b24      	ldr	r3, [pc, #144]	@ (8009024 <RCCEx_PLL3_Config+0x160>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	69d2      	ldr	r2, [r2, #28]
 8008f9a:	00d2      	lsls	r2, r2, #3
 8008f9c:	4920      	ldr	r1, [pc, #128]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d106      	bne.n	8008fc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb8:	4a19      	ldr	r2, [pc, #100]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008fba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fc0:	e00f      	b.n	8008fe2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d106      	bne.n	8008fd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008fc8:	4b15      	ldr	r3, [pc, #84]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fcc:	4a14      	ldr	r2, [pc, #80]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008fce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fd4:	e005      	b.n	8008fe2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008fd6:	4b12      	ldr	r3, [pc, #72]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fda:	4a11      	ldr	r2, [pc, #68]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008fdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 8008fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fee:	f7fa f8e1 	bl	80031b4 <HAL_GetTick>
 8008ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ff4:	e008      	b.n	8009008 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ff6:	f7fa f8dd 	bl	80031b4 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	2b02      	cmp	r3, #2
 8009002:	d901      	bls.n	8009008 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e006      	b.n	8009016 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009008:	4b05      	ldr	r3, [pc, #20]	@ (8009020 <RCCEx_PLL3_Config+0x15c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d0f0      	beq.n	8008ff6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	58024400 	.word	0x58024400
 8009024:	ffff0007 	.word	0xffff0007

08009028 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e10f      	b.n	800925a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a87      	ldr	r2, [pc, #540]	@ (8009264 <HAL_SPI_Init+0x23c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00f      	beq.n	800906a <HAL_SPI_Init+0x42>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a86      	ldr	r2, [pc, #536]	@ (8009268 <HAL_SPI_Init+0x240>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d00a      	beq.n	800906a <HAL_SPI_Init+0x42>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a84      	ldr	r2, [pc, #528]	@ (800926c <HAL_SPI_Init+0x244>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d005      	beq.n	800906a <HAL_SPI_Init+0x42>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	2b0f      	cmp	r3, #15
 8009064:	d901      	bls.n	800906a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e0f7      	b.n	800925a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f001 fbc8 	bl	800a800 <SPI_GetPacketSize>
 8009070:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a7b      	ldr	r2, [pc, #492]	@ (8009264 <HAL_SPI_Init+0x23c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00c      	beq.n	8009096 <HAL_SPI_Init+0x6e>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a79      	ldr	r2, [pc, #484]	@ (8009268 <HAL_SPI_Init+0x240>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d007      	beq.n	8009096 <HAL_SPI_Init+0x6e>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a78      	ldr	r2, [pc, #480]	@ (800926c <HAL_SPI_Init+0x244>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d002      	beq.n	8009096 <HAL_SPI_Init+0x6e>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b08      	cmp	r3, #8
 8009094:	d811      	bhi.n	80090ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800909a:	4a72      	ldr	r2, [pc, #456]	@ (8009264 <HAL_SPI_Init+0x23c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d009      	beq.n	80090b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a70      	ldr	r2, [pc, #448]	@ (8009268 <HAL_SPI_Init+0x240>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d004      	beq.n	80090b4 <HAL_SPI_Init+0x8c>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a6f      	ldr	r2, [pc, #444]	@ (800926c <HAL_SPI_Init+0x244>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d104      	bne.n	80090be <HAL_SPI_Init+0x96>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b10      	cmp	r3, #16
 80090b8:	d901      	bls.n	80090be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e0cd      	b.n	800925a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d106      	bne.n	80090d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7f9 fc38 	bl	8002948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2202      	movs	r2, #2
 80090dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0201 	bic.w	r2, r2, #1
 80090ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80090fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009104:	d119      	bne.n	800913a <HAL_SPI_Init+0x112>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800910e:	d103      	bne.n	8009118 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009114:	2b00      	cmp	r3, #0
 8009116:	d008      	beq.n	800912a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10c      	bne.n	800913a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009128:	d107      	bne.n	800913a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009138:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00f      	beq.n	8009166 <HAL_SPI_Init+0x13e>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	2b06      	cmp	r3, #6
 800914c:	d90b      	bls.n	8009166 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	430a      	orrs	r2, r1
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	e007      	b.n	8009176 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009174:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	69da      	ldr	r2, [r3, #28]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917e:	431a      	orrs	r2, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	431a      	orrs	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009188:	ea42 0103 	orr.w	r1, r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a0:	431a      	orrs	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a6:	431a      	orrs	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	431a      	orrs	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	431a      	orrs	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	431a      	orrs	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	431a      	orrs	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ca:	431a      	orrs	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	431a      	orrs	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091d6:	ea42 0103 	orr.w	r1, r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d113      	bne.n	8009216 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009200:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009214:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0201 	bic.w	r2, r2, #1
 8009224:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00a      	beq.n	8009248 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	40013000 	.word	0x40013000
 8009268:	40003800 	.word	0x40003800
 800926c:	40003c00 	.word	0x40003c00

08009270 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af02      	add	r7, sp, #8
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	4613      	mov	r3, r2
 800927e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3320      	adds	r3, #32
 8009286:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009288:	f7f9 ff94 	bl	80031b4 <HAL_GetTick>
 800928c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b01      	cmp	r3, #1
 8009298:	d001      	beq.n	800929e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800929a:	2302      	movs	r3, #2
 800929c:	e1d1      	b.n	8009642 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <HAL_SPI_Transmit+0x3a>
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e1c9      	b.n	8009642 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d101      	bne.n	80092bc <HAL_SPI_Transmit+0x4c>
 80092b8:	2302      	movs	r3, #2
 80092ba:	e1c2      	b.n	8009642 <HAL_SPI_Transmit+0x3d2>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2203      	movs	r2, #3
 80092c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	88fa      	ldrh	r2, [r7, #6]
 80092de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	88fa      	ldrh	r2, [r7, #6]
 80092e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009314:	d108      	bne.n	8009328 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	e009      	b.n	800933c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800933a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	4b96      	ldr	r3, [pc, #600]	@ (800959c <HAL_SPI_Transmit+0x32c>)
 8009344:	4013      	ands	r3, r2
 8009346:	88f9      	ldrh	r1, [r7, #6]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	6812      	ldr	r2, [r2, #0]
 800934c:	430b      	orrs	r3, r1
 800934e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f042 0201 	orr.w	r2, r2, #1
 800935e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009368:	d107      	bne.n	800937a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009378:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	2b0f      	cmp	r3, #15
 8009380:	d947      	bls.n	8009412 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009382:	e03f      	b.n	8009404 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b02      	cmp	r3, #2
 8009390:	d114      	bne.n	80093bc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6812      	ldr	r2, [r2, #0]
 800939c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093a2:	1d1a      	adds	r2, r3, #4
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80093ba:	e023      	b.n	8009404 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093bc:	f7f9 fefa 	bl	80031b4 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d803      	bhi.n	80093d4 <HAL_SPI_Transmit+0x164>
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093d2:	d102      	bne.n	80093da <HAL_SPI_Transmit+0x16a>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d114      	bne.n	8009404 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f001 f942 	bl	800a664 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e11e      	b.n	8009642 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800940a:	b29b      	uxth	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1b9      	bne.n	8009384 <HAL_SPI_Transmit+0x114>
 8009410:	e0f1      	b.n	80095f6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	2b07      	cmp	r3, #7
 8009418:	f240 80e6 	bls.w	80095e8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800941c:	e05d      	b.n	80094da <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	f003 0302 	and.w	r3, r3, #2
 8009428:	2b02      	cmp	r3, #2
 800942a:	d132      	bne.n	8009492 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009432:	b29b      	uxth	r3, r3
 8009434:	2b01      	cmp	r3, #1
 8009436:	d918      	bls.n	800946a <HAL_SPI_Transmit+0x1fa>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d014      	beq.n	800946a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6812      	ldr	r2, [r2, #0]
 800944a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009450:	1d1a      	adds	r2, r3, #4
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800945c:	b29b      	uxth	r3, r3
 800945e:	3b02      	subs	r3, #2
 8009460:	b29a      	uxth	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009468:	e037      	b.n	80094da <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800946e:	881a      	ldrh	r2, [r3, #0]
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009478:	1c9a      	adds	r2, r3, #2
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009484:	b29b      	uxth	r3, r3
 8009486:	3b01      	subs	r3, #1
 8009488:	b29a      	uxth	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009490:	e023      	b.n	80094da <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009492:	f7f9 fe8f 	bl	80031b4 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d803      	bhi.n	80094aa <HAL_SPI_Transmit+0x23a>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094a8:	d102      	bne.n	80094b0 <HAL_SPI_Transmit+0x240>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d114      	bne.n	80094da <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f001 f8d7 	bl	800a664 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e0b3      	b.n	8009642 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d19b      	bne.n	800941e <HAL_SPI_Transmit+0x1ae>
 80094e6:	e086      	b.n	80095f6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d154      	bne.n	80095a0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d918      	bls.n	8009534 <HAL_SPI_Transmit+0x2c4>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009506:	2b40      	cmp	r3, #64	@ 0x40
 8009508:	d914      	bls.n	8009534 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800951a:	1d1a      	adds	r2, r3, #4
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009526:	b29b      	uxth	r3, r3
 8009528:	3b04      	subs	r3, #4
 800952a:	b29a      	uxth	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009532:	e059      	b.n	80095e8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800953a:	b29b      	uxth	r3, r3
 800953c:	2b01      	cmp	r3, #1
 800953e:	d917      	bls.n	8009570 <HAL_SPI_Transmit+0x300>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d013      	beq.n	8009570 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800954c:	881a      	ldrh	r2, [r3, #0]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009556:	1c9a      	adds	r2, r3, #2
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009562:	b29b      	uxth	r3, r3
 8009564:	3b02      	subs	r3, #2
 8009566:	b29a      	uxth	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800956e:	e03b      	b.n	80095e8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3320      	adds	r3, #32
 800957a:	7812      	ldrb	r2, [r2, #0]
 800957c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800958e:	b29b      	uxth	r3, r3
 8009590:	3b01      	subs	r3, #1
 8009592:	b29a      	uxth	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800959a:	e025      	b.n	80095e8 <HAL_SPI_Transmit+0x378>
 800959c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095a0:	f7f9 fe08 	bl	80031b4 <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d803      	bhi.n	80095b8 <HAL_SPI_Transmit+0x348>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095b6:	d102      	bne.n	80095be <HAL_SPI_Transmit+0x34e>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d114      	bne.n	80095e8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f001 f850 	bl	800a664 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e02c      	b.n	8009642 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f47f af79 	bne.w	80094e8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2200      	movs	r2, #0
 80095fe:	2108      	movs	r1, #8
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f001 f8cf 	bl	800a7a4 <SPI_WaitOnFlagUntilTimeout>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d007      	beq.n	800961c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009612:	f043 0220 	orr.w	r2, r3, #32
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f001 f821 	bl	800a664 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e000      	b.n	8009642 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009640:	2300      	movs	r3, #0
  }
}
 8009642:	4618      	mov	r0, r3
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop

0800964c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	603b      	str	r3, [r7, #0]
 8009658:	4613      	mov	r3, r2
 800965a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009660:	095b      	lsrs	r3, r3, #5
 8009662:	b29b      	uxth	r3, r3
 8009664:	3301      	adds	r3, #1
 8009666:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3330      	adds	r3, #48	@ 0x30
 800966e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009670:	f7f9 fda0 	bl	80031b4 <HAL_GetTick>
 8009674:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b01      	cmp	r3, #1
 8009680:	d001      	beq.n	8009686 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8009682:	2302      	movs	r3, #2
 8009684:	e250      	b.n	8009b28 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <HAL_SPI_Receive+0x46>
 800968c:	88fb      	ldrh	r3, [r7, #6]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e248      	b.n	8009b28 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800969c:	2b01      	cmp	r3, #1
 800969e:	d101      	bne.n	80096a4 <HAL_SPI_Receive+0x58>
 80096a0:	2302      	movs	r3, #2
 80096a2:	e241      	b.n	8009b28 <HAL_SPI_Receive+0x4dc>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2204      	movs	r2, #4
 80096b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	88fa      	ldrh	r2, [r7, #6]
 80096c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	88fa      	ldrh	r2, [r7, #6]
 80096ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80096fc:	d108      	bne.n	8009710 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	e009      	b.n	8009724 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009722:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	4b95      	ldr	r3, [pc, #596]	@ (8009980 <HAL_SPI_Receive+0x334>)
 800972c:	4013      	ands	r3, r2
 800972e:	88f9      	ldrh	r1, [r7, #6]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	6812      	ldr	r2, [r2, #0]
 8009734:	430b      	orrs	r3, r1
 8009736:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 0201 	orr.w	r2, r2, #1
 8009746:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009750:	d107      	bne.n	8009762 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009760:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	2b0f      	cmp	r3, #15
 8009768:	d96c      	bls.n	8009844 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800976a:	e064      	b.n	8009836 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b01      	cmp	r3, #1
 8009780:	d114      	bne.n	80097ac <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800978a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800978c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009792:	1d1a      	adds	r2, r3, #4
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800979e:	b29b      	uxth	r3, r3
 80097a0:	3b01      	subs	r3, #1
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80097aa:	e044      	b.n	8009836 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	8bfa      	ldrh	r2, [r7, #30]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d919      	bls.n	80097ee <HAL_SPI_Receive+0x1a2>
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d014      	beq.n	80097ee <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80097ce:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097d4:	1d1a      	adds	r2, r3, #4
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	3b01      	subs	r3, #1
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80097ec:	e023      	b.n	8009836 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097ee:	f7f9 fce1 	bl	80031b4 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d803      	bhi.n	8009806 <HAL_SPI_Receive+0x1ba>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009804:	d102      	bne.n	800980c <HAL_SPI_Receive+0x1c0>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d114      	bne.n	8009836 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 ff29 	bl	800a664 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009818:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e178      	b.n	8009b28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800983c:	b29b      	uxth	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d194      	bne.n	800976c <HAL_SPI_Receive+0x120>
 8009842:	e15e      	b.n	8009b02 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	2b07      	cmp	r3, #7
 800984a:	f240 8153 	bls.w	8009af4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800984e:	e08f      	b.n	8009970 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b01      	cmp	r3, #1
 8009864:	d114      	bne.n	8009890 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800986a:	69ba      	ldr	r2, [r7, #24]
 800986c:	8812      	ldrh	r2, [r2, #0]
 800986e:	b292      	uxth	r2, r2
 8009870:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009876:	1c9a      	adds	r2, r3, #2
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009882:	b29b      	uxth	r3, r3
 8009884:	3b01      	subs	r3, #1
 8009886:	b29a      	uxth	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800988e:	e06f      	b.n	8009970 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009896:	b29b      	uxth	r3, r3
 8009898:	8bfa      	ldrh	r2, [r7, #30]
 800989a:	429a      	cmp	r2, r3
 800989c:	d924      	bls.n	80098e8 <HAL_SPI_Receive+0x29c>
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01f      	beq.n	80098e8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	8812      	ldrh	r2, [r2, #0]
 80098b0:	b292      	uxth	r2, r2
 80098b2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098b8:	1c9a      	adds	r2, r3, #2
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	8812      	ldrh	r2, [r2, #0]
 80098c6:	b292      	uxth	r2, r2
 80098c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ce:	1c9a      	adds	r2, r3, #2
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098da:	b29b      	uxth	r3, r3
 80098dc:	3b02      	subs	r3, #2
 80098de:	b29a      	uxth	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80098e6:	e043      	b.n	8009970 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d119      	bne.n	8009928 <HAL_SPI_Receive+0x2dc>
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d014      	beq.n	8009928 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	8812      	ldrh	r2, [r2, #0]
 8009906:	b292      	uxth	r2, r2
 8009908:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800990e:	1c9a      	adds	r2, r3, #2
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800991a:	b29b      	uxth	r3, r3
 800991c:	3b01      	subs	r3, #1
 800991e:	b29a      	uxth	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009926:	e023      	b.n	8009970 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009928:	f7f9 fc44 	bl	80031b4 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	429a      	cmp	r2, r3
 8009936:	d803      	bhi.n	8009940 <HAL_SPI_Receive+0x2f4>
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800993e:	d102      	bne.n	8009946 <HAL_SPI_Receive+0x2fa>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d114      	bne.n	8009970 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 fe8c 	bl	800a664 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009952:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e0db      	b.n	8009b28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009976:	b29b      	uxth	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	f47f af69 	bne.w	8009850 <HAL_SPI_Receive+0x204>
 800997e:	e0c0      	b.n	8009b02 <HAL_SPI_Receive+0x4b6>
 8009980:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b01      	cmp	r3, #1
 8009998:	d117      	bne.n	80099ca <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099a6:	7812      	ldrb	r2, [r2, #0]
 80099a8:	b2d2      	uxtb	r2, r2
 80099aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099bc:	b29b      	uxth	r3, r3
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80099c8:	e094      	b.n	8009af4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	8bfa      	ldrh	r2, [r7, #30]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d946      	bls.n	8009a66 <HAL_SPI_Receive+0x41a>
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d041      	beq.n	8009a66 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099ee:	7812      	ldrb	r2, [r2, #0]
 80099f0:	b2d2      	uxtb	r2, r2
 80099f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a0a:	7812      	ldrb	r2, [r2, #0]
 8009a0c:	b2d2      	uxtb	r2, r2
 8009a0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a14:	1c5a      	adds	r2, r3, #1
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a26:	7812      	ldrb	r2, [r2, #0]
 8009a28:	b2d2      	uxtb	r2, r2
 8009a2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a42:	7812      	ldrb	r2, [r2, #0]
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	3b04      	subs	r3, #4
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009a64:	e046      	b.n	8009af4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d81c      	bhi.n	8009aac <HAL_SPI_Receive+0x460>
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d017      	beq.n	8009aac <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a88:	7812      	ldrb	r2, [r2, #0]
 8009a8a:	b2d2      	uxtb	r2, r2
 8009a8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a92:	1c5a      	adds	r2, r3, #1
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009aaa:	e023      	b.n	8009af4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009aac:	f7f9 fb82 	bl	80031b4 <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d803      	bhi.n	8009ac4 <HAL_SPI_Receive+0x478>
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ac2:	d102      	bne.n	8009aca <HAL_SPI_Receive+0x47e>
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d114      	bne.n	8009af4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 fdca 	bl	800a664 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ad6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e019      	b.n	8009b28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f47f af41 	bne.w	8009984 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 fdae 	bl	800a664 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d001      	beq.n	8009b26 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e000      	b.n	8009b28 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8009b26:	2300      	movs	r3, #0
  }
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3720      	adds	r7, #32
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d001      	beq.n	8009b4e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e126      	b.n	8009d9c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <HAL_SPI_Transmit_DMA+0x2a>
 8009b54:	88fb      	ldrh	r3, [r7, #6]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d101      	bne.n	8009b5e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e11e      	b.n	8009d9c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d101      	bne.n	8009b6c <HAL_SPI_Transmit_DMA+0x3c>
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e117      	b.n	8009d9c <HAL_SPI_Transmit_DMA+0x26c>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2203      	movs	r2, #3
 8009b78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	88fa      	ldrh	r2, [r7, #6]
 8009b8e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	88fa      	ldrh	r2, [r7, #6]
 8009b96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009bc4:	d108      	bne.n	8009bd8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	e009      	b.n	8009bec <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009bea:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	2b0f      	cmp	r3, #15
 8009bf2:	d905      	bls.n	8009c00 <HAL_SPI_Transmit_DMA+0xd0>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bfe:	d10f      	bne.n	8009c20 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009c04:	2b07      	cmp	r3, #7
 8009c06:	d911      	bls.n	8009c2c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c12:	d00b      	beq.n	8009c2c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c18:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c1e:	d005      	beq.n	8009c2c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e0b7      	b.n	8009d9c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	2b07      	cmp	r3, #7
 8009c32:	d820      	bhi.n	8009c76 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c3e:	d109      	bne.n	8009c54 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	3301      	adds	r3, #1
 8009c4a:	105b      	asrs	r3, r3, #1
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c5e:	d11e      	bne.n	8009c9e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	3303      	adds	r3, #3
 8009c6a:	109b      	asrs	r3, r3, #2
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c74:	e013      	b.n	8009c9e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	2b0f      	cmp	r3, #15
 8009c7c:	d80f      	bhi.n	8009c9e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c88:	d109      	bne.n	8009c9e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3301      	adds	r3, #1
 8009c94:	105b      	asrs	r3, r3, #1
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ca2:	4a40      	ldr	r2, [pc, #256]	@ (8009da4 <HAL_SPI_Transmit_DMA+0x274>)
 8009ca4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009caa:	4a3f      	ldr	r2, [pc, #252]	@ (8009da8 <HAL_SPI_Transmit_DMA+0x278>)
 8009cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8009dac <HAL_SPI_Transmit_DMA+0x27c>)
 8009cb4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cba:	2200      	movs	r2, #0
 8009cbc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ccc:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3320      	adds	r3, #32
 8009cde:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ce6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009ce8:	f7f9 ff74 	bl	8003bd4 <HAL_DMA_Start_IT>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d011      	beq.n	8009d16 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cf8:	f043 0210 	orr.w	r2, r3, #16
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e042      	b.n	8009d9c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d20:	d108      	bne.n	8009d34 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6859      	ldr	r1, [r3, #4]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	4b20      	ldr	r3, [pc, #128]	@ (8009db0 <HAL_SPI_Transmit_DMA+0x280>)
 8009d2e:	400b      	ands	r3, r1
 8009d30:	6053      	str	r3, [r2, #4]
 8009d32:	e009      	b.n	8009d48 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8009db0 <HAL_SPI_Transmit_DMA+0x280>)
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	88f9      	ldrh	r1, [r7, #6]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	6812      	ldr	r2, [r2, #0]
 8009d44:	430b      	orrs	r3, r1
 8009d46:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	689a      	ldr	r2, [r3, #8]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d56:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	691a      	ldr	r2, [r3, #16]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8009d66:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f042 0201 	orr.w	r2, r2, #1
 8009d76:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d80:	d107      	bne.n	8009d92 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d90:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	0800a5b1 	.word	0x0800a5b1
 8009da8:	0800a525 	.word	0x0800a525
 8009dac:	0800a5e9 	.word	0x0800a5e9
 8009db0:	ffff0000 	.word	0xffff0000

08009db4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d001      	beq.n	8009dd2 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	e19c      	b.n	800a10c <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d005      	beq.n	8009de4 <HAL_SPI_TransmitReceive_DMA+0x30>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <HAL_SPI_TransmitReceive_DMA+0x30>
 8009dde:	887b      	ldrh	r3, [r7, #2]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d101      	bne.n	8009de8 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e191      	b.n	800a10c <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d101      	bne.n	8009df6 <HAL_SPI_TransmitReceive_DMA+0x42>
 8009df2:	2302      	movs	r3, #2
 8009df4:	e18a      	b.n	800a10c <HAL_SPI_TransmitReceive_DMA+0x358>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2205      	movs	r2, #5
 8009e02:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	887a      	ldrh	r2, [r7, #2]
 8009e18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	887a      	ldrh	r2, [r7, #2]
 8009e20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	887a      	ldrh	r2, [r7, #2]
 8009e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	887a      	ldrh	r2, [r7, #2]
 8009e36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68da      	ldr	r2, [r3, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009e54:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689a      	ldr	r2, [r3, #8]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009e64:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	2b0f      	cmp	r3, #15
 8009e6c:	d90b      	bls.n	8009e86 <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e72:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8009e74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e78:	d121      	bne.n	8009ebe <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e7e:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8009e80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e84:	d11b      	bne.n	8009ebe <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8009e8a:	2b07      	cmp	r3, #7
 8009e8c:	d91d      	bls.n	8009eca <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e92:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8009e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e98:	d005      	beq.n	8009ea6 <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e9e:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ea4:	d10b      	bne.n	8009ebe <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eaa:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8009eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009eb0:	d00b      	beq.n	8009eca <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eb6:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ebc:	d005      	beq.n	8009eca <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e120      	b.n	800a10c <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	2b07      	cmp	r3, #7
 8009ed0:	d840      	bhi.n	8009f54 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009edc:	d109      	bne.n	8009ef2 <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	105b      	asrs	r3, r3, #1
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009efc:	d109      	bne.n	8009f12 <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	3303      	adds	r3, #3
 8009f08:	109b      	asrs	r3, r3, #2
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f1c:	d109      	bne.n	8009f32 <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	3301      	adds	r3, #1
 8009f28:	105b      	asrs	r3, r3, #1
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f3c:	d12e      	bne.n	8009f9c <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	3303      	adds	r3, #3
 8009f48:	109b      	asrs	r3, r3, #2
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009f52:	e023      	b.n	8009f9c <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	2b0f      	cmp	r3, #15
 8009f5a:	d81f      	bhi.n	8009f9c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f66:	d109      	bne.n	8009f7c <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	3301      	adds	r3, #1
 8009f72:	105b      	asrs	r3, r3, #1
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f86:	d109      	bne.n	8009f9c <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	3301      	adds	r3, #1
 8009f92:	105b      	asrs	r3, r3, #1
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fa0:	4a5c      	ldr	r2, [pc, #368]	@ (800a114 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8009fa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fa8:	4a5b      	ldr	r2, [pc, #364]	@ (800a118 <HAL_SPI_TransmitReceive_DMA+0x364>)
 8009faa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fb0:	4a5a      	ldr	r2, [pc, #360]	@ (800a11c <HAL_SPI_TransmitReceive_DMA+0x368>)
 8009fb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fb8:	2200      	movs	r2, #0
 8009fba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3330      	adds	r3, #48	@ 0x30
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fcc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fd4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8009fd6:	f7f9 fdfd 	bl	8003bd4 <HAL_DMA_Start_IT>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d011      	beq.n	800a004 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fe6:	f043 0210 	orr.w	r2, r3, #16
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e083      	b.n	800a10c <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689a      	ldr	r2, [r3, #8]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a012:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a018:	2200      	movs	r2, #0
 800a01a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a020:	2200      	movs	r2, #0
 800a022:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a028:	2200      	movs	r2, #0
 800a02a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a030:	4a3a      	ldr	r2, [pc, #232]	@ (800a11c <HAL_SPI_TransmitReceive_DMA+0x368>)
 800a032:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a03c:	4619      	mov	r1, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3320      	adds	r3, #32
 800a044:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a04c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a04e:	f7f9 fdc1 	bl	8003bd4 <HAL_DMA_Start_IT>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d016      	beq.n	800a086 <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fa f823 	bl	80040a8 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a068:	f043 0210 	orr.w	r2, r3, #16
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e042      	b.n	800a10c <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a090:	d108      	bne.n	800a0a4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6859      	ldr	r1, [r3, #4]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	4b20      	ldr	r3, [pc, #128]	@ (800a120 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800a09e:	400b      	ands	r3, r1
 800a0a0:	6053      	str	r3, [r2, #4]
 800a0a2:	e009      	b.n	800a0b8 <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	4b1d      	ldr	r3, [pc, #116]	@ (800a120 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	8879      	ldrh	r1, [r7, #2]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	6812      	ldr	r2, [r2, #0]
 800a0b4:	430b      	orrs	r3, r1
 800a0b6:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689a      	ldr	r2, [r3, #8]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0c6:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	691a      	ldr	r2, [r3, #16]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800a0d6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f042 0201 	orr.w	r2, r2, #1
 800a0e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0f0:	d107      	bne.n	800a102 <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a100:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	0800a5cd 	.word	0x0800a5cd
 800a118:	0800a56b 	.word	0x0800a56b
 800a11c:	0800a5e9 	.word	0x0800a5e9
 800a120:	ffff0000 	.word	0xffff0000

0800a124 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08a      	sub	sp, #40	@ 0x28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a13c:	6a3a      	ldr	r2, [r7, #32]
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	4013      	ands	r3, r2
 800a142:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a14c:	2300      	movs	r3, #0
 800a14e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a156:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3330      	adds	r3, #48	@ 0x30
 800a15e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a166:	2b00      	cmp	r3, #0
 800a168:	d010      	beq.n	800a18c <HAL_SPI_IRQHandler+0x68>
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	f003 0308 	and.w	r3, r3, #8
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	699a      	ldr	r2, [r3, #24]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a182:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f9c3 	bl	800a510 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a18a:	e192      	b.n	800a4b2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	d113      	bne.n	800a1be <HAL_SPI_IRQHandler+0x9a>
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	f003 0320 	and.w	r3, r3, #32
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10e      	bne.n	800a1be <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d009      	beq.n	800a1be <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	4798      	blx	r3
    handled = 1UL;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10f      	bne.n	800a1e8 <HAL_SPI_IRQHandler+0xc4>
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00a      	beq.n	800a1e8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d105      	bne.n	800a1e8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	4798      	blx	r3
    handled = 1UL;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	f003 0320 	and.w	r3, r3, #32
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10f      	bne.n	800a212 <HAL_SPI_IRQHandler+0xee>
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	f003 0302 	and.w	r3, r3, #2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a202:	2b00      	cmp	r3, #0
 800a204:	d105      	bne.n	800a212 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	4798      	blx	r3
    handled = 1UL;
 800a20e:	2301      	movs	r3, #1
 800a210:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a214:	2b00      	cmp	r3, #0
 800a216:	f040 8147 	bne.w	800a4a8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	f003 0308 	and.w	r3, r3, #8
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 808b 	beq.w	800a33c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	699a      	ldr	r2, [r3, #24]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0208 	orr.w	r2, r2, #8
 800a234:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	699a      	ldr	r2, [r3, #24]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f042 0210 	orr.w	r2, r2, #16
 800a244:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	699a      	ldr	r2, [r3, #24]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a254:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	691a      	ldr	r2, [r3, #16]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0208 	bic.w	r2, r2, #8
 800a264:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d13d      	bne.n	800a2f0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a274:	e036      	b.n	800a2e4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	2b0f      	cmp	r3, #15
 800a27c:	d90b      	bls.n	800a296 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a286:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a288:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a28e:	1d1a      	adds	r2, r3, #4
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	665a      	str	r2, [r3, #100]	@ 0x64
 800a294:	e01d      	b.n	800a2d2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	2b07      	cmp	r3, #7
 800a29c:	d90b      	bls.n	800a2b6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	8812      	ldrh	r2, [r2, #0]
 800a2a6:	b292      	uxth	r2, r2
 800a2a8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2ae:	1c9a      	adds	r2, r3, #2
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	665a      	str	r2, [r3, #100]	@ 0x64
 800a2b4:	e00d      	b.n	800a2d2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2c2:	7812      	ldrb	r2, [r2, #0]
 800a2c4:	b2d2      	uxtb	r2, r2
 800a2c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1c2      	bne.n	800a276 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f9b7 	bl	800a664 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f8f7 	bl	800a4fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a30e:	e0d0      	b.n	800a4b2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a310:	7cfb      	ldrb	r3, [r7, #19]
 800a312:	2b05      	cmp	r3, #5
 800a314:	d103      	bne.n	800a31e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7f7 fdc8 	bl	8001eac <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a31c:	e0c6      	b.n	800a4ac <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a31e:	7cfb      	ldrb	r3, [r7, #19]
 800a320:	2b04      	cmp	r3, #4
 800a322:	d103      	bne.n	800a32c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f8cb 	bl	800a4c0 <HAL_SPI_RxCpltCallback>
    return;
 800a32a:	e0bf      	b.n	800a4ac <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a32c:	7cfb      	ldrb	r3, [r7, #19]
 800a32e:	2b03      	cmp	r3, #3
 800a330:	f040 80bc 	bne.w	800a4ac <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7f7 fdd9 	bl	8001eec <HAL_SPI_TxCpltCallback>
    return;
 800a33a:	e0b7      	b.n	800a4ac <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 80b5 	beq.w	800a4b2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00f      	beq.n	800a372 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a358:	f043 0204 	orr.w	r2, r3, #4
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	699a      	ldr	r2, [r3, #24]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a370:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00f      	beq.n	800a39c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a382:	f043 0201 	orr.w	r2, r3, #1
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	699a      	ldr	r2, [r3, #24]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a39a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00f      	beq.n	800a3c6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3ac:	f043 0208 	orr.w	r2, r3, #8
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3c4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	f003 0320 	and.w	r3, r3, #32
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00f      	beq.n	800a3f0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	699a      	ldr	r2, [r3, #24]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f042 0220 	orr.w	r2, r2, #32
 800a3ee:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d05a      	beq.n	800a4b0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 0201 	bic.w	r2, r2, #1
 800a408:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6919      	ldr	r1, [r3, #16]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	4b28      	ldr	r3, [pc, #160]	@ (800a4b8 <HAL_SPI_IRQHandler+0x394>)
 800a416:	400b      	ands	r3, r1
 800a418:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a420:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a424:	d138      	bne.n	800a498 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a434:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d013      	beq.n	800a466 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a442:	4a1e      	ldr	r2, [pc, #120]	@ (800a4bc <HAL_SPI_IRQHandler+0x398>)
 800a444:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fa f94a 	bl	80046e4 <HAL_DMA_Abort_IT>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d007      	beq.n	800a466 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a45c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d020      	beq.n	800a4b0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a472:	4a12      	ldr	r2, [pc, #72]	@ (800a4bc <HAL_SPI_IRQHandler+0x398>)
 800a474:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fa f932 	bl	80046e4 <HAL_DMA_Abort_IT>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d014      	beq.n	800a4b0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a48c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a496:	e00b      	b.n	800a4b0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f82b 	bl	800a4fc <HAL_SPI_ErrorCallback>
    return;
 800a4a6:	e003      	b.n	800a4b0 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a4a8:	bf00      	nop
 800a4aa:	e002      	b.n	800a4b2 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a4ac:	bf00      	nop
 800a4ae:	e000      	b.n	800a4b2 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a4b0:	bf00      	nop
  }
}
 800a4b2:	3728      	adds	r7, #40	@ 0x28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	fffffc94 	.word	0xfffffc94
 800a4bc:	0800a62f 	.word	0x0800a62f

0800a4c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a530:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b07      	cmp	r3, #7
 800a53c:	d011      	beq.n	800a562 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a548:	d103      	bne.n	800a552 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f7f7 fcce 	bl	8001eec <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a550:	e007      	b.n	800a562 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f042 0208 	orr.w	r2, r2, #8
 800a560:	611a      	str	r2, [r3, #16]
}
 800a562:	bf00      	nop
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a576:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b07      	cmp	r3, #7
 800a582:	d011      	beq.n	800a5a8 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a58e:	d103      	bne.n	800a598 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7f7 fc8b 	bl	8001eac <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a596:	e007      	b.n	800a5a8 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f042 0208 	orr.w	r2, r2, #8
 800a5a6:	611a      	str	r2, [r3, #16]
}
 800a5a8:	bf00      	nop
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5bc:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f7ff ff88 	bl	800a4d4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a5c4:	bf00      	nop
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d8:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7ff ff84 	bl	800a4e8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a5e0:	bf00      	nop
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f4:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7fb f9e4 	bl	80059c4 <HAL_DMA_GetError>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d011      	beq.n	800a626 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f000 f82e 	bl	800a664 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a60e:	f043 0210 	orr.w	r2, r3, #16
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f7ff ff6b 	bl	800a4fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a63a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f7ff ff51 	bl	800a4fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a65a:	bf00      	nop
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	699a      	ldr	r2, [r3, #24]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f042 0208 	orr.w	r2, r2, #8
 800a682:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	699a      	ldr	r2, [r3, #24]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f042 0210 	orr.w	r2, r2, #16
 800a692:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f022 0201 	bic.w	r2, r2, #1
 800a6a2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6919      	ldr	r1, [r3, #16]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	4b3c      	ldr	r3, [pc, #240]	@ (800a7a0 <SPI_CloseTransfer+0x13c>)
 800a6b0:	400b      	ands	r3, r1
 800a6b2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	689a      	ldr	r2, [r3, #8]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a6c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	d014      	beq.n	800a6fa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00f      	beq.n	800a6fa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	699a      	ldr	r2, [r3, #24]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f042 0220 	orr.w	r2, r2, #32
 800a6f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b03      	cmp	r3, #3
 800a704:	d014      	beq.n	800a730 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00f      	beq.n	800a730 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a716:	f043 0204 	orr.w	r2, r3, #4
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699a      	ldr	r2, [r3, #24]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a72e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00f      	beq.n	800a75a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a740:	f043 0201 	orr.w	r2, r3, #1
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	699a      	ldr	r2, [r3, #24]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a758:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00f      	beq.n	800a784 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a76a:	f043 0208 	orr.w	r2, r3, #8
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	699a      	ldr	r2, [r3, #24]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a782:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a794:	bf00      	nop
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	fffffc90 	.word	0xfffffc90

0800a7a4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	603b      	str	r3, [r7, #0]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a7b4:	e010      	b.n	800a7d8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7b6:	f7f8 fcfd 	bl	80031b4 <HAL_GetTick>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d803      	bhi.n	800a7ce <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7cc:	d102      	bne.n	800a7d4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e00f      	b.n	800a7f8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	695a      	ldr	r2, [r3, #20]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	bf0c      	ite	eq
 800a7e8:	2301      	moveq	r3, #1
 800a7ea:	2300      	movne	r3, #0
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d0df      	beq.n	800a7b6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a80c:	095b      	lsrs	r3, r3, #5
 800a80e:	3301      	adds	r3, #1
 800a810:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	3301      	adds	r3, #1
 800a818:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	3307      	adds	r3, #7
 800a81e:	08db      	lsrs	r3, r3, #3
 800a820:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	fb02 f303 	mul.w	r3, r2, r3
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d101      	bne.n	800a848 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e042      	b.n	800a8ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d106      	bne.n	800a860 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7f8 fb90 	bl	8002f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2224      	movs	r2, #36	@ 0x24
 800a864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f022 0201 	bic.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 ff23 	bl	800b6cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f8b4 	bl	800a9f4 <UART_SetConfig>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d101      	bne.n	800a896 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e01b      	b.n	800a8ce <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a8a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	689a      	ldr	r2, [r3, #8]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a8b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f042 0201 	orr.w	r2, r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 ffa2 	bl	800b810 <UART_CheckIdleState>
 800a8cc:	4603      	mov	r3, r0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b08a      	sub	sp, #40	@ 0x28
 800a8da:	af02      	add	r7, sp, #8
 800a8dc:	60f8      	str	r0, [r7, #12]
 800a8de:	60b9      	str	r1, [r7, #8]
 800a8e0:	603b      	str	r3, [r7, #0]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8ec:	2b20      	cmp	r3, #32
 800a8ee:	d17b      	bne.n	800a9e8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <HAL_UART_Transmit+0x26>
 800a8f6:	88fb      	ldrh	r3, [r7, #6]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e074      	b.n	800a9ea <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2221      	movs	r2, #33	@ 0x21
 800a90c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a910:	f7f8 fc50 	bl	80031b4 <HAL_GetTick>
 800a914:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	88fa      	ldrh	r2, [r7, #6]
 800a91a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	88fa      	ldrh	r2, [r7, #6]
 800a922:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a92e:	d108      	bne.n	800a942 <HAL_UART_Transmit+0x6c>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d104      	bne.n	800a942 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a938:	2300      	movs	r3, #0
 800a93a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	61bb      	str	r3, [r7, #24]
 800a940:	e003      	b.n	800a94a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a946:	2300      	movs	r3, #0
 800a948:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a94a:	e030      	b.n	800a9ae <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	2200      	movs	r2, #0
 800a954:	2180      	movs	r1, #128	@ 0x80
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f001 f804 	bl	800b964 <UART_WaitOnFlagUntilTimeout>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d005      	beq.n	800a96e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2220      	movs	r2, #32
 800a966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a96a:	2303      	movs	r3, #3
 800a96c:	e03d      	b.n	800a9ea <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10b      	bne.n	800a98c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	461a      	mov	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a982:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	3302      	adds	r3, #2
 800a988:	61bb      	str	r3, [r7, #24]
 800a98a:	e007      	b.n	800a99c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	781a      	ldrb	r2, [r3, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	3301      	adds	r3, #1
 800a99a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1c8      	bne.n	800a94c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	2140      	movs	r1, #64	@ 0x40
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f000 ffcd 	bl	800b964 <UART_WaitOnFlagUntilTimeout>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d005      	beq.n	800a9dc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a9d8:	2303      	movs	r3, #3
 800a9da:	e006      	b.n	800a9ea <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2220      	movs	r2, #32
 800a9e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e000      	b.n	800a9ea <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a9e8:	2302      	movs	r3, #2
  }
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3720      	adds	r7, #32
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9f8:	b092      	sub	sp, #72	@ 0x48
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	689a      	ldr	r2, [r3, #8]
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	431a      	orrs	r2, r3
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	431a      	orrs	r2, r3
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	4bbe      	ldr	r3, [pc, #760]	@ (800ad1c <UART_SetConfig+0x328>)
 800aa24:	4013      	ands	r3, r2
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	68da      	ldr	r2, [r3, #12]
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4ab3      	ldr	r2, [pc, #716]	@ (800ad20 <UART_SetConfig+0x32c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d004      	beq.n	800aa60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	689a      	ldr	r2, [r3, #8]
 800aa66:	4baf      	ldr	r3, [pc, #700]	@ (800ad24 <UART_SetConfig+0x330>)
 800aa68:	4013      	ands	r3, r2
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	6812      	ldr	r2, [r2, #0]
 800aa6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa70:	430b      	orrs	r3, r1
 800aa72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7a:	f023 010f 	bic.w	r1, r3, #15
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4aa6      	ldr	r2, [pc, #664]	@ (800ad28 <UART_SetConfig+0x334>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d177      	bne.n	800ab84 <UART_SetConfig+0x190>
 800aa94:	4ba5      	ldr	r3, [pc, #660]	@ (800ad2c <UART_SetConfig+0x338>)
 800aa96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa9c:	2b28      	cmp	r3, #40	@ 0x28
 800aa9e:	d86d      	bhi.n	800ab7c <UART_SetConfig+0x188>
 800aaa0:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa8 <UART_SetConfig+0xb4>)
 800aaa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa6:	bf00      	nop
 800aaa8:	0800ab4d 	.word	0x0800ab4d
 800aaac:	0800ab7d 	.word	0x0800ab7d
 800aab0:	0800ab7d 	.word	0x0800ab7d
 800aab4:	0800ab7d 	.word	0x0800ab7d
 800aab8:	0800ab7d 	.word	0x0800ab7d
 800aabc:	0800ab7d 	.word	0x0800ab7d
 800aac0:	0800ab7d 	.word	0x0800ab7d
 800aac4:	0800ab7d 	.word	0x0800ab7d
 800aac8:	0800ab55 	.word	0x0800ab55
 800aacc:	0800ab7d 	.word	0x0800ab7d
 800aad0:	0800ab7d 	.word	0x0800ab7d
 800aad4:	0800ab7d 	.word	0x0800ab7d
 800aad8:	0800ab7d 	.word	0x0800ab7d
 800aadc:	0800ab7d 	.word	0x0800ab7d
 800aae0:	0800ab7d 	.word	0x0800ab7d
 800aae4:	0800ab7d 	.word	0x0800ab7d
 800aae8:	0800ab5d 	.word	0x0800ab5d
 800aaec:	0800ab7d 	.word	0x0800ab7d
 800aaf0:	0800ab7d 	.word	0x0800ab7d
 800aaf4:	0800ab7d 	.word	0x0800ab7d
 800aaf8:	0800ab7d 	.word	0x0800ab7d
 800aafc:	0800ab7d 	.word	0x0800ab7d
 800ab00:	0800ab7d 	.word	0x0800ab7d
 800ab04:	0800ab7d 	.word	0x0800ab7d
 800ab08:	0800ab65 	.word	0x0800ab65
 800ab0c:	0800ab7d 	.word	0x0800ab7d
 800ab10:	0800ab7d 	.word	0x0800ab7d
 800ab14:	0800ab7d 	.word	0x0800ab7d
 800ab18:	0800ab7d 	.word	0x0800ab7d
 800ab1c:	0800ab7d 	.word	0x0800ab7d
 800ab20:	0800ab7d 	.word	0x0800ab7d
 800ab24:	0800ab7d 	.word	0x0800ab7d
 800ab28:	0800ab6d 	.word	0x0800ab6d
 800ab2c:	0800ab7d 	.word	0x0800ab7d
 800ab30:	0800ab7d 	.word	0x0800ab7d
 800ab34:	0800ab7d 	.word	0x0800ab7d
 800ab38:	0800ab7d 	.word	0x0800ab7d
 800ab3c:	0800ab7d 	.word	0x0800ab7d
 800ab40:	0800ab7d 	.word	0x0800ab7d
 800ab44:	0800ab7d 	.word	0x0800ab7d
 800ab48:	0800ab75 	.word	0x0800ab75
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab52:	e326      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ab54:	2304      	movs	r3, #4
 800ab56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5a:	e322      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ab5c:	2308      	movs	r3, #8
 800ab5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab62:	e31e      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ab64:	2310      	movs	r3, #16
 800ab66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab6a:	e31a      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ab6c:	2320      	movs	r3, #32
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab72:	e316      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ab74:	2340      	movs	r3, #64	@ 0x40
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab7a:	e312      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ab7c:	2380      	movs	r3, #128	@ 0x80
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab82:	e30e      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a69      	ldr	r2, [pc, #420]	@ (800ad30 <UART_SetConfig+0x33c>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d130      	bne.n	800abf0 <UART_SetConfig+0x1fc>
 800ab8e:	4b67      	ldr	r3, [pc, #412]	@ (800ad2c <UART_SetConfig+0x338>)
 800ab90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab92:	f003 0307 	and.w	r3, r3, #7
 800ab96:	2b05      	cmp	r3, #5
 800ab98:	d826      	bhi.n	800abe8 <UART_SetConfig+0x1f4>
 800ab9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aba0 <UART_SetConfig+0x1ac>)
 800ab9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba0:	0800abb9 	.word	0x0800abb9
 800aba4:	0800abc1 	.word	0x0800abc1
 800aba8:	0800abc9 	.word	0x0800abc9
 800abac:	0800abd1 	.word	0x0800abd1
 800abb0:	0800abd9 	.word	0x0800abd9
 800abb4:	0800abe1 	.word	0x0800abe1
 800abb8:	2300      	movs	r3, #0
 800abba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abbe:	e2f0      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800abc0:	2304      	movs	r3, #4
 800abc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc6:	e2ec      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800abc8:	2308      	movs	r3, #8
 800abca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abce:	e2e8      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800abd0:	2310      	movs	r3, #16
 800abd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd6:	e2e4      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800abd8:	2320      	movs	r3, #32
 800abda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abde:	e2e0      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800abe0:	2340      	movs	r3, #64	@ 0x40
 800abe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abe6:	e2dc      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800abe8:	2380      	movs	r3, #128	@ 0x80
 800abea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abee:	e2d8      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a4f      	ldr	r2, [pc, #316]	@ (800ad34 <UART_SetConfig+0x340>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d130      	bne.n	800ac5c <UART_SetConfig+0x268>
 800abfa:	4b4c      	ldr	r3, [pc, #304]	@ (800ad2c <UART_SetConfig+0x338>)
 800abfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abfe:	f003 0307 	and.w	r3, r3, #7
 800ac02:	2b05      	cmp	r3, #5
 800ac04:	d826      	bhi.n	800ac54 <UART_SetConfig+0x260>
 800ac06:	a201      	add	r2, pc, #4	@ (adr r2, 800ac0c <UART_SetConfig+0x218>)
 800ac08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0c:	0800ac25 	.word	0x0800ac25
 800ac10:	0800ac2d 	.word	0x0800ac2d
 800ac14:	0800ac35 	.word	0x0800ac35
 800ac18:	0800ac3d 	.word	0x0800ac3d
 800ac1c:	0800ac45 	.word	0x0800ac45
 800ac20:	0800ac4d 	.word	0x0800ac4d
 800ac24:	2300      	movs	r3, #0
 800ac26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2a:	e2ba      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ac2c:	2304      	movs	r3, #4
 800ac2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac32:	e2b6      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ac34:	2308      	movs	r3, #8
 800ac36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac3a:	e2b2      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ac3c:	2310      	movs	r3, #16
 800ac3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac42:	e2ae      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ac44:	2320      	movs	r3, #32
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac4a:	e2aa      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ac4c:	2340      	movs	r3, #64	@ 0x40
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac52:	e2a6      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ac54:	2380      	movs	r3, #128	@ 0x80
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac5a:	e2a2      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a35      	ldr	r2, [pc, #212]	@ (800ad38 <UART_SetConfig+0x344>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d130      	bne.n	800acc8 <UART_SetConfig+0x2d4>
 800ac66:	4b31      	ldr	r3, [pc, #196]	@ (800ad2c <UART_SetConfig+0x338>)
 800ac68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac6a:	f003 0307 	and.w	r3, r3, #7
 800ac6e:	2b05      	cmp	r3, #5
 800ac70:	d826      	bhi.n	800acc0 <UART_SetConfig+0x2cc>
 800ac72:	a201      	add	r2, pc, #4	@ (adr r2, 800ac78 <UART_SetConfig+0x284>)
 800ac74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac78:	0800ac91 	.word	0x0800ac91
 800ac7c:	0800ac99 	.word	0x0800ac99
 800ac80:	0800aca1 	.word	0x0800aca1
 800ac84:	0800aca9 	.word	0x0800aca9
 800ac88:	0800acb1 	.word	0x0800acb1
 800ac8c:	0800acb9 	.word	0x0800acb9
 800ac90:	2300      	movs	r3, #0
 800ac92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac96:	e284      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ac98:	2304      	movs	r3, #4
 800ac9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9e:	e280      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800aca0:	2308      	movs	r3, #8
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca6:	e27c      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800aca8:	2310      	movs	r3, #16
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acae:	e278      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800acb0:	2320      	movs	r3, #32
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb6:	e274      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800acb8:	2340      	movs	r3, #64	@ 0x40
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acbe:	e270      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800acc0:	2380      	movs	r3, #128	@ 0x80
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc6:	e26c      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a1b      	ldr	r2, [pc, #108]	@ (800ad3c <UART_SetConfig+0x348>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d142      	bne.n	800ad58 <UART_SetConfig+0x364>
 800acd2:	4b16      	ldr	r3, [pc, #88]	@ (800ad2c <UART_SetConfig+0x338>)
 800acd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	2b05      	cmp	r3, #5
 800acdc:	d838      	bhi.n	800ad50 <UART_SetConfig+0x35c>
 800acde:	a201      	add	r2, pc, #4	@ (adr r2, 800ace4 <UART_SetConfig+0x2f0>)
 800ace0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace4:	0800acfd 	.word	0x0800acfd
 800ace8:	0800ad05 	.word	0x0800ad05
 800acec:	0800ad0d 	.word	0x0800ad0d
 800acf0:	0800ad15 	.word	0x0800ad15
 800acf4:	0800ad41 	.word	0x0800ad41
 800acf8:	0800ad49 	.word	0x0800ad49
 800acfc:	2300      	movs	r3, #0
 800acfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad02:	e24e      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ad04:	2304      	movs	r3, #4
 800ad06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0a:	e24a      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ad0c:	2308      	movs	r3, #8
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad12:	e246      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ad14:	2310      	movs	r3, #16
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1a:	e242      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ad1c:	cfff69f3 	.word	0xcfff69f3
 800ad20:	58000c00 	.word	0x58000c00
 800ad24:	11fff4ff 	.word	0x11fff4ff
 800ad28:	40011000 	.word	0x40011000
 800ad2c:	58024400 	.word	0x58024400
 800ad30:	40004400 	.word	0x40004400
 800ad34:	40004800 	.word	0x40004800
 800ad38:	40004c00 	.word	0x40004c00
 800ad3c:	40005000 	.word	0x40005000
 800ad40:	2320      	movs	r3, #32
 800ad42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad46:	e22c      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ad48:	2340      	movs	r3, #64	@ 0x40
 800ad4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4e:	e228      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ad50:	2380      	movs	r3, #128	@ 0x80
 800ad52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad56:	e224      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4ab1      	ldr	r2, [pc, #708]	@ (800b024 <UART_SetConfig+0x630>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d176      	bne.n	800ae50 <UART_SetConfig+0x45c>
 800ad62:	4bb1      	ldr	r3, [pc, #708]	@ (800b028 <UART_SetConfig+0x634>)
 800ad64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad6a:	2b28      	cmp	r3, #40	@ 0x28
 800ad6c:	d86c      	bhi.n	800ae48 <UART_SetConfig+0x454>
 800ad6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad74 <UART_SetConfig+0x380>)
 800ad70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad74:	0800ae19 	.word	0x0800ae19
 800ad78:	0800ae49 	.word	0x0800ae49
 800ad7c:	0800ae49 	.word	0x0800ae49
 800ad80:	0800ae49 	.word	0x0800ae49
 800ad84:	0800ae49 	.word	0x0800ae49
 800ad88:	0800ae49 	.word	0x0800ae49
 800ad8c:	0800ae49 	.word	0x0800ae49
 800ad90:	0800ae49 	.word	0x0800ae49
 800ad94:	0800ae21 	.word	0x0800ae21
 800ad98:	0800ae49 	.word	0x0800ae49
 800ad9c:	0800ae49 	.word	0x0800ae49
 800ada0:	0800ae49 	.word	0x0800ae49
 800ada4:	0800ae49 	.word	0x0800ae49
 800ada8:	0800ae49 	.word	0x0800ae49
 800adac:	0800ae49 	.word	0x0800ae49
 800adb0:	0800ae49 	.word	0x0800ae49
 800adb4:	0800ae29 	.word	0x0800ae29
 800adb8:	0800ae49 	.word	0x0800ae49
 800adbc:	0800ae49 	.word	0x0800ae49
 800adc0:	0800ae49 	.word	0x0800ae49
 800adc4:	0800ae49 	.word	0x0800ae49
 800adc8:	0800ae49 	.word	0x0800ae49
 800adcc:	0800ae49 	.word	0x0800ae49
 800add0:	0800ae49 	.word	0x0800ae49
 800add4:	0800ae31 	.word	0x0800ae31
 800add8:	0800ae49 	.word	0x0800ae49
 800addc:	0800ae49 	.word	0x0800ae49
 800ade0:	0800ae49 	.word	0x0800ae49
 800ade4:	0800ae49 	.word	0x0800ae49
 800ade8:	0800ae49 	.word	0x0800ae49
 800adec:	0800ae49 	.word	0x0800ae49
 800adf0:	0800ae49 	.word	0x0800ae49
 800adf4:	0800ae39 	.word	0x0800ae39
 800adf8:	0800ae49 	.word	0x0800ae49
 800adfc:	0800ae49 	.word	0x0800ae49
 800ae00:	0800ae49 	.word	0x0800ae49
 800ae04:	0800ae49 	.word	0x0800ae49
 800ae08:	0800ae49 	.word	0x0800ae49
 800ae0c:	0800ae49 	.word	0x0800ae49
 800ae10:	0800ae49 	.word	0x0800ae49
 800ae14:	0800ae41 	.word	0x0800ae41
 800ae18:	2301      	movs	r3, #1
 800ae1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1e:	e1c0      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ae20:	2304      	movs	r3, #4
 800ae22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae26:	e1bc      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ae28:	2308      	movs	r3, #8
 800ae2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae2e:	e1b8      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ae30:	2310      	movs	r3, #16
 800ae32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae36:	e1b4      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ae38:	2320      	movs	r3, #32
 800ae3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3e:	e1b0      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ae40:	2340      	movs	r3, #64	@ 0x40
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae46:	e1ac      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ae48:	2380      	movs	r3, #128	@ 0x80
 800ae4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4e:	e1a8      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a75      	ldr	r2, [pc, #468]	@ (800b02c <UART_SetConfig+0x638>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d130      	bne.n	800aebc <UART_SetConfig+0x4c8>
 800ae5a:	4b73      	ldr	r3, [pc, #460]	@ (800b028 <UART_SetConfig+0x634>)
 800ae5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	2b05      	cmp	r3, #5
 800ae64:	d826      	bhi.n	800aeb4 <UART_SetConfig+0x4c0>
 800ae66:	a201      	add	r2, pc, #4	@ (adr r2, 800ae6c <UART_SetConfig+0x478>)
 800ae68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6c:	0800ae85 	.word	0x0800ae85
 800ae70:	0800ae8d 	.word	0x0800ae8d
 800ae74:	0800ae95 	.word	0x0800ae95
 800ae78:	0800ae9d 	.word	0x0800ae9d
 800ae7c:	0800aea5 	.word	0x0800aea5
 800ae80:	0800aead 	.word	0x0800aead
 800ae84:	2300      	movs	r3, #0
 800ae86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae8a:	e18a      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ae8c:	2304      	movs	r3, #4
 800ae8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae92:	e186      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ae94:	2308      	movs	r3, #8
 800ae96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9a:	e182      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800ae9c:	2310      	movs	r3, #16
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea2:	e17e      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800aea4:	2320      	movs	r3, #32
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeaa:	e17a      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800aeac:	2340      	movs	r3, #64	@ 0x40
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb2:	e176      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800aeb4:	2380      	movs	r3, #128	@ 0x80
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeba:	e172      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a5b      	ldr	r2, [pc, #364]	@ (800b030 <UART_SetConfig+0x63c>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d130      	bne.n	800af28 <UART_SetConfig+0x534>
 800aec6:	4b58      	ldr	r3, [pc, #352]	@ (800b028 <UART_SetConfig+0x634>)
 800aec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeca:	f003 0307 	and.w	r3, r3, #7
 800aece:	2b05      	cmp	r3, #5
 800aed0:	d826      	bhi.n	800af20 <UART_SetConfig+0x52c>
 800aed2:	a201      	add	r2, pc, #4	@ (adr r2, 800aed8 <UART_SetConfig+0x4e4>)
 800aed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed8:	0800aef1 	.word	0x0800aef1
 800aedc:	0800aef9 	.word	0x0800aef9
 800aee0:	0800af01 	.word	0x0800af01
 800aee4:	0800af09 	.word	0x0800af09
 800aee8:	0800af11 	.word	0x0800af11
 800aeec:	0800af19 	.word	0x0800af19
 800aef0:	2300      	movs	r3, #0
 800aef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef6:	e154      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800aef8:	2304      	movs	r3, #4
 800aefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aefe:	e150      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800af00:	2308      	movs	r3, #8
 800af02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af06:	e14c      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800af08:	2310      	movs	r3, #16
 800af0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af0e:	e148      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800af10:	2320      	movs	r3, #32
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af16:	e144      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800af18:	2340      	movs	r3, #64	@ 0x40
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1e:	e140      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800af20:	2380      	movs	r3, #128	@ 0x80
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af26:	e13c      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a41      	ldr	r2, [pc, #260]	@ (800b034 <UART_SetConfig+0x640>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	f040 8082 	bne.w	800b038 <UART_SetConfig+0x644>
 800af34:	4b3c      	ldr	r3, [pc, #240]	@ (800b028 <UART_SetConfig+0x634>)
 800af36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af3c:	2b28      	cmp	r3, #40	@ 0x28
 800af3e:	d86d      	bhi.n	800b01c <UART_SetConfig+0x628>
 800af40:	a201      	add	r2, pc, #4	@ (adr r2, 800af48 <UART_SetConfig+0x554>)
 800af42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af46:	bf00      	nop
 800af48:	0800afed 	.word	0x0800afed
 800af4c:	0800b01d 	.word	0x0800b01d
 800af50:	0800b01d 	.word	0x0800b01d
 800af54:	0800b01d 	.word	0x0800b01d
 800af58:	0800b01d 	.word	0x0800b01d
 800af5c:	0800b01d 	.word	0x0800b01d
 800af60:	0800b01d 	.word	0x0800b01d
 800af64:	0800b01d 	.word	0x0800b01d
 800af68:	0800aff5 	.word	0x0800aff5
 800af6c:	0800b01d 	.word	0x0800b01d
 800af70:	0800b01d 	.word	0x0800b01d
 800af74:	0800b01d 	.word	0x0800b01d
 800af78:	0800b01d 	.word	0x0800b01d
 800af7c:	0800b01d 	.word	0x0800b01d
 800af80:	0800b01d 	.word	0x0800b01d
 800af84:	0800b01d 	.word	0x0800b01d
 800af88:	0800affd 	.word	0x0800affd
 800af8c:	0800b01d 	.word	0x0800b01d
 800af90:	0800b01d 	.word	0x0800b01d
 800af94:	0800b01d 	.word	0x0800b01d
 800af98:	0800b01d 	.word	0x0800b01d
 800af9c:	0800b01d 	.word	0x0800b01d
 800afa0:	0800b01d 	.word	0x0800b01d
 800afa4:	0800b01d 	.word	0x0800b01d
 800afa8:	0800b005 	.word	0x0800b005
 800afac:	0800b01d 	.word	0x0800b01d
 800afb0:	0800b01d 	.word	0x0800b01d
 800afb4:	0800b01d 	.word	0x0800b01d
 800afb8:	0800b01d 	.word	0x0800b01d
 800afbc:	0800b01d 	.word	0x0800b01d
 800afc0:	0800b01d 	.word	0x0800b01d
 800afc4:	0800b01d 	.word	0x0800b01d
 800afc8:	0800b00d 	.word	0x0800b00d
 800afcc:	0800b01d 	.word	0x0800b01d
 800afd0:	0800b01d 	.word	0x0800b01d
 800afd4:	0800b01d 	.word	0x0800b01d
 800afd8:	0800b01d 	.word	0x0800b01d
 800afdc:	0800b01d 	.word	0x0800b01d
 800afe0:	0800b01d 	.word	0x0800b01d
 800afe4:	0800b01d 	.word	0x0800b01d
 800afe8:	0800b015 	.word	0x0800b015
 800afec:	2301      	movs	r3, #1
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff2:	e0d6      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800aff4:	2304      	movs	r3, #4
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affa:	e0d2      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800affc:	2308      	movs	r3, #8
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b002:	e0ce      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b004:	2310      	movs	r3, #16
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00a:	e0ca      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b00c:	2320      	movs	r3, #32
 800b00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b012:	e0c6      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b014:	2340      	movs	r3, #64	@ 0x40
 800b016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01a:	e0c2      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b01c:	2380      	movs	r3, #128	@ 0x80
 800b01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b022:	e0be      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b024:	40011400 	.word	0x40011400
 800b028:	58024400 	.word	0x58024400
 800b02c:	40007800 	.word	0x40007800
 800b030:	40007c00 	.word	0x40007c00
 800b034:	40011800 	.word	0x40011800
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4aad      	ldr	r2, [pc, #692]	@ (800b2f4 <UART_SetConfig+0x900>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d176      	bne.n	800b130 <UART_SetConfig+0x73c>
 800b042:	4bad      	ldr	r3, [pc, #692]	@ (800b2f8 <UART_SetConfig+0x904>)
 800b044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b046:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b04a:	2b28      	cmp	r3, #40	@ 0x28
 800b04c:	d86c      	bhi.n	800b128 <UART_SetConfig+0x734>
 800b04e:	a201      	add	r2, pc, #4	@ (adr r2, 800b054 <UART_SetConfig+0x660>)
 800b050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b054:	0800b0f9 	.word	0x0800b0f9
 800b058:	0800b129 	.word	0x0800b129
 800b05c:	0800b129 	.word	0x0800b129
 800b060:	0800b129 	.word	0x0800b129
 800b064:	0800b129 	.word	0x0800b129
 800b068:	0800b129 	.word	0x0800b129
 800b06c:	0800b129 	.word	0x0800b129
 800b070:	0800b129 	.word	0x0800b129
 800b074:	0800b101 	.word	0x0800b101
 800b078:	0800b129 	.word	0x0800b129
 800b07c:	0800b129 	.word	0x0800b129
 800b080:	0800b129 	.word	0x0800b129
 800b084:	0800b129 	.word	0x0800b129
 800b088:	0800b129 	.word	0x0800b129
 800b08c:	0800b129 	.word	0x0800b129
 800b090:	0800b129 	.word	0x0800b129
 800b094:	0800b109 	.word	0x0800b109
 800b098:	0800b129 	.word	0x0800b129
 800b09c:	0800b129 	.word	0x0800b129
 800b0a0:	0800b129 	.word	0x0800b129
 800b0a4:	0800b129 	.word	0x0800b129
 800b0a8:	0800b129 	.word	0x0800b129
 800b0ac:	0800b129 	.word	0x0800b129
 800b0b0:	0800b129 	.word	0x0800b129
 800b0b4:	0800b111 	.word	0x0800b111
 800b0b8:	0800b129 	.word	0x0800b129
 800b0bc:	0800b129 	.word	0x0800b129
 800b0c0:	0800b129 	.word	0x0800b129
 800b0c4:	0800b129 	.word	0x0800b129
 800b0c8:	0800b129 	.word	0x0800b129
 800b0cc:	0800b129 	.word	0x0800b129
 800b0d0:	0800b129 	.word	0x0800b129
 800b0d4:	0800b119 	.word	0x0800b119
 800b0d8:	0800b129 	.word	0x0800b129
 800b0dc:	0800b129 	.word	0x0800b129
 800b0e0:	0800b129 	.word	0x0800b129
 800b0e4:	0800b129 	.word	0x0800b129
 800b0e8:	0800b129 	.word	0x0800b129
 800b0ec:	0800b129 	.word	0x0800b129
 800b0f0:	0800b129 	.word	0x0800b129
 800b0f4:	0800b121 	.word	0x0800b121
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0fe:	e050      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b100:	2304      	movs	r3, #4
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b106:	e04c      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b108:	2308      	movs	r3, #8
 800b10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b10e:	e048      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b110:	2310      	movs	r3, #16
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b116:	e044      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b118:	2320      	movs	r3, #32
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b11e:	e040      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b120:	2340      	movs	r3, #64	@ 0x40
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b126:	e03c      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b128:	2380      	movs	r3, #128	@ 0x80
 800b12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b12e:	e038      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a71      	ldr	r2, [pc, #452]	@ (800b2fc <UART_SetConfig+0x908>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d130      	bne.n	800b19c <UART_SetConfig+0x7a8>
 800b13a:	4b6f      	ldr	r3, [pc, #444]	@ (800b2f8 <UART_SetConfig+0x904>)
 800b13c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b13e:	f003 0307 	and.w	r3, r3, #7
 800b142:	2b05      	cmp	r3, #5
 800b144:	d826      	bhi.n	800b194 <UART_SetConfig+0x7a0>
 800b146:	a201      	add	r2, pc, #4	@ (adr r2, 800b14c <UART_SetConfig+0x758>)
 800b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14c:	0800b165 	.word	0x0800b165
 800b150:	0800b16d 	.word	0x0800b16d
 800b154:	0800b175 	.word	0x0800b175
 800b158:	0800b17d 	.word	0x0800b17d
 800b15c:	0800b185 	.word	0x0800b185
 800b160:	0800b18d 	.word	0x0800b18d
 800b164:	2302      	movs	r3, #2
 800b166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b16a:	e01a      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b16c:	2304      	movs	r3, #4
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b172:	e016      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b174:	2308      	movs	r3, #8
 800b176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b17a:	e012      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b17c:	2310      	movs	r3, #16
 800b17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b182:	e00e      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b184:	2320      	movs	r3, #32
 800b186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b18a:	e00a      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b18c:	2340      	movs	r3, #64	@ 0x40
 800b18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b192:	e006      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b194:	2380      	movs	r3, #128	@ 0x80
 800b196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b19a:	e002      	b.n	800b1a2 <UART_SetConfig+0x7ae>
 800b19c:	2380      	movs	r3, #128	@ 0x80
 800b19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a55      	ldr	r2, [pc, #340]	@ (800b2fc <UART_SetConfig+0x908>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	f040 80f8 	bne.w	800b39e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1b2:	2b20      	cmp	r3, #32
 800b1b4:	dc46      	bgt.n	800b244 <UART_SetConfig+0x850>
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	db75      	blt.n	800b2a6 <UART_SetConfig+0x8b2>
 800b1ba:	3b02      	subs	r3, #2
 800b1bc:	2b1e      	cmp	r3, #30
 800b1be:	d872      	bhi.n	800b2a6 <UART_SetConfig+0x8b2>
 800b1c0:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c8 <UART_SetConfig+0x7d4>)
 800b1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c6:	bf00      	nop
 800b1c8:	0800b24b 	.word	0x0800b24b
 800b1cc:	0800b2a7 	.word	0x0800b2a7
 800b1d0:	0800b253 	.word	0x0800b253
 800b1d4:	0800b2a7 	.word	0x0800b2a7
 800b1d8:	0800b2a7 	.word	0x0800b2a7
 800b1dc:	0800b2a7 	.word	0x0800b2a7
 800b1e0:	0800b263 	.word	0x0800b263
 800b1e4:	0800b2a7 	.word	0x0800b2a7
 800b1e8:	0800b2a7 	.word	0x0800b2a7
 800b1ec:	0800b2a7 	.word	0x0800b2a7
 800b1f0:	0800b2a7 	.word	0x0800b2a7
 800b1f4:	0800b2a7 	.word	0x0800b2a7
 800b1f8:	0800b2a7 	.word	0x0800b2a7
 800b1fc:	0800b2a7 	.word	0x0800b2a7
 800b200:	0800b273 	.word	0x0800b273
 800b204:	0800b2a7 	.word	0x0800b2a7
 800b208:	0800b2a7 	.word	0x0800b2a7
 800b20c:	0800b2a7 	.word	0x0800b2a7
 800b210:	0800b2a7 	.word	0x0800b2a7
 800b214:	0800b2a7 	.word	0x0800b2a7
 800b218:	0800b2a7 	.word	0x0800b2a7
 800b21c:	0800b2a7 	.word	0x0800b2a7
 800b220:	0800b2a7 	.word	0x0800b2a7
 800b224:	0800b2a7 	.word	0x0800b2a7
 800b228:	0800b2a7 	.word	0x0800b2a7
 800b22c:	0800b2a7 	.word	0x0800b2a7
 800b230:	0800b2a7 	.word	0x0800b2a7
 800b234:	0800b2a7 	.word	0x0800b2a7
 800b238:	0800b2a7 	.word	0x0800b2a7
 800b23c:	0800b2a7 	.word	0x0800b2a7
 800b240:	0800b299 	.word	0x0800b299
 800b244:	2b40      	cmp	r3, #64	@ 0x40
 800b246:	d02a      	beq.n	800b29e <UART_SetConfig+0x8aa>
 800b248:	e02d      	b.n	800b2a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b24a:	f7fd facb 	bl	80087e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b24e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b250:	e02f      	b.n	800b2b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b256:	4618      	mov	r0, r3
 800b258:	f7fd fada 	bl	8008810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b260:	e027      	b.n	800b2b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b262:	f107 0318 	add.w	r3, r7, #24
 800b266:	4618      	mov	r0, r3
 800b268:	f7fd fc26 	bl	8008ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b270:	e01f      	b.n	800b2b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b272:	4b21      	ldr	r3, [pc, #132]	@ (800b2f8 <UART_SetConfig+0x904>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 0320 	and.w	r3, r3, #32
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d009      	beq.n	800b292 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b27e:	4b1e      	ldr	r3, [pc, #120]	@ (800b2f8 <UART_SetConfig+0x904>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	08db      	lsrs	r3, r3, #3
 800b284:	f003 0303 	and.w	r3, r3, #3
 800b288:	4a1d      	ldr	r2, [pc, #116]	@ (800b300 <UART_SetConfig+0x90c>)
 800b28a:	fa22 f303 	lsr.w	r3, r2, r3
 800b28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b290:	e00f      	b.n	800b2b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b292:	4b1b      	ldr	r3, [pc, #108]	@ (800b300 <UART_SetConfig+0x90c>)
 800b294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b296:	e00c      	b.n	800b2b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b298:	4b1a      	ldr	r3, [pc, #104]	@ (800b304 <UART_SetConfig+0x910>)
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b29c:	e009      	b.n	800b2b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b29e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a4:	e005      	b.n	800b2b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 81ee 	beq.w	800b696 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2be:	4a12      	ldr	r2, [pc, #72]	@ (800b308 <UART_SetConfig+0x914>)
 800b2c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2cc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	4413      	add	r3, r2
 800b2d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d305      	bcc.n	800b2ea <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d910      	bls.n	800b30c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2f0:	e1d1      	b.n	800b696 <UART_SetConfig+0xca2>
 800b2f2:	bf00      	nop
 800b2f4:	40011c00 	.word	0x40011c00
 800b2f8:	58024400 	.word	0x58024400
 800b2fc:	58000c00 	.word	0x58000c00
 800b300:	03d09000 	.word	0x03d09000
 800b304:	003d0900 	.word	0x003d0900
 800b308:	0800ef88 	.word	0x0800ef88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b30c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b30e:	2200      	movs	r2, #0
 800b310:	60bb      	str	r3, [r7, #8]
 800b312:	60fa      	str	r2, [r7, #12]
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b318:	4ac0      	ldr	r2, [pc, #768]	@ (800b61c <UART_SetConfig+0xc28>)
 800b31a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b31e:	b29b      	uxth	r3, r3
 800b320:	2200      	movs	r2, #0
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	607a      	str	r2, [r7, #4]
 800b326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b32a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b32e:	f7f5 f847 	bl	80003c0 <__aeabi_uldivmod>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4610      	mov	r0, r2
 800b338:	4619      	mov	r1, r3
 800b33a:	f04f 0200 	mov.w	r2, #0
 800b33e:	f04f 0300 	mov.w	r3, #0
 800b342:	020b      	lsls	r3, r1, #8
 800b344:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b348:	0202      	lsls	r2, r0, #8
 800b34a:	6979      	ldr	r1, [r7, #20]
 800b34c:	6849      	ldr	r1, [r1, #4]
 800b34e:	0849      	lsrs	r1, r1, #1
 800b350:	2000      	movs	r0, #0
 800b352:	460c      	mov	r4, r1
 800b354:	4605      	mov	r5, r0
 800b356:	eb12 0804 	adds.w	r8, r2, r4
 800b35a:	eb43 0905 	adc.w	r9, r3, r5
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	469a      	mov	sl, r3
 800b366:	4693      	mov	fp, r2
 800b368:	4652      	mov	r2, sl
 800b36a:	465b      	mov	r3, fp
 800b36c:	4640      	mov	r0, r8
 800b36e:	4649      	mov	r1, r9
 800b370:	f7f5 f826 	bl	80003c0 <__aeabi_uldivmod>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4613      	mov	r3, r2
 800b37a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b382:	d308      	bcc.n	800b396 <UART_SetConfig+0x9a2>
 800b384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b38a:	d204      	bcs.n	800b396 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b392:	60da      	str	r2, [r3, #12]
 800b394:	e17f      	b.n	800b696 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b39c:	e17b      	b.n	800b696 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	69db      	ldr	r3, [r3, #28]
 800b3a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3a6:	f040 80bd 	bne.w	800b524 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b3aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b3ae:	2b20      	cmp	r3, #32
 800b3b0:	dc48      	bgt.n	800b444 <UART_SetConfig+0xa50>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	db7b      	blt.n	800b4ae <UART_SetConfig+0xaba>
 800b3b6:	2b20      	cmp	r3, #32
 800b3b8:	d879      	bhi.n	800b4ae <UART_SetConfig+0xaba>
 800b3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c0 <UART_SetConfig+0x9cc>)
 800b3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c0:	0800b44b 	.word	0x0800b44b
 800b3c4:	0800b453 	.word	0x0800b453
 800b3c8:	0800b4af 	.word	0x0800b4af
 800b3cc:	0800b4af 	.word	0x0800b4af
 800b3d0:	0800b45b 	.word	0x0800b45b
 800b3d4:	0800b4af 	.word	0x0800b4af
 800b3d8:	0800b4af 	.word	0x0800b4af
 800b3dc:	0800b4af 	.word	0x0800b4af
 800b3e0:	0800b46b 	.word	0x0800b46b
 800b3e4:	0800b4af 	.word	0x0800b4af
 800b3e8:	0800b4af 	.word	0x0800b4af
 800b3ec:	0800b4af 	.word	0x0800b4af
 800b3f0:	0800b4af 	.word	0x0800b4af
 800b3f4:	0800b4af 	.word	0x0800b4af
 800b3f8:	0800b4af 	.word	0x0800b4af
 800b3fc:	0800b4af 	.word	0x0800b4af
 800b400:	0800b47b 	.word	0x0800b47b
 800b404:	0800b4af 	.word	0x0800b4af
 800b408:	0800b4af 	.word	0x0800b4af
 800b40c:	0800b4af 	.word	0x0800b4af
 800b410:	0800b4af 	.word	0x0800b4af
 800b414:	0800b4af 	.word	0x0800b4af
 800b418:	0800b4af 	.word	0x0800b4af
 800b41c:	0800b4af 	.word	0x0800b4af
 800b420:	0800b4af 	.word	0x0800b4af
 800b424:	0800b4af 	.word	0x0800b4af
 800b428:	0800b4af 	.word	0x0800b4af
 800b42c:	0800b4af 	.word	0x0800b4af
 800b430:	0800b4af 	.word	0x0800b4af
 800b434:	0800b4af 	.word	0x0800b4af
 800b438:	0800b4af 	.word	0x0800b4af
 800b43c:	0800b4af 	.word	0x0800b4af
 800b440:	0800b4a1 	.word	0x0800b4a1
 800b444:	2b40      	cmp	r3, #64	@ 0x40
 800b446:	d02e      	beq.n	800b4a6 <UART_SetConfig+0xab2>
 800b448:	e031      	b.n	800b4ae <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b44a:	f7fb ffff 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 800b44e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b450:	e033      	b.n	800b4ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b452:	f7fc f811 	bl	8007478 <HAL_RCC_GetPCLK2Freq>
 800b456:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b458:	e02f      	b.n	800b4ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b45a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fd f9d6 	bl	8008810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b468:	e027      	b.n	800b4ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b46a:	f107 0318 	add.w	r3, r7, #24
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fd fb22 	bl	8008ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b478:	e01f      	b.n	800b4ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b47a:	4b69      	ldr	r3, [pc, #420]	@ (800b620 <UART_SetConfig+0xc2c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0320 	and.w	r3, r3, #32
 800b482:	2b00      	cmp	r3, #0
 800b484:	d009      	beq.n	800b49a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b486:	4b66      	ldr	r3, [pc, #408]	@ (800b620 <UART_SetConfig+0xc2c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	08db      	lsrs	r3, r3, #3
 800b48c:	f003 0303 	and.w	r3, r3, #3
 800b490:	4a64      	ldr	r2, [pc, #400]	@ (800b624 <UART_SetConfig+0xc30>)
 800b492:	fa22 f303 	lsr.w	r3, r2, r3
 800b496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b498:	e00f      	b.n	800b4ba <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b49a:	4b62      	ldr	r3, [pc, #392]	@ (800b624 <UART_SetConfig+0xc30>)
 800b49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b49e:	e00c      	b.n	800b4ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4a0:	4b61      	ldr	r3, [pc, #388]	@ (800b628 <UART_SetConfig+0xc34>)
 800b4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4a4:	e009      	b.n	800b4ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ac:	e005      	b.n	800b4ba <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b4b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f000 80ea 	beq.w	800b696 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c6:	4a55      	ldr	r2, [pc, #340]	@ (800b61c <UART_SetConfig+0xc28>)
 800b4c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4d4:	005a      	lsls	r2, r3, #1
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	085b      	lsrs	r3, r3, #1
 800b4dc:	441a      	add	r2, r3
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ea:	2b0f      	cmp	r3, #15
 800b4ec:	d916      	bls.n	800b51c <UART_SetConfig+0xb28>
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4f4:	d212      	bcs.n	800b51c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	f023 030f 	bic.w	r3, r3, #15
 800b4fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b502:	085b      	lsrs	r3, r3, #1
 800b504:	b29b      	uxth	r3, r3
 800b506:	f003 0307 	and.w	r3, r3, #7
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b50e:	4313      	orrs	r3, r2
 800b510:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b518:	60da      	str	r2, [r3, #12]
 800b51a:	e0bc      	b.n	800b696 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b522:	e0b8      	b.n	800b696 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b524:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b528:	2b20      	cmp	r3, #32
 800b52a:	dc4b      	bgt.n	800b5c4 <UART_SetConfig+0xbd0>
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f2c0 8087 	blt.w	800b640 <UART_SetConfig+0xc4c>
 800b532:	2b20      	cmp	r3, #32
 800b534:	f200 8084 	bhi.w	800b640 <UART_SetConfig+0xc4c>
 800b538:	a201      	add	r2, pc, #4	@ (adr r2, 800b540 <UART_SetConfig+0xb4c>)
 800b53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53e:	bf00      	nop
 800b540:	0800b5cb 	.word	0x0800b5cb
 800b544:	0800b5d3 	.word	0x0800b5d3
 800b548:	0800b641 	.word	0x0800b641
 800b54c:	0800b641 	.word	0x0800b641
 800b550:	0800b5db 	.word	0x0800b5db
 800b554:	0800b641 	.word	0x0800b641
 800b558:	0800b641 	.word	0x0800b641
 800b55c:	0800b641 	.word	0x0800b641
 800b560:	0800b5eb 	.word	0x0800b5eb
 800b564:	0800b641 	.word	0x0800b641
 800b568:	0800b641 	.word	0x0800b641
 800b56c:	0800b641 	.word	0x0800b641
 800b570:	0800b641 	.word	0x0800b641
 800b574:	0800b641 	.word	0x0800b641
 800b578:	0800b641 	.word	0x0800b641
 800b57c:	0800b641 	.word	0x0800b641
 800b580:	0800b5fb 	.word	0x0800b5fb
 800b584:	0800b641 	.word	0x0800b641
 800b588:	0800b641 	.word	0x0800b641
 800b58c:	0800b641 	.word	0x0800b641
 800b590:	0800b641 	.word	0x0800b641
 800b594:	0800b641 	.word	0x0800b641
 800b598:	0800b641 	.word	0x0800b641
 800b59c:	0800b641 	.word	0x0800b641
 800b5a0:	0800b641 	.word	0x0800b641
 800b5a4:	0800b641 	.word	0x0800b641
 800b5a8:	0800b641 	.word	0x0800b641
 800b5ac:	0800b641 	.word	0x0800b641
 800b5b0:	0800b641 	.word	0x0800b641
 800b5b4:	0800b641 	.word	0x0800b641
 800b5b8:	0800b641 	.word	0x0800b641
 800b5bc:	0800b641 	.word	0x0800b641
 800b5c0:	0800b633 	.word	0x0800b633
 800b5c4:	2b40      	cmp	r3, #64	@ 0x40
 800b5c6:	d037      	beq.n	800b638 <UART_SetConfig+0xc44>
 800b5c8:	e03a      	b.n	800b640 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5ca:	f7fb ff3f 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 800b5ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5d0:	e03c      	b.n	800b64c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5d2:	f7fb ff51 	bl	8007478 <HAL_RCC_GetPCLK2Freq>
 800b5d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5d8:	e038      	b.n	800b64c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fd f916 	bl	8008810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e8:	e030      	b.n	800b64c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5ea:	f107 0318 	add.w	r3, r7, #24
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fd fa62 	bl	8008ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5f8:	e028      	b.n	800b64c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5fa:	4b09      	ldr	r3, [pc, #36]	@ (800b620 <UART_SetConfig+0xc2c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f003 0320 	and.w	r3, r3, #32
 800b602:	2b00      	cmp	r3, #0
 800b604:	d012      	beq.n	800b62c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b606:	4b06      	ldr	r3, [pc, #24]	@ (800b620 <UART_SetConfig+0xc2c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	08db      	lsrs	r3, r3, #3
 800b60c:	f003 0303 	and.w	r3, r3, #3
 800b610:	4a04      	ldr	r2, [pc, #16]	@ (800b624 <UART_SetConfig+0xc30>)
 800b612:	fa22 f303 	lsr.w	r3, r2, r3
 800b616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b618:	e018      	b.n	800b64c <UART_SetConfig+0xc58>
 800b61a:	bf00      	nop
 800b61c:	0800ef88 	.word	0x0800ef88
 800b620:	58024400 	.word	0x58024400
 800b624:	03d09000 	.word	0x03d09000
 800b628:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b62c:	4b24      	ldr	r3, [pc, #144]	@ (800b6c0 <UART_SetConfig+0xccc>)
 800b62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b630:	e00c      	b.n	800b64c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b632:	4b24      	ldr	r3, [pc, #144]	@ (800b6c4 <UART_SetConfig+0xcd0>)
 800b634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b636:	e009      	b.n	800b64c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b638:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b63e:	e005      	b.n	800b64c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b640:	2300      	movs	r3, #0
 800b642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b64a:	bf00      	nop
    }

    if (pclk != 0U)
 800b64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d021      	beq.n	800b696 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b656:	4a1c      	ldr	r2, [pc, #112]	@ (800b6c8 <UART_SetConfig+0xcd4>)
 800b658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b65c:	461a      	mov	r2, r3
 800b65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b660:	fbb3 f2f2 	udiv	r2, r3, r2
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	085b      	lsrs	r3, r3, #1
 800b66a:	441a      	add	r2, r3
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	fbb2 f3f3 	udiv	r3, r2, r3
 800b674:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b678:	2b0f      	cmp	r3, #15
 800b67a:	d909      	bls.n	800b690 <UART_SetConfig+0xc9c>
 800b67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b682:	d205      	bcs.n	800b690 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b686:	b29a      	uxth	r2, r3
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	60da      	str	r2, [r3, #12]
 800b68e:	e002      	b.n	800b696 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	2201      	movs	r2, #1
 800b69a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b6b2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3748      	adds	r7, #72	@ 0x48
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6c0:	03d09000 	.word	0x03d09000
 800b6c4:	003d0900 	.word	0x003d0900
 800b6c8:	0800ef88 	.word	0x0800ef88

0800b6cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d8:	f003 0308 	and.w	r3, r3, #8
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00a      	beq.n	800b6f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	430a      	orrs	r2, r1
 800b6f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fa:	f003 0301 	and.w	r3, r3, #1
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00a      	beq.n	800b718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	430a      	orrs	r2, r1
 800b716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71c:	f003 0302 	and.w	r3, r3, #2
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00a      	beq.n	800b73a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	430a      	orrs	r2, r1
 800b738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b73e:	f003 0304 	and.w	r3, r3, #4
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00a      	beq.n	800b75c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	430a      	orrs	r2, r1
 800b75a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b760:	f003 0310 	and.w	r3, r3, #16
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00a      	beq.n	800b77e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	430a      	orrs	r2, r1
 800b77c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b782:	f003 0320 	and.w	r3, r3, #32
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00a      	beq.n	800b7a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	430a      	orrs	r2, r1
 800b79e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d01a      	beq.n	800b7e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7ca:	d10a      	bne.n	800b7e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	430a      	orrs	r2, r1
 800b7e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00a      	beq.n	800b804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	430a      	orrs	r2, r1
 800b802:	605a      	str	r2, [r3, #4]
  }
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b098      	sub	sp, #96	@ 0x60
 800b814:	af02      	add	r7, sp, #8
 800b816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b820:	f7f7 fcc8 	bl	80031b4 <HAL_GetTick>
 800b824:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f003 0308 	and.w	r3, r3, #8
 800b830:	2b08      	cmp	r3, #8
 800b832:	d12f      	bne.n	800b894 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b834:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b83c:	2200      	movs	r2, #0
 800b83e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f88e 	bl	800b964 <UART_WaitOnFlagUntilTimeout>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d022      	beq.n	800b894 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b856:	e853 3f00 	ldrex	r3, [r3]
 800b85a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b85e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b862:	653b      	str	r3, [r7, #80]	@ 0x50
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	461a      	mov	r2, r3
 800b86a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b86c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b86e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b870:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b872:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b874:	e841 2300 	strex	r3, r2, [r1]
 800b878:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b87a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1e6      	bne.n	800b84e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2220      	movs	r2, #32
 800b884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b890:	2303      	movs	r3, #3
 800b892:	e063      	b.n	800b95c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 0304 	and.w	r3, r3, #4
 800b89e:	2b04      	cmp	r3, #4
 800b8a0:	d149      	bne.n	800b936 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f857 	bl	800b964 <UART_WaitOnFlagUntilTimeout>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d03c      	beq.n	800b936 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c4:	e853 3f00 	ldrex	r3, [r3]
 800b8c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8da:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8e2:	e841 2300 	strex	r3, r2, [r1]
 800b8e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1e6      	bne.n	800b8bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	e853 3f00 	ldrex	r3, [r3]
 800b8fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f023 0301 	bic.w	r3, r3, #1
 800b904:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	3308      	adds	r3, #8
 800b90c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b90e:	61fa      	str	r2, [r7, #28]
 800b910:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b912:	69b9      	ldr	r1, [r7, #24]
 800b914:	69fa      	ldr	r2, [r7, #28]
 800b916:	e841 2300 	strex	r3, r2, [r1]
 800b91a:	617b      	str	r3, [r7, #20]
   return(result);
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1e5      	bne.n	800b8ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2220      	movs	r2, #32
 800b926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b932:	2303      	movs	r3, #3
 800b934:	e012      	b.n	800b95c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2220      	movs	r2, #32
 800b93a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2220      	movs	r2, #32
 800b942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3758      	adds	r7, #88	@ 0x58
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	603b      	str	r3, [r7, #0]
 800b970:	4613      	mov	r3, r2
 800b972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b974:	e04f      	b.n	800ba16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b97c:	d04b      	beq.n	800ba16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b97e:	f7f7 fc19 	bl	80031b4 <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	69ba      	ldr	r2, [r7, #24]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d302      	bcc.n	800b994 <UART_WaitOnFlagUntilTimeout+0x30>
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b994:	2303      	movs	r3, #3
 800b996:	e04e      	b.n	800ba36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0304 	and.w	r3, r3, #4
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d037      	beq.n	800ba16 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	2b80      	cmp	r3, #128	@ 0x80
 800b9aa:	d034      	beq.n	800ba16 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2b40      	cmp	r3, #64	@ 0x40
 800b9b0:	d031      	beq.n	800ba16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	69db      	ldr	r3, [r3, #28]
 800b9b8:	f003 0308 	and.w	r3, r3, #8
 800b9bc:	2b08      	cmp	r3, #8
 800b9be:	d110      	bne.n	800b9e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2208      	movs	r2, #8
 800b9c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f000 f839 	bl	800ba40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e029      	b.n	800ba36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9f0:	d111      	bne.n	800ba16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f000 f81f 	bl	800ba40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2220      	movs	r2, #32
 800ba06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e00f      	b.n	800ba36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	69da      	ldr	r2, [r3, #28]
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	4013      	ands	r3, r2
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	bf0c      	ite	eq
 800ba26:	2301      	moveq	r3, #1
 800ba28:	2300      	movne	r3, #0
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	79fb      	ldrb	r3, [r7, #7]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d0a0      	beq.n	800b976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
	...

0800ba40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b095      	sub	sp, #84	@ 0x54
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba50:	e853 3f00 	ldrex	r3, [r3]
 800ba54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	461a      	mov	r2, r3
 800ba64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba66:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba68:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba6e:	e841 2300 	strex	r3, r2, [r1]
 800ba72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1e6      	bne.n	800ba48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	3308      	adds	r3, #8
 800ba80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba82:	6a3b      	ldr	r3, [r7, #32]
 800ba84:	e853 3f00 	ldrex	r3, [r3]
 800ba88:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba8a:	69fa      	ldr	r2, [r7, #28]
 800ba8c:	4b1e      	ldr	r3, [pc, #120]	@ (800bb08 <UART_EndRxTransfer+0xc8>)
 800ba8e:	4013      	ands	r3, r2
 800ba90:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3308      	adds	r3, #8
 800ba98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800baa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baa2:	e841 2300 	strex	r3, r2, [r1]
 800baa6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800baa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1e5      	bne.n	800ba7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d118      	bne.n	800bae8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	e853 3f00 	ldrex	r3, [r3]
 800bac2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	f023 0310 	bic.w	r3, r3, #16
 800baca:	647b      	str	r3, [r7, #68]	@ 0x44
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	461a      	mov	r2, r3
 800bad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bad4:	61bb      	str	r3, [r7, #24]
 800bad6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad8:	6979      	ldr	r1, [r7, #20]
 800bada:	69ba      	ldr	r2, [r7, #24]
 800badc:	e841 2300 	strex	r3, r2, [r1]
 800bae0:	613b      	str	r3, [r7, #16]
   return(result);
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d1e6      	bne.n	800bab6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2220      	movs	r2, #32
 800baec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bafc:	bf00      	nop
 800bafe:	3754      	adds	r7, #84	@ 0x54
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	effffffe 	.word	0xeffffffe

0800bb0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d101      	bne.n	800bb22 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb1e:	2302      	movs	r3, #2
 800bb20:	e027      	b.n	800bb72 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2224      	movs	r2, #36	@ 0x24
 800bb2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f022 0201 	bic.w	r2, r2, #1
 800bb48:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2220      	movs	r2, #32
 800bb64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3714      	adds	r7, #20
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d101      	bne.n	800bb96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb92:	2302      	movs	r3, #2
 800bb94:	e02d      	b.n	800bbf2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2224      	movs	r2, #36	@ 0x24
 800bba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f022 0201 	bic.w	r2, r2, #1
 800bbbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	430a      	orrs	r2, r1
 800bbd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f850 	bl	800bc78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2220      	movs	r2, #32
 800bbe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d101      	bne.n	800bc12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc0e:	2302      	movs	r3, #2
 800bc10:	e02d      	b.n	800bc6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2224      	movs	r2, #36	@ 0x24
 800bc1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f022 0201 	bic.w	r2, r2, #1
 800bc38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	430a      	orrs	r2, r1
 800bc4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f812 	bl	800bc78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2220      	movs	r2, #32
 800bc60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d108      	bne.n	800bc9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc98:	e031      	b.n	800bcfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc9a:	2310      	movs	r3, #16
 800bc9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc9e:	2310      	movs	r3, #16
 800bca0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	0e5b      	lsrs	r3, r3, #25
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	f003 0307 	and.w	r3, r3, #7
 800bcb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	0f5b      	lsrs	r3, r3, #29
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	f003 0307 	and.w	r3, r3, #7
 800bcc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcc2:	7bbb      	ldrb	r3, [r7, #14]
 800bcc4:	7b3a      	ldrb	r2, [r7, #12]
 800bcc6:	4911      	ldr	r1, [pc, #68]	@ (800bd0c <UARTEx_SetNbDataToProcess+0x94>)
 800bcc8:	5c8a      	ldrb	r2, [r1, r2]
 800bcca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcce:	7b3a      	ldrb	r2, [r7, #12]
 800bcd0:	490f      	ldr	r1, [pc, #60]	@ (800bd10 <UARTEx_SetNbDataToProcess+0x98>)
 800bcd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcd4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
 800bce2:	7b7a      	ldrb	r2, [r7, #13]
 800bce4:	4909      	ldr	r1, [pc, #36]	@ (800bd0c <UARTEx_SetNbDataToProcess+0x94>)
 800bce6:	5c8a      	ldrb	r2, [r1, r2]
 800bce8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bcec:	7b7a      	ldrb	r2, [r7, #13]
 800bcee:	4908      	ldr	r1, [pc, #32]	@ (800bd10 <UARTEx_SetNbDataToProcess+0x98>)
 800bcf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcf2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	0800efa0 	.word	0x0800efa0
 800bd10:	0800efa8 	.word	0x0800efa8

0800bd14 <__cvt>:
 800bd14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd16:	ed2d 8b02 	vpush	{d8}
 800bd1a:	eeb0 8b40 	vmov.f64	d8, d0
 800bd1e:	b085      	sub	sp, #20
 800bd20:	4617      	mov	r7, r2
 800bd22:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bd24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd26:	ee18 2a90 	vmov	r2, s17
 800bd2a:	f025 0520 	bic.w	r5, r5, #32
 800bd2e:	2a00      	cmp	r2, #0
 800bd30:	bfb6      	itet	lt
 800bd32:	222d      	movlt	r2, #45	@ 0x2d
 800bd34:	2200      	movge	r2, #0
 800bd36:	eeb1 8b40 	vneglt.f64	d8, d0
 800bd3a:	2d46      	cmp	r5, #70	@ 0x46
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	701a      	strb	r2, [r3, #0]
 800bd40:	d004      	beq.n	800bd4c <__cvt+0x38>
 800bd42:	2d45      	cmp	r5, #69	@ 0x45
 800bd44:	d100      	bne.n	800bd48 <__cvt+0x34>
 800bd46:	3401      	adds	r4, #1
 800bd48:	2102      	movs	r1, #2
 800bd4a:	e000      	b.n	800bd4e <__cvt+0x3a>
 800bd4c:	2103      	movs	r1, #3
 800bd4e:	ab03      	add	r3, sp, #12
 800bd50:	9301      	str	r3, [sp, #4]
 800bd52:	ab02      	add	r3, sp, #8
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	4622      	mov	r2, r4
 800bd58:	4633      	mov	r3, r6
 800bd5a:	eeb0 0b48 	vmov.f64	d0, d8
 800bd5e:	f000 fe5f 	bl	800ca20 <_dtoa_r>
 800bd62:	2d47      	cmp	r5, #71	@ 0x47
 800bd64:	d114      	bne.n	800bd90 <__cvt+0x7c>
 800bd66:	07fb      	lsls	r3, r7, #31
 800bd68:	d50a      	bpl.n	800bd80 <__cvt+0x6c>
 800bd6a:	1902      	adds	r2, r0, r4
 800bd6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd74:	bf08      	it	eq
 800bd76:	9203      	streq	r2, [sp, #12]
 800bd78:	2130      	movs	r1, #48	@ 0x30
 800bd7a:	9b03      	ldr	r3, [sp, #12]
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d319      	bcc.n	800bdb4 <__cvt+0xa0>
 800bd80:	9b03      	ldr	r3, [sp, #12]
 800bd82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd84:	1a1b      	subs	r3, r3, r0
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	b005      	add	sp, #20
 800bd8a:	ecbd 8b02 	vpop	{d8}
 800bd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd90:	2d46      	cmp	r5, #70	@ 0x46
 800bd92:	eb00 0204 	add.w	r2, r0, r4
 800bd96:	d1e9      	bne.n	800bd6c <__cvt+0x58>
 800bd98:	7803      	ldrb	r3, [r0, #0]
 800bd9a:	2b30      	cmp	r3, #48	@ 0x30
 800bd9c:	d107      	bne.n	800bdae <__cvt+0x9a>
 800bd9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda6:	bf1c      	itt	ne
 800bda8:	f1c4 0401 	rsbne	r4, r4, #1
 800bdac:	6034      	strne	r4, [r6, #0]
 800bdae:	6833      	ldr	r3, [r6, #0]
 800bdb0:	441a      	add	r2, r3
 800bdb2:	e7db      	b.n	800bd6c <__cvt+0x58>
 800bdb4:	1c5c      	adds	r4, r3, #1
 800bdb6:	9403      	str	r4, [sp, #12]
 800bdb8:	7019      	strb	r1, [r3, #0]
 800bdba:	e7de      	b.n	800bd7a <__cvt+0x66>

0800bdbc <__exponent>:
 800bdbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdbe:	2900      	cmp	r1, #0
 800bdc0:	bfba      	itte	lt
 800bdc2:	4249      	neglt	r1, r1
 800bdc4:	232d      	movlt	r3, #45	@ 0x2d
 800bdc6:	232b      	movge	r3, #43	@ 0x2b
 800bdc8:	2909      	cmp	r1, #9
 800bdca:	7002      	strb	r2, [r0, #0]
 800bdcc:	7043      	strb	r3, [r0, #1]
 800bdce:	dd29      	ble.n	800be24 <__exponent+0x68>
 800bdd0:	f10d 0307 	add.w	r3, sp, #7
 800bdd4:	461d      	mov	r5, r3
 800bdd6:	270a      	movs	r7, #10
 800bdd8:	461a      	mov	r2, r3
 800bdda:	fbb1 f6f7 	udiv	r6, r1, r7
 800bdde:	fb07 1416 	mls	r4, r7, r6, r1
 800bde2:	3430      	adds	r4, #48	@ 0x30
 800bde4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bde8:	460c      	mov	r4, r1
 800bdea:	2c63      	cmp	r4, #99	@ 0x63
 800bdec:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bdf0:	4631      	mov	r1, r6
 800bdf2:	dcf1      	bgt.n	800bdd8 <__exponent+0x1c>
 800bdf4:	3130      	adds	r1, #48	@ 0x30
 800bdf6:	1e94      	subs	r4, r2, #2
 800bdf8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bdfc:	1c41      	adds	r1, r0, #1
 800bdfe:	4623      	mov	r3, r4
 800be00:	42ab      	cmp	r3, r5
 800be02:	d30a      	bcc.n	800be1a <__exponent+0x5e>
 800be04:	f10d 0309 	add.w	r3, sp, #9
 800be08:	1a9b      	subs	r3, r3, r2
 800be0a:	42ac      	cmp	r4, r5
 800be0c:	bf88      	it	hi
 800be0e:	2300      	movhi	r3, #0
 800be10:	3302      	adds	r3, #2
 800be12:	4403      	add	r3, r0
 800be14:	1a18      	subs	r0, r3, r0
 800be16:	b003      	add	sp, #12
 800be18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be1a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be1e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800be22:	e7ed      	b.n	800be00 <__exponent+0x44>
 800be24:	2330      	movs	r3, #48	@ 0x30
 800be26:	3130      	adds	r1, #48	@ 0x30
 800be28:	7083      	strb	r3, [r0, #2]
 800be2a:	70c1      	strb	r1, [r0, #3]
 800be2c:	1d03      	adds	r3, r0, #4
 800be2e:	e7f1      	b.n	800be14 <__exponent+0x58>

0800be30 <_printf_float>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	b08d      	sub	sp, #52	@ 0x34
 800be36:	460c      	mov	r4, r1
 800be38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800be3c:	4616      	mov	r6, r2
 800be3e:	461f      	mov	r7, r3
 800be40:	4605      	mov	r5, r0
 800be42:	f000 fcdf 	bl	800c804 <_localeconv_r>
 800be46:	f8d0 b000 	ldr.w	fp, [r0]
 800be4a:	4658      	mov	r0, fp
 800be4c:	f7f4 fab0 	bl	80003b0 <strlen>
 800be50:	2300      	movs	r3, #0
 800be52:	930a      	str	r3, [sp, #40]	@ 0x28
 800be54:	f8d8 3000 	ldr.w	r3, [r8]
 800be58:	f894 9018 	ldrb.w	r9, [r4, #24]
 800be5c:	6822      	ldr	r2, [r4, #0]
 800be5e:	9005      	str	r0, [sp, #20]
 800be60:	3307      	adds	r3, #7
 800be62:	f023 0307 	bic.w	r3, r3, #7
 800be66:	f103 0108 	add.w	r1, r3, #8
 800be6a:	f8c8 1000 	str.w	r1, [r8]
 800be6e:	ed93 0b00 	vldr	d0, [r3]
 800be72:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c0d0 <_printf_float+0x2a0>
 800be76:	eeb0 7bc0 	vabs.f64	d7, d0
 800be7a:	eeb4 7b46 	vcmp.f64	d7, d6
 800be7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be82:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800be86:	dd24      	ble.n	800bed2 <_printf_float+0xa2>
 800be88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be90:	d502      	bpl.n	800be98 <_printf_float+0x68>
 800be92:	232d      	movs	r3, #45	@ 0x2d
 800be94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be98:	498f      	ldr	r1, [pc, #572]	@ (800c0d8 <_printf_float+0x2a8>)
 800be9a:	4b90      	ldr	r3, [pc, #576]	@ (800c0dc <_printf_float+0x2ac>)
 800be9c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bea0:	bf8c      	ite	hi
 800bea2:	4688      	movhi	r8, r1
 800bea4:	4698      	movls	r8, r3
 800bea6:	f022 0204 	bic.w	r2, r2, #4
 800beaa:	2303      	movs	r3, #3
 800beac:	6123      	str	r3, [r4, #16]
 800beae:	6022      	str	r2, [r4, #0]
 800beb0:	f04f 0a00 	mov.w	sl, #0
 800beb4:	9700      	str	r7, [sp, #0]
 800beb6:	4633      	mov	r3, r6
 800beb8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800beba:	4621      	mov	r1, r4
 800bebc:	4628      	mov	r0, r5
 800bebe:	f000 f9d1 	bl	800c264 <_printf_common>
 800bec2:	3001      	adds	r0, #1
 800bec4:	f040 8089 	bne.w	800bfda <_printf_float+0x1aa>
 800bec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800becc:	b00d      	add	sp, #52	@ 0x34
 800bece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed2:	eeb4 0b40 	vcmp.f64	d0, d0
 800bed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beda:	d709      	bvc.n	800bef0 <_printf_float+0xc0>
 800bedc:	ee10 3a90 	vmov	r3, s1
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	bfbc      	itt	lt
 800bee4:	232d      	movlt	r3, #45	@ 0x2d
 800bee6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800beea:	497d      	ldr	r1, [pc, #500]	@ (800c0e0 <_printf_float+0x2b0>)
 800beec:	4b7d      	ldr	r3, [pc, #500]	@ (800c0e4 <_printf_float+0x2b4>)
 800beee:	e7d5      	b.n	800be9c <_printf_float+0x6c>
 800bef0:	6863      	ldr	r3, [r4, #4]
 800bef2:	1c59      	adds	r1, r3, #1
 800bef4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bef8:	d139      	bne.n	800bf6e <_printf_float+0x13e>
 800befa:	2306      	movs	r3, #6
 800befc:	6063      	str	r3, [r4, #4]
 800befe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf02:	2300      	movs	r3, #0
 800bf04:	6022      	str	r2, [r4, #0]
 800bf06:	9303      	str	r3, [sp, #12]
 800bf08:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bf0e:	ab09      	add	r3, sp, #36	@ 0x24
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	6861      	ldr	r1, [r4, #4]
 800bf14:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f7ff fefb 	bl	800bd14 <__cvt>
 800bf1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bf22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf24:	4680      	mov	r8, r0
 800bf26:	d129      	bne.n	800bf7c <_printf_float+0x14c>
 800bf28:	1cc8      	adds	r0, r1, #3
 800bf2a:	db02      	blt.n	800bf32 <_printf_float+0x102>
 800bf2c:	6863      	ldr	r3, [r4, #4]
 800bf2e:	4299      	cmp	r1, r3
 800bf30:	dd41      	ble.n	800bfb6 <_printf_float+0x186>
 800bf32:	f1a9 0902 	sub.w	r9, r9, #2
 800bf36:	fa5f f989 	uxtb.w	r9, r9
 800bf3a:	3901      	subs	r1, #1
 800bf3c:	464a      	mov	r2, r9
 800bf3e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bf42:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf44:	f7ff ff3a 	bl	800bdbc <__exponent>
 800bf48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf4a:	1813      	adds	r3, r2, r0
 800bf4c:	2a01      	cmp	r2, #1
 800bf4e:	4682      	mov	sl, r0
 800bf50:	6123      	str	r3, [r4, #16]
 800bf52:	dc02      	bgt.n	800bf5a <_printf_float+0x12a>
 800bf54:	6822      	ldr	r2, [r4, #0]
 800bf56:	07d2      	lsls	r2, r2, #31
 800bf58:	d501      	bpl.n	800bf5e <_printf_float+0x12e>
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	6123      	str	r3, [r4, #16]
 800bf5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d0a6      	beq.n	800beb4 <_printf_float+0x84>
 800bf66:	232d      	movs	r3, #45	@ 0x2d
 800bf68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf6c:	e7a2      	b.n	800beb4 <_printf_float+0x84>
 800bf6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bf72:	d1c4      	bne.n	800befe <_printf_float+0xce>
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1c2      	bne.n	800befe <_printf_float+0xce>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e7bf      	b.n	800befc <_printf_float+0xcc>
 800bf7c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bf80:	d9db      	bls.n	800bf3a <_printf_float+0x10a>
 800bf82:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bf86:	d118      	bne.n	800bfba <_printf_float+0x18a>
 800bf88:	2900      	cmp	r1, #0
 800bf8a:	6863      	ldr	r3, [r4, #4]
 800bf8c:	dd0b      	ble.n	800bfa6 <_printf_float+0x176>
 800bf8e:	6121      	str	r1, [r4, #16]
 800bf90:	b913      	cbnz	r3, 800bf98 <_printf_float+0x168>
 800bf92:	6822      	ldr	r2, [r4, #0]
 800bf94:	07d0      	lsls	r0, r2, #31
 800bf96:	d502      	bpl.n	800bf9e <_printf_float+0x16e>
 800bf98:	3301      	adds	r3, #1
 800bf9a:	440b      	add	r3, r1
 800bf9c:	6123      	str	r3, [r4, #16]
 800bf9e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bfa0:	f04f 0a00 	mov.w	sl, #0
 800bfa4:	e7db      	b.n	800bf5e <_printf_float+0x12e>
 800bfa6:	b913      	cbnz	r3, 800bfae <_printf_float+0x17e>
 800bfa8:	6822      	ldr	r2, [r4, #0]
 800bfaa:	07d2      	lsls	r2, r2, #31
 800bfac:	d501      	bpl.n	800bfb2 <_printf_float+0x182>
 800bfae:	3302      	adds	r3, #2
 800bfb0:	e7f4      	b.n	800bf9c <_printf_float+0x16c>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e7f2      	b.n	800bf9c <_printf_float+0x16c>
 800bfb6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800bfba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfbc:	4299      	cmp	r1, r3
 800bfbe:	db05      	blt.n	800bfcc <_printf_float+0x19c>
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	6121      	str	r1, [r4, #16]
 800bfc4:	07d8      	lsls	r0, r3, #31
 800bfc6:	d5ea      	bpl.n	800bf9e <_printf_float+0x16e>
 800bfc8:	1c4b      	adds	r3, r1, #1
 800bfca:	e7e7      	b.n	800bf9c <_printf_float+0x16c>
 800bfcc:	2900      	cmp	r1, #0
 800bfce:	bfd4      	ite	le
 800bfd0:	f1c1 0202 	rsble	r2, r1, #2
 800bfd4:	2201      	movgt	r2, #1
 800bfd6:	4413      	add	r3, r2
 800bfd8:	e7e0      	b.n	800bf9c <_printf_float+0x16c>
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	055a      	lsls	r2, r3, #21
 800bfde:	d407      	bmi.n	800bff0 <_printf_float+0x1c0>
 800bfe0:	6923      	ldr	r3, [r4, #16]
 800bfe2:	4642      	mov	r2, r8
 800bfe4:	4631      	mov	r1, r6
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	47b8      	blx	r7
 800bfea:	3001      	adds	r0, #1
 800bfec:	d12a      	bne.n	800c044 <_printf_float+0x214>
 800bfee:	e76b      	b.n	800bec8 <_printf_float+0x98>
 800bff0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bff4:	f240 80e0 	bls.w	800c1b8 <_printf_float+0x388>
 800bff8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800bffc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c004:	d133      	bne.n	800c06e <_printf_float+0x23e>
 800c006:	4a38      	ldr	r2, [pc, #224]	@ (800c0e8 <_printf_float+0x2b8>)
 800c008:	2301      	movs	r3, #1
 800c00a:	4631      	mov	r1, r6
 800c00c:	4628      	mov	r0, r5
 800c00e:	47b8      	blx	r7
 800c010:	3001      	adds	r0, #1
 800c012:	f43f af59 	beq.w	800bec8 <_printf_float+0x98>
 800c016:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c01a:	4543      	cmp	r3, r8
 800c01c:	db02      	blt.n	800c024 <_printf_float+0x1f4>
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	07d8      	lsls	r0, r3, #31
 800c022:	d50f      	bpl.n	800c044 <_printf_float+0x214>
 800c024:	9b05      	ldr	r3, [sp, #20]
 800c026:	465a      	mov	r2, fp
 800c028:	4631      	mov	r1, r6
 800c02a:	4628      	mov	r0, r5
 800c02c:	47b8      	blx	r7
 800c02e:	3001      	adds	r0, #1
 800c030:	f43f af4a 	beq.w	800bec8 <_printf_float+0x98>
 800c034:	f04f 0900 	mov.w	r9, #0
 800c038:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c03c:	f104 0a1a 	add.w	sl, r4, #26
 800c040:	45c8      	cmp	r8, r9
 800c042:	dc09      	bgt.n	800c058 <_printf_float+0x228>
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	079b      	lsls	r3, r3, #30
 800c048:	f100 8107 	bmi.w	800c25a <_printf_float+0x42a>
 800c04c:	68e0      	ldr	r0, [r4, #12]
 800c04e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c050:	4298      	cmp	r0, r3
 800c052:	bfb8      	it	lt
 800c054:	4618      	movlt	r0, r3
 800c056:	e739      	b.n	800becc <_printf_float+0x9c>
 800c058:	2301      	movs	r3, #1
 800c05a:	4652      	mov	r2, sl
 800c05c:	4631      	mov	r1, r6
 800c05e:	4628      	mov	r0, r5
 800c060:	47b8      	blx	r7
 800c062:	3001      	adds	r0, #1
 800c064:	f43f af30 	beq.w	800bec8 <_printf_float+0x98>
 800c068:	f109 0901 	add.w	r9, r9, #1
 800c06c:	e7e8      	b.n	800c040 <_printf_float+0x210>
 800c06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c070:	2b00      	cmp	r3, #0
 800c072:	dc3b      	bgt.n	800c0ec <_printf_float+0x2bc>
 800c074:	4a1c      	ldr	r2, [pc, #112]	@ (800c0e8 <_printf_float+0x2b8>)
 800c076:	2301      	movs	r3, #1
 800c078:	4631      	mov	r1, r6
 800c07a:	4628      	mov	r0, r5
 800c07c:	47b8      	blx	r7
 800c07e:	3001      	adds	r0, #1
 800c080:	f43f af22 	beq.w	800bec8 <_printf_float+0x98>
 800c084:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c088:	ea59 0303 	orrs.w	r3, r9, r3
 800c08c:	d102      	bne.n	800c094 <_printf_float+0x264>
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	07d9      	lsls	r1, r3, #31
 800c092:	d5d7      	bpl.n	800c044 <_printf_float+0x214>
 800c094:	9b05      	ldr	r3, [sp, #20]
 800c096:	465a      	mov	r2, fp
 800c098:	4631      	mov	r1, r6
 800c09a:	4628      	mov	r0, r5
 800c09c:	47b8      	blx	r7
 800c09e:	3001      	adds	r0, #1
 800c0a0:	f43f af12 	beq.w	800bec8 <_printf_float+0x98>
 800c0a4:	f04f 0a00 	mov.w	sl, #0
 800c0a8:	f104 0b1a 	add.w	fp, r4, #26
 800c0ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ae:	425b      	negs	r3, r3
 800c0b0:	4553      	cmp	r3, sl
 800c0b2:	dc01      	bgt.n	800c0b8 <_printf_float+0x288>
 800c0b4:	464b      	mov	r3, r9
 800c0b6:	e794      	b.n	800bfe2 <_printf_float+0x1b2>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	465a      	mov	r2, fp
 800c0bc:	4631      	mov	r1, r6
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b8      	blx	r7
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	f43f af00 	beq.w	800bec8 <_printf_float+0x98>
 800c0c8:	f10a 0a01 	add.w	sl, sl, #1
 800c0cc:	e7ee      	b.n	800c0ac <_printf_float+0x27c>
 800c0ce:	bf00      	nop
 800c0d0:	ffffffff 	.word	0xffffffff
 800c0d4:	7fefffff 	.word	0x7fefffff
 800c0d8:	0800efb4 	.word	0x0800efb4
 800c0dc:	0800efb0 	.word	0x0800efb0
 800c0e0:	0800efbc 	.word	0x0800efbc
 800c0e4:	0800efb8 	.word	0x0800efb8
 800c0e8:	0800efc0 	.word	0x0800efc0
 800c0ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c0ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c0f2:	4553      	cmp	r3, sl
 800c0f4:	bfa8      	it	ge
 800c0f6:	4653      	movge	r3, sl
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	4699      	mov	r9, r3
 800c0fc:	dc37      	bgt.n	800c16e <_printf_float+0x33e>
 800c0fe:	2300      	movs	r3, #0
 800c100:	9307      	str	r3, [sp, #28]
 800c102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c106:	f104 021a 	add.w	r2, r4, #26
 800c10a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c10c:	9907      	ldr	r1, [sp, #28]
 800c10e:	9306      	str	r3, [sp, #24]
 800c110:	eba3 0309 	sub.w	r3, r3, r9
 800c114:	428b      	cmp	r3, r1
 800c116:	dc31      	bgt.n	800c17c <_printf_float+0x34c>
 800c118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c11a:	459a      	cmp	sl, r3
 800c11c:	dc3b      	bgt.n	800c196 <_printf_float+0x366>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	07da      	lsls	r2, r3, #31
 800c122:	d438      	bmi.n	800c196 <_printf_float+0x366>
 800c124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c126:	ebaa 0903 	sub.w	r9, sl, r3
 800c12a:	9b06      	ldr	r3, [sp, #24]
 800c12c:	ebaa 0303 	sub.w	r3, sl, r3
 800c130:	4599      	cmp	r9, r3
 800c132:	bfa8      	it	ge
 800c134:	4699      	movge	r9, r3
 800c136:	f1b9 0f00 	cmp.w	r9, #0
 800c13a:	dc34      	bgt.n	800c1a6 <_printf_float+0x376>
 800c13c:	f04f 0800 	mov.w	r8, #0
 800c140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c144:	f104 0b1a 	add.w	fp, r4, #26
 800c148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c14a:	ebaa 0303 	sub.w	r3, sl, r3
 800c14e:	eba3 0309 	sub.w	r3, r3, r9
 800c152:	4543      	cmp	r3, r8
 800c154:	f77f af76 	ble.w	800c044 <_printf_float+0x214>
 800c158:	2301      	movs	r3, #1
 800c15a:	465a      	mov	r2, fp
 800c15c:	4631      	mov	r1, r6
 800c15e:	4628      	mov	r0, r5
 800c160:	47b8      	blx	r7
 800c162:	3001      	adds	r0, #1
 800c164:	f43f aeb0 	beq.w	800bec8 <_printf_float+0x98>
 800c168:	f108 0801 	add.w	r8, r8, #1
 800c16c:	e7ec      	b.n	800c148 <_printf_float+0x318>
 800c16e:	4642      	mov	r2, r8
 800c170:	4631      	mov	r1, r6
 800c172:	4628      	mov	r0, r5
 800c174:	47b8      	blx	r7
 800c176:	3001      	adds	r0, #1
 800c178:	d1c1      	bne.n	800c0fe <_printf_float+0x2ce>
 800c17a:	e6a5      	b.n	800bec8 <_printf_float+0x98>
 800c17c:	2301      	movs	r3, #1
 800c17e:	4631      	mov	r1, r6
 800c180:	4628      	mov	r0, r5
 800c182:	9206      	str	r2, [sp, #24]
 800c184:	47b8      	blx	r7
 800c186:	3001      	adds	r0, #1
 800c188:	f43f ae9e 	beq.w	800bec8 <_printf_float+0x98>
 800c18c:	9b07      	ldr	r3, [sp, #28]
 800c18e:	9a06      	ldr	r2, [sp, #24]
 800c190:	3301      	adds	r3, #1
 800c192:	9307      	str	r3, [sp, #28]
 800c194:	e7b9      	b.n	800c10a <_printf_float+0x2da>
 800c196:	9b05      	ldr	r3, [sp, #20]
 800c198:	465a      	mov	r2, fp
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	d1bf      	bne.n	800c124 <_printf_float+0x2f4>
 800c1a4:	e690      	b.n	800bec8 <_printf_float+0x98>
 800c1a6:	9a06      	ldr	r2, [sp, #24]
 800c1a8:	464b      	mov	r3, r9
 800c1aa:	4442      	add	r2, r8
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	47b8      	blx	r7
 800c1b2:	3001      	adds	r0, #1
 800c1b4:	d1c2      	bne.n	800c13c <_printf_float+0x30c>
 800c1b6:	e687      	b.n	800bec8 <_printf_float+0x98>
 800c1b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c1bc:	f1b9 0f01 	cmp.w	r9, #1
 800c1c0:	dc01      	bgt.n	800c1c6 <_printf_float+0x396>
 800c1c2:	07db      	lsls	r3, r3, #31
 800c1c4:	d536      	bpl.n	800c234 <_printf_float+0x404>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	4642      	mov	r2, r8
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b8      	blx	r7
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	f43f ae79 	beq.w	800bec8 <_printf_float+0x98>
 800c1d6:	9b05      	ldr	r3, [sp, #20]
 800c1d8:	465a      	mov	r2, fp
 800c1da:	4631      	mov	r1, r6
 800c1dc:	4628      	mov	r0, r5
 800c1de:	47b8      	blx	r7
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	f43f ae71 	beq.w	800bec8 <_printf_float+0x98>
 800c1e6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c1ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800c1f6:	d018      	beq.n	800c22a <_printf_float+0x3fa>
 800c1f8:	464b      	mov	r3, r9
 800c1fa:	f108 0201 	add.w	r2, r8, #1
 800c1fe:	4631      	mov	r1, r6
 800c200:	4628      	mov	r0, r5
 800c202:	47b8      	blx	r7
 800c204:	3001      	adds	r0, #1
 800c206:	d10c      	bne.n	800c222 <_printf_float+0x3f2>
 800c208:	e65e      	b.n	800bec8 <_printf_float+0x98>
 800c20a:	2301      	movs	r3, #1
 800c20c:	465a      	mov	r2, fp
 800c20e:	4631      	mov	r1, r6
 800c210:	4628      	mov	r0, r5
 800c212:	47b8      	blx	r7
 800c214:	3001      	adds	r0, #1
 800c216:	f43f ae57 	beq.w	800bec8 <_printf_float+0x98>
 800c21a:	f108 0801 	add.w	r8, r8, #1
 800c21e:	45c8      	cmp	r8, r9
 800c220:	dbf3      	blt.n	800c20a <_printf_float+0x3da>
 800c222:	4653      	mov	r3, sl
 800c224:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c228:	e6dc      	b.n	800bfe4 <_printf_float+0x1b4>
 800c22a:	f04f 0800 	mov.w	r8, #0
 800c22e:	f104 0b1a 	add.w	fp, r4, #26
 800c232:	e7f4      	b.n	800c21e <_printf_float+0x3ee>
 800c234:	2301      	movs	r3, #1
 800c236:	4642      	mov	r2, r8
 800c238:	e7e1      	b.n	800c1fe <_printf_float+0x3ce>
 800c23a:	2301      	movs	r3, #1
 800c23c:	464a      	mov	r2, r9
 800c23e:	4631      	mov	r1, r6
 800c240:	4628      	mov	r0, r5
 800c242:	47b8      	blx	r7
 800c244:	3001      	adds	r0, #1
 800c246:	f43f ae3f 	beq.w	800bec8 <_printf_float+0x98>
 800c24a:	f108 0801 	add.w	r8, r8, #1
 800c24e:	68e3      	ldr	r3, [r4, #12]
 800c250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c252:	1a5b      	subs	r3, r3, r1
 800c254:	4543      	cmp	r3, r8
 800c256:	dcf0      	bgt.n	800c23a <_printf_float+0x40a>
 800c258:	e6f8      	b.n	800c04c <_printf_float+0x21c>
 800c25a:	f04f 0800 	mov.w	r8, #0
 800c25e:	f104 0919 	add.w	r9, r4, #25
 800c262:	e7f4      	b.n	800c24e <_printf_float+0x41e>

0800c264 <_printf_common>:
 800c264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c268:	4616      	mov	r6, r2
 800c26a:	4698      	mov	r8, r3
 800c26c:	688a      	ldr	r2, [r1, #8]
 800c26e:	690b      	ldr	r3, [r1, #16]
 800c270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c274:	4293      	cmp	r3, r2
 800c276:	bfb8      	it	lt
 800c278:	4613      	movlt	r3, r2
 800c27a:	6033      	str	r3, [r6, #0]
 800c27c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c280:	4607      	mov	r7, r0
 800c282:	460c      	mov	r4, r1
 800c284:	b10a      	cbz	r2, 800c28a <_printf_common+0x26>
 800c286:	3301      	adds	r3, #1
 800c288:	6033      	str	r3, [r6, #0]
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	0699      	lsls	r1, r3, #26
 800c28e:	bf42      	ittt	mi
 800c290:	6833      	ldrmi	r3, [r6, #0]
 800c292:	3302      	addmi	r3, #2
 800c294:	6033      	strmi	r3, [r6, #0]
 800c296:	6825      	ldr	r5, [r4, #0]
 800c298:	f015 0506 	ands.w	r5, r5, #6
 800c29c:	d106      	bne.n	800c2ac <_printf_common+0x48>
 800c29e:	f104 0a19 	add.w	sl, r4, #25
 800c2a2:	68e3      	ldr	r3, [r4, #12]
 800c2a4:	6832      	ldr	r2, [r6, #0]
 800c2a6:	1a9b      	subs	r3, r3, r2
 800c2a8:	42ab      	cmp	r3, r5
 800c2aa:	dc26      	bgt.n	800c2fa <_printf_common+0x96>
 800c2ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c2b0:	6822      	ldr	r2, [r4, #0]
 800c2b2:	3b00      	subs	r3, #0
 800c2b4:	bf18      	it	ne
 800c2b6:	2301      	movne	r3, #1
 800c2b8:	0692      	lsls	r2, r2, #26
 800c2ba:	d42b      	bmi.n	800c314 <_printf_common+0xb0>
 800c2bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2c0:	4641      	mov	r1, r8
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	47c8      	blx	r9
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	d01e      	beq.n	800c308 <_printf_common+0xa4>
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	6922      	ldr	r2, [r4, #16]
 800c2ce:	f003 0306 	and.w	r3, r3, #6
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	bf02      	ittt	eq
 800c2d6:	68e5      	ldreq	r5, [r4, #12]
 800c2d8:	6833      	ldreq	r3, [r6, #0]
 800c2da:	1aed      	subeq	r5, r5, r3
 800c2dc:	68a3      	ldr	r3, [r4, #8]
 800c2de:	bf0c      	ite	eq
 800c2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2e4:	2500      	movne	r5, #0
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	bfc4      	itt	gt
 800c2ea:	1a9b      	subgt	r3, r3, r2
 800c2ec:	18ed      	addgt	r5, r5, r3
 800c2ee:	2600      	movs	r6, #0
 800c2f0:	341a      	adds	r4, #26
 800c2f2:	42b5      	cmp	r5, r6
 800c2f4:	d11a      	bne.n	800c32c <_printf_common+0xc8>
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	e008      	b.n	800c30c <_printf_common+0xa8>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4652      	mov	r2, sl
 800c2fe:	4641      	mov	r1, r8
 800c300:	4638      	mov	r0, r7
 800c302:	47c8      	blx	r9
 800c304:	3001      	adds	r0, #1
 800c306:	d103      	bne.n	800c310 <_printf_common+0xac>
 800c308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c310:	3501      	adds	r5, #1
 800c312:	e7c6      	b.n	800c2a2 <_printf_common+0x3e>
 800c314:	18e1      	adds	r1, r4, r3
 800c316:	1c5a      	adds	r2, r3, #1
 800c318:	2030      	movs	r0, #48	@ 0x30
 800c31a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c31e:	4422      	add	r2, r4
 800c320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c328:	3302      	adds	r3, #2
 800c32a:	e7c7      	b.n	800c2bc <_printf_common+0x58>
 800c32c:	2301      	movs	r3, #1
 800c32e:	4622      	mov	r2, r4
 800c330:	4641      	mov	r1, r8
 800c332:	4638      	mov	r0, r7
 800c334:	47c8      	blx	r9
 800c336:	3001      	adds	r0, #1
 800c338:	d0e6      	beq.n	800c308 <_printf_common+0xa4>
 800c33a:	3601      	adds	r6, #1
 800c33c:	e7d9      	b.n	800c2f2 <_printf_common+0x8e>
	...

0800c340 <_printf_i>:
 800c340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c344:	7e0f      	ldrb	r7, [r1, #24]
 800c346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c348:	2f78      	cmp	r7, #120	@ 0x78
 800c34a:	4691      	mov	r9, r2
 800c34c:	4680      	mov	r8, r0
 800c34e:	460c      	mov	r4, r1
 800c350:	469a      	mov	sl, r3
 800c352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c356:	d807      	bhi.n	800c368 <_printf_i+0x28>
 800c358:	2f62      	cmp	r7, #98	@ 0x62
 800c35a:	d80a      	bhi.n	800c372 <_printf_i+0x32>
 800c35c:	2f00      	cmp	r7, #0
 800c35e:	f000 80d1 	beq.w	800c504 <_printf_i+0x1c4>
 800c362:	2f58      	cmp	r7, #88	@ 0x58
 800c364:	f000 80b8 	beq.w	800c4d8 <_printf_i+0x198>
 800c368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c36c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c370:	e03a      	b.n	800c3e8 <_printf_i+0xa8>
 800c372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c376:	2b15      	cmp	r3, #21
 800c378:	d8f6      	bhi.n	800c368 <_printf_i+0x28>
 800c37a:	a101      	add	r1, pc, #4	@ (adr r1, 800c380 <_printf_i+0x40>)
 800c37c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c380:	0800c3d9 	.word	0x0800c3d9
 800c384:	0800c3ed 	.word	0x0800c3ed
 800c388:	0800c369 	.word	0x0800c369
 800c38c:	0800c369 	.word	0x0800c369
 800c390:	0800c369 	.word	0x0800c369
 800c394:	0800c369 	.word	0x0800c369
 800c398:	0800c3ed 	.word	0x0800c3ed
 800c39c:	0800c369 	.word	0x0800c369
 800c3a0:	0800c369 	.word	0x0800c369
 800c3a4:	0800c369 	.word	0x0800c369
 800c3a8:	0800c369 	.word	0x0800c369
 800c3ac:	0800c4eb 	.word	0x0800c4eb
 800c3b0:	0800c417 	.word	0x0800c417
 800c3b4:	0800c4a5 	.word	0x0800c4a5
 800c3b8:	0800c369 	.word	0x0800c369
 800c3bc:	0800c369 	.word	0x0800c369
 800c3c0:	0800c50d 	.word	0x0800c50d
 800c3c4:	0800c369 	.word	0x0800c369
 800c3c8:	0800c417 	.word	0x0800c417
 800c3cc:	0800c369 	.word	0x0800c369
 800c3d0:	0800c369 	.word	0x0800c369
 800c3d4:	0800c4ad 	.word	0x0800c4ad
 800c3d8:	6833      	ldr	r3, [r6, #0]
 800c3da:	1d1a      	adds	r2, r3, #4
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	6032      	str	r2, [r6, #0]
 800c3e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e09c      	b.n	800c526 <_printf_i+0x1e6>
 800c3ec:	6833      	ldr	r3, [r6, #0]
 800c3ee:	6820      	ldr	r0, [r4, #0]
 800c3f0:	1d19      	adds	r1, r3, #4
 800c3f2:	6031      	str	r1, [r6, #0]
 800c3f4:	0606      	lsls	r6, r0, #24
 800c3f6:	d501      	bpl.n	800c3fc <_printf_i+0xbc>
 800c3f8:	681d      	ldr	r5, [r3, #0]
 800c3fa:	e003      	b.n	800c404 <_printf_i+0xc4>
 800c3fc:	0645      	lsls	r5, r0, #25
 800c3fe:	d5fb      	bpl.n	800c3f8 <_printf_i+0xb8>
 800c400:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c404:	2d00      	cmp	r5, #0
 800c406:	da03      	bge.n	800c410 <_printf_i+0xd0>
 800c408:	232d      	movs	r3, #45	@ 0x2d
 800c40a:	426d      	negs	r5, r5
 800c40c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c410:	4858      	ldr	r0, [pc, #352]	@ (800c574 <_printf_i+0x234>)
 800c412:	230a      	movs	r3, #10
 800c414:	e011      	b.n	800c43a <_printf_i+0xfa>
 800c416:	6821      	ldr	r1, [r4, #0]
 800c418:	6833      	ldr	r3, [r6, #0]
 800c41a:	0608      	lsls	r0, r1, #24
 800c41c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c420:	d402      	bmi.n	800c428 <_printf_i+0xe8>
 800c422:	0649      	lsls	r1, r1, #25
 800c424:	bf48      	it	mi
 800c426:	b2ad      	uxthmi	r5, r5
 800c428:	2f6f      	cmp	r7, #111	@ 0x6f
 800c42a:	4852      	ldr	r0, [pc, #328]	@ (800c574 <_printf_i+0x234>)
 800c42c:	6033      	str	r3, [r6, #0]
 800c42e:	bf14      	ite	ne
 800c430:	230a      	movne	r3, #10
 800c432:	2308      	moveq	r3, #8
 800c434:	2100      	movs	r1, #0
 800c436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c43a:	6866      	ldr	r6, [r4, #4]
 800c43c:	60a6      	str	r6, [r4, #8]
 800c43e:	2e00      	cmp	r6, #0
 800c440:	db05      	blt.n	800c44e <_printf_i+0x10e>
 800c442:	6821      	ldr	r1, [r4, #0]
 800c444:	432e      	orrs	r6, r5
 800c446:	f021 0104 	bic.w	r1, r1, #4
 800c44a:	6021      	str	r1, [r4, #0]
 800c44c:	d04b      	beq.n	800c4e6 <_printf_i+0x1a6>
 800c44e:	4616      	mov	r6, r2
 800c450:	fbb5 f1f3 	udiv	r1, r5, r3
 800c454:	fb03 5711 	mls	r7, r3, r1, r5
 800c458:	5dc7      	ldrb	r7, [r0, r7]
 800c45a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c45e:	462f      	mov	r7, r5
 800c460:	42bb      	cmp	r3, r7
 800c462:	460d      	mov	r5, r1
 800c464:	d9f4      	bls.n	800c450 <_printf_i+0x110>
 800c466:	2b08      	cmp	r3, #8
 800c468:	d10b      	bne.n	800c482 <_printf_i+0x142>
 800c46a:	6823      	ldr	r3, [r4, #0]
 800c46c:	07df      	lsls	r7, r3, #31
 800c46e:	d508      	bpl.n	800c482 <_printf_i+0x142>
 800c470:	6923      	ldr	r3, [r4, #16]
 800c472:	6861      	ldr	r1, [r4, #4]
 800c474:	4299      	cmp	r1, r3
 800c476:	bfde      	ittt	le
 800c478:	2330      	movle	r3, #48	@ 0x30
 800c47a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c47e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c482:	1b92      	subs	r2, r2, r6
 800c484:	6122      	str	r2, [r4, #16]
 800c486:	f8cd a000 	str.w	sl, [sp]
 800c48a:	464b      	mov	r3, r9
 800c48c:	aa03      	add	r2, sp, #12
 800c48e:	4621      	mov	r1, r4
 800c490:	4640      	mov	r0, r8
 800c492:	f7ff fee7 	bl	800c264 <_printf_common>
 800c496:	3001      	adds	r0, #1
 800c498:	d14a      	bne.n	800c530 <_printf_i+0x1f0>
 800c49a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c49e:	b004      	add	sp, #16
 800c4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	f043 0320 	orr.w	r3, r3, #32
 800c4aa:	6023      	str	r3, [r4, #0]
 800c4ac:	4832      	ldr	r0, [pc, #200]	@ (800c578 <_printf_i+0x238>)
 800c4ae:	2778      	movs	r7, #120	@ 0x78
 800c4b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	6831      	ldr	r1, [r6, #0]
 800c4b8:	061f      	lsls	r7, r3, #24
 800c4ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4be:	d402      	bmi.n	800c4c6 <_printf_i+0x186>
 800c4c0:	065f      	lsls	r7, r3, #25
 800c4c2:	bf48      	it	mi
 800c4c4:	b2ad      	uxthmi	r5, r5
 800c4c6:	6031      	str	r1, [r6, #0]
 800c4c8:	07d9      	lsls	r1, r3, #31
 800c4ca:	bf44      	itt	mi
 800c4cc:	f043 0320 	orrmi.w	r3, r3, #32
 800c4d0:	6023      	strmi	r3, [r4, #0]
 800c4d2:	b11d      	cbz	r5, 800c4dc <_printf_i+0x19c>
 800c4d4:	2310      	movs	r3, #16
 800c4d6:	e7ad      	b.n	800c434 <_printf_i+0xf4>
 800c4d8:	4826      	ldr	r0, [pc, #152]	@ (800c574 <_printf_i+0x234>)
 800c4da:	e7e9      	b.n	800c4b0 <_printf_i+0x170>
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	f023 0320 	bic.w	r3, r3, #32
 800c4e2:	6023      	str	r3, [r4, #0]
 800c4e4:	e7f6      	b.n	800c4d4 <_printf_i+0x194>
 800c4e6:	4616      	mov	r6, r2
 800c4e8:	e7bd      	b.n	800c466 <_printf_i+0x126>
 800c4ea:	6833      	ldr	r3, [r6, #0]
 800c4ec:	6825      	ldr	r5, [r4, #0]
 800c4ee:	6961      	ldr	r1, [r4, #20]
 800c4f0:	1d18      	adds	r0, r3, #4
 800c4f2:	6030      	str	r0, [r6, #0]
 800c4f4:	062e      	lsls	r6, r5, #24
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	d501      	bpl.n	800c4fe <_printf_i+0x1be>
 800c4fa:	6019      	str	r1, [r3, #0]
 800c4fc:	e002      	b.n	800c504 <_printf_i+0x1c4>
 800c4fe:	0668      	lsls	r0, r5, #25
 800c500:	d5fb      	bpl.n	800c4fa <_printf_i+0x1ba>
 800c502:	8019      	strh	r1, [r3, #0]
 800c504:	2300      	movs	r3, #0
 800c506:	6123      	str	r3, [r4, #16]
 800c508:	4616      	mov	r6, r2
 800c50a:	e7bc      	b.n	800c486 <_printf_i+0x146>
 800c50c:	6833      	ldr	r3, [r6, #0]
 800c50e:	1d1a      	adds	r2, r3, #4
 800c510:	6032      	str	r2, [r6, #0]
 800c512:	681e      	ldr	r6, [r3, #0]
 800c514:	6862      	ldr	r2, [r4, #4]
 800c516:	2100      	movs	r1, #0
 800c518:	4630      	mov	r0, r6
 800c51a:	f7f3 fef9 	bl	8000310 <memchr>
 800c51e:	b108      	cbz	r0, 800c524 <_printf_i+0x1e4>
 800c520:	1b80      	subs	r0, r0, r6
 800c522:	6060      	str	r0, [r4, #4]
 800c524:	6863      	ldr	r3, [r4, #4]
 800c526:	6123      	str	r3, [r4, #16]
 800c528:	2300      	movs	r3, #0
 800c52a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c52e:	e7aa      	b.n	800c486 <_printf_i+0x146>
 800c530:	6923      	ldr	r3, [r4, #16]
 800c532:	4632      	mov	r2, r6
 800c534:	4649      	mov	r1, r9
 800c536:	4640      	mov	r0, r8
 800c538:	47d0      	blx	sl
 800c53a:	3001      	adds	r0, #1
 800c53c:	d0ad      	beq.n	800c49a <_printf_i+0x15a>
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	079b      	lsls	r3, r3, #30
 800c542:	d413      	bmi.n	800c56c <_printf_i+0x22c>
 800c544:	68e0      	ldr	r0, [r4, #12]
 800c546:	9b03      	ldr	r3, [sp, #12]
 800c548:	4298      	cmp	r0, r3
 800c54a:	bfb8      	it	lt
 800c54c:	4618      	movlt	r0, r3
 800c54e:	e7a6      	b.n	800c49e <_printf_i+0x15e>
 800c550:	2301      	movs	r3, #1
 800c552:	4632      	mov	r2, r6
 800c554:	4649      	mov	r1, r9
 800c556:	4640      	mov	r0, r8
 800c558:	47d0      	blx	sl
 800c55a:	3001      	adds	r0, #1
 800c55c:	d09d      	beq.n	800c49a <_printf_i+0x15a>
 800c55e:	3501      	adds	r5, #1
 800c560:	68e3      	ldr	r3, [r4, #12]
 800c562:	9903      	ldr	r1, [sp, #12]
 800c564:	1a5b      	subs	r3, r3, r1
 800c566:	42ab      	cmp	r3, r5
 800c568:	dcf2      	bgt.n	800c550 <_printf_i+0x210>
 800c56a:	e7eb      	b.n	800c544 <_printf_i+0x204>
 800c56c:	2500      	movs	r5, #0
 800c56e:	f104 0619 	add.w	r6, r4, #25
 800c572:	e7f5      	b.n	800c560 <_printf_i+0x220>
 800c574:	0800efc2 	.word	0x0800efc2
 800c578:	0800efd3 	.word	0x0800efd3

0800c57c <std>:
 800c57c:	2300      	movs	r3, #0
 800c57e:	b510      	push	{r4, lr}
 800c580:	4604      	mov	r4, r0
 800c582:	e9c0 3300 	strd	r3, r3, [r0]
 800c586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c58a:	6083      	str	r3, [r0, #8]
 800c58c:	8181      	strh	r1, [r0, #12]
 800c58e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c590:	81c2      	strh	r2, [r0, #14]
 800c592:	6183      	str	r3, [r0, #24]
 800c594:	4619      	mov	r1, r3
 800c596:	2208      	movs	r2, #8
 800c598:	305c      	adds	r0, #92	@ 0x5c
 800c59a:	f000 f92a 	bl	800c7f2 <memset>
 800c59e:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d4 <std+0x58>)
 800c5a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d8 <std+0x5c>)
 800c5a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5dc <std+0x60>)
 800c5a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e0 <std+0x64>)
 800c5ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e4 <std+0x68>)
 800c5b0:	6224      	str	r4, [r4, #32]
 800c5b2:	429c      	cmp	r4, r3
 800c5b4:	d006      	beq.n	800c5c4 <std+0x48>
 800c5b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5ba:	4294      	cmp	r4, r2
 800c5bc:	d002      	beq.n	800c5c4 <std+0x48>
 800c5be:	33d0      	adds	r3, #208	@ 0xd0
 800c5c0:	429c      	cmp	r4, r3
 800c5c2:	d105      	bne.n	800c5d0 <std+0x54>
 800c5c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5cc:	f000 b98e 	b.w	800c8ec <__retarget_lock_init_recursive>
 800c5d0:	bd10      	pop	{r4, pc}
 800c5d2:	bf00      	nop
 800c5d4:	0800c76d 	.word	0x0800c76d
 800c5d8:	0800c78f 	.word	0x0800c78f
 800c5dc:	0800c7c7 	.word	0x0800c7c7
 800c5e0:	0800c7eb 	.word	0x0800c7eb
 800c5e4:	24000578 	.word	0x24000578

0800c5e8 <stdio_exit_handler>:
 800c5e8:	4a02      	ldr	r2, [pc, #8]	@ (800c5f4 <stdio_exit_handler+0xc>)
 800c5ea:	4903      	ldr	r1, [pc, #12]	@ (800c5f8 <stdio_exit_handler+0x10>)
 800c5ec:	4803      	ldr	r0, [pc, #12]	@ (800c5fc <stdio_exit_handler+0x14>)
 800c5ee:	f000 b869 	b.w	800c6c4 <_fwalk_sglue>
 800c5f2:	bf00      	nop
 800c5f4:	24000018 	.word	0x24000018
 800c5f8:	0800e189 	.word	0x0800e189
 800c5fc:	24000028 	.word	0x24000028

0800c600 <cleanup_stdio>:
 800c600:	6841      	ldr	r1, [r0, #4]
 800c602:	4b0c      	ldr	r3, [pc, #48]	@ (800c634 <cleanup_stdio+0x34>)
 800c604:	4299      	cmp	r1, r3
 800c606:	b510      	push	{r4, lr}
 800c608:	4604      	mov	r4, r0
 800c60a:	d001      	beq.n	800c610 <cleanup_stdio+0x10>
 800c60c:	f001 fdbc 	bl	800e188 <_fflush_r>
 800c610:	68a1      	ldr	r1, [r4, #8]
 800c612:	4b09      	ldr	r3, [pc, #36]	@ (800c638 <cleanup_stdio+0x38>)
 800c614:	4299      	cmp	r1, r3
 800c616:	d002      	beq.n	800c61e <cleanup_stdio+0x1e>
 800c618:	4620      	mov	r0, r4
 800c61a:	f001 fdb5 	bl	800e188 <_fflush_r>
 800c61e:	68e1      	ldr	r1, [r4, #12]
 800c620:	4b06      	ldr	r3, [pc, #24]	@ (800c63c <cleanup_stdio+0x3c>)
 800c622:	4299      	cmp	r1, r3
 800c624:	d004      	beq.n	800c630 <cleanup_stdio+0x30>
 800c626:	4620      	mov	r0, r4
 800c628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c62c:	f001 bdac 	b.w	800e188 <_fflush_r>
 800c630:	bd10      	pop	{r4, pc}
 800c632:	bf00      	nop
 800c634:	24000578 	.word	0x24000578
 800c638:	240005e0 	.word	0x240005e0
 800c63c:	24000648 	.word	0x24000648

0800c640 <global_stdio_init.part.0>:
 800c640:	b510      	push	{r4, lr}
 800c642:	4b0b      	ldr	r3, [pc, #44]	@ (800c670 <global_stdio_init.part.0+0x30>)
 800c644:	4c0b      	ldr	r4, [pc, #44]	@ (800c674 <global_stdio_init.part.0+0x34>)
 800c646:	4a0c      	ldr	r2, [pc, #48]	@ (800c678 <global_stdio_init.part.0+0x38>)
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	4620      	mov	r0, r4
 800c64c:	2200      	movs	r2, #0
 800c64e:	2104      	movs	r1, #4
 800c650:	f7ff ff94 	bl	800c57c <std>
 800c654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c658:	2201      	movs	r2, #1
 800c65a:	2109      	movs	r1, #9
 800c65c:	f7ff ff8e 	bl	800c57c <std>
 800c660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c664:	2202      	movs	r2, #2
 800c666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c66a:	2112      	movs	r1, #18
 800c66c:	f7ff bf86 	b.w	800c57c <std>
 800c670:	240006b0 	.word	0x240006b0
 800c674:	24000578 	.word	0x24000578
 800c678:	0800c5e9 	.word	0x0800c5e9

0800c67c <__sfp_lock_acquire>:
 800c67c:	4801      	ldr	r0, [pc, #4]	@ (800c684 <__sfp_lock_acquire+0x8>)
 800c67e:	f000 b936 	b.w	800c8ee <__retarget_lock_acquire_recursive>
 800c682:	bf00      	nop
 800c684:	240006b9 	.word	0x240006b9

0800c688 <__sfp_lock_release>:
 800c688:	4801      	ldr	r0, [pc, #4]	@ (800c690 <__sfp_lock_release+0x8>)
 800c68a:	f000 b931 	b.w	800c8f0 <__retarget_lock_release_recursive>
 800c68e:	bf00      	nop
 800c690:	240006b9 	.word	0x240006b9

0800c694 <__sinit>:
 800c694:	b510      	push	{r4, lr}
 800c696:	4604      	mov	r4, r0
 800c698:	f7ff fff0 	bl	800c67c <__sfp_lock_acquire>
 800c69c:	6a23      	ldr	r3, [r4, #32]
 800c69e:	b11b      	cbz	r3, 800c6a8 <__sinit+0x14>
 800c6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6a4:	f7ff bff0 	b.w	800c688 <__sfp_lock_release>
 800c6a8:	4b04      	ldr	r3, [pc, #16]	@ (800c6bc <__sinit+0x28>)
 800c6aa:	6223      	str	r3, [r4, #32]
 800c6ac:	4b04      	ldr	r3, [pc, #16]	@ (800c6c0 <__sinit+0x2c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1f5      	bne.n	800c6a0 <__sinit+0xc>
 800c6b4:	f7ff ffc4 	bl	800c640 <global_stdio_init.part.0>
 800c6b8:	e7f2      	b.n	800c6a0 <__sinit+0xc>
 800c6ba:	bf00      	nop
 800c6bc:	0800c601 	.word	0x0800c601
 800c6c0:	240006b0 	.word	0x240006b0

0800c6c4 <_fwalk_sglue>:
 800c6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c8:	4607      	mov	r7, r0
 800c6ca:	4688      	mov	r8, r1
 800c6cc:	4614      	mov	r4, r2
 800c6ce:	2600      	movs	r6, #0
 800c6d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6d4:	f1b9 0901 	subs.w	r9, r9, #1
 800c6d8:	d505      	bpl.n	800c6e6 <_fwalk_sglue+0x22>
 800c6da:	6824      	ldr	r4, [r4, #0]
 800c6dc:	2c00      	cmp	r4, #0
 800c6de:	d1f7      	bne.n	800c6d0 <_fwalk_sglue+0xc>
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6e6:	89ab      	ldrh	r3, [r5, #12]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d907      	bls.n	800c6fc <_fwalk_sglue+0x38>
 800c6ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	d003      	beq.n	800c6fc <_fwalk_sglue+0x38>
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	4638      	mov	r0, r7
 800c6f8:	47c0      	blx	r8
 800c6fa:	4306      	orrs	r6, r0
 800c6fc:	3568      	adds	r5, #104	@ 0x68
 800c6fe:	e7e9      	b.n	800c6d4 <_fwalk_sglue+0x10>

0800c700 <sniprintf>:
 800c700:	b40c      	push	{r2, r3}
 800c702:	b530      	push	{r4, r5, lr}
 800c704:	4b18      	ldr	r3, [pc, #96]	@ (800c768 <sniprintf+0x68>)
 800c706:	1e0c      	subs	r4, r1, #0
 800c708:	681d      	ldr	r5, [r3, #0]
 800c70a:	b09d      	sub	sp, #116	@ 0x74
 800c70c:	da08      	bge.n	800c720 <sniprintf+0x20>
 800c70e:	238b      	movs	r3, #139	@ 0x8b
 800c710:	602b      	str	r3, [r5, #0]
 800c712:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c716:	b01d      	add	sp, #116	@ 0x74
 800c718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c71c:	b002      	add	sp, #8
 800c71e:	4770      	bx	lr
 800c720:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c724:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c728:	f04f 0300 	mov.w	r3, #0
 800c72c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c72e:	bf14      	ite	ne
 800c730:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800c734:	4623      	moveq	r3, r4
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	9307      	str	r3, [sp, #28]
 800c73a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c73e:	9002      	str	r0, [sp, #8]
 800c740:	9006      	str	r0, [sp, #24]
 800c742:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c746:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c748:	ab21      	add	r3, sp, #132	@ 0x84
 800c74a:	a902      	add	r1, sp, #8
 800c74c:	4628      	mov	r0, r5
 800c74e:	9301      	str	r3, [sp, #4]
 800c750:	f001 fb9a 	bl	800de88 <_svfiprintf_r>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	bfbc      	itt	lt
 800c758:	238b      	movlt	r3, #139	@ 0x8b
 800c75a:	602b      	strlt	r3, [r5, #0]
 800c75c:	2c00      	cmp	r4, #0
 800c75e:	d0da      	beq.n	800c716 <sniprintf+0x16>
 800c760:	9b02      	ldr	r3, [sp, #8]
 800c762:	2200      	movs	r2, #0
 800c764:	701a      	strb	r2, [r3, #0]
 800c766:	e7d6      	b.n	800c716 <sniprintf+0x16>
 800c768:	24000024 	.word	0x24000024

0800c76c <__sread>:
 800c76c:	b510      	push	{r4, lr}
 800c76e:	460c      	mov	r4, r1
 800c770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c774:	f000 f86c 	bl	800c850 <_read_r>
 800c778:	2800      	cmp	r0, #0
 800c77a:	bfab      	itete	ge
 800c77c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c77e:	89a3      	ldrhlt	r3, [r4, #12]
 800c780:	181b      	addge	r3, r3, r0
 800c782:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c786:	bfac      	ite	ge
 800c788:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c78a:	81a3      	strhlt	r3, [r4, #12]
 800c78c:	bd10      	pop	{r4, pc}

0800c78e <__swrite>:
 800c78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c792:	461f      	mov	r7, r3
 800c794:	898b      	ldrh	r3, [r1, #12]
 800c796:	05db      	lsls	r3, r3, #23
 800c798:	4605      	mov	r5, r0
 800c79a:	460c      	mov	r4, r1
 800c79c:	4616      	mov	r6, r2
 800c79e:	d505      	bpl.n	800c7ac <__swrite+0x1e>
 800c7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f000 f840 	bl	800c82c <_lseek_r>
 800c7ac:	89a3      	ldrh	r3, [r4, #12]
 800c7ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7b6:	81a3      	strh	r3, [r4, #12]
 800c7b8:	4632      	mov	r2, r6
 800c7ba:	463b      	mov	r3, r7
 800c7bc:	4628      	mov	r0, r5
 800c7be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c2:	f000 b857 	b.w	800c874 <_write_r>

0800c7c6 <__sseek>:
 800c7c6:	b510      	push	{r4, lr}
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ce:	f000 f82d 	bl	800c82c <_lseek_r>
 800c7d2:	1c43      	adds	r3, r0, #1
 800c7d4:	89a3      	ldrh	r3, [r4, #12]
 800c7d6:	bf15      	itete	ne
 800c7d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c7da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c7de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c7e2:	81a3      	strheq	r3, [r4, #12]
 800c7e4:	bf18      	it	ne
 800c7e6:	81a3      	strhne	r3, [r4, #12]
 800c7e8:	bd10      	pop	{r4, pc}

0800c7ea <__sclose>:
 800c7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ee:	f000 b80d 	b.w	800c80c <_close_r>

0800c7f2 <memset>:
 800c7f2:	4402      	add	r2, r0
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d100      	bne.n	800c7fc <memset+0xa>
 800c7fa:	4770      	bx	lr
 800c7fc:	f803 1b01 	strb.w	r1, [r3], #1
 800c800:	e7f9      	b.n	800c7f6 <memset+0x4>
	...

0800c804 <_localeconv_r>:
 800c804:	4800      	ldr	r0, [pc, #0]	@ (800c808 <_localeconv_r+0x4>)
 800c806:	4770      	bx	lr
 800c808:	24000164 	.word	0x24000164

0800c80c <_close_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d06      	ldr	r5, [pc, #24]	@ (800c828 <_close_r+0x1c>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	602b      	str	r3, [r5, #0]
 800c818:	f7f6 fa54 	bl	8002cc4 <_close>
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	d102      	bne.n	800c826 <_close_r+0x1a>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	b103      	cbz	r3, 800c826 <_close_r+0x1a>
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	240006b4 	.word	0x240006b4

0800c82c <_lseek_r>:
 800c82c:	b538      	push	{r3, r4, r5, lr}
 800c82e:	4d07      	ldr	r5, [pc, #28]	@ (800c84c <_lseek_r+0x20>)
 800c830:	4604      	mov	r4, r0
 800c832:	4608      	mov	r0, r1
 800c834:	4611      	mov	r1, r2
 800c836:	2200      	movs	r2, #0
 800c838:	602a      	str	r2, [r5, #0]
 800c83a:	461a      	mov	r2, r3
 800c83c:	f7f6 fa69 	bl	8002d12 <_lseek>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d102      	bne.n	800c84a <_lseek_r+0x1e>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	b103      	cbz	r3, 800c84a <_lseek_r+0x1e>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	240006b4 	.word	0x240006b4

0800c850 <_read_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d07      	ldr	r5, [pc, #28]	@ (800c870 <_read_r+0x20>)
 800c854:	4604      	mov	r4, r0
 800c856:	4608      	mov	r0, r1
 800c858:	4611      	mov	r1, r2
 800c85a:	2200      	movs	r2, #0
 800c85c:	602a      	str	r2, [r5, #0]
 800c85e:	461a      	mov	r2, r3
 800c860:	f7f6 f9f7 	bl	8002c52 <_read>
 800c864:	1c43      	adds	r3, r0, #1
 800c866:	d102      	bne.n	800c86e <_read_r+0x1e>
 800c868:	682b      	ldr	r3, [r5, #0]
 800c86a:	b103      	cbz	r3, 800c86e <_read_r+0x1e>
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	bd38      	pop	{r3, r4, r5, pc}
 800c870:	240006b4 	.word	0x240006b4

0800c874 <_write_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4d07      	ldr	r5, [pc, #28]	@ (800c894 <_write_r+0x20>)
 800c878:	4604      	mov	r4, r0
 800c87a:	4608      	mov	r0, r1
 800c87c:	4611      	mov	r1, r2
 800c87e:	2200      	movs	r2, #0
 800c880:	602a      	str	r2, [r5, #0]
 800c882:	461a      	mov	r2, r3
 800c884:	f7f6 fa02 	bl	8002c8c <_write>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_write_r+0x1e>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_write_r+0x1e>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	240006b4 	.word	0x240006b4

0800c898 <__errno>:
 800c898:	4b01      	ldr	r3, [pc, #4]	@ (800c8a0 <__errno+0x8>)
 800c89a:	6818      	ldr	r0, [r3, #0]
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	24000024 	.word	0x24000024

0800c8a4 <__libc_init_array>:
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	4d0d      	ldr	r5, [pc, #52]	@ (800c8dc <__libc_init_array+0x38>)
 800c8a8:	4c0d      	ldr	r4, [pc, #52]	@ (800c8e0 <__libc_init_array+0x3c>)
 800c8aa:	1b64      	subs	r4, r4, r5
 800c8ac:	10a4      	asrs	r4, r4, #2
 800c8ae:	2600      	movs	r6, #0
 800c8b0:	42a6      	cmp	r6, r4
 800c8b2:	d109      	bne.n	800c8c8 <__libc_init_array+0x24>
 800c8b4:	4d0b      	ldr	r5, [pc, #44]	@ (800c8e4 <__libc_init_array+0x40>)
 800c8b6:	4c0c      	ldr	r4, [pc, #48]	@ (800c8e8 <__libc_init_array+0x44>)
 800c8b8:	f002 f9ea 	bl	800ec90 <_init>
 800c8bc:	1b64      	subs	r4, r4, r5
 800c8be:	10a4      	asrs	r4, r4, #2
 800c8c0:	2600      	movs	r6, #0
 800c8c2:	42a6      	cmp	r6, r4
 800c8c4:	d105      	bne.n	800c8d2 <__libc_init_array+0x2e>
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}
 800c8c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8cc:	4798      	blx	r3
 800c8ce:	3601      	adds	r6, #1
 800c8d0:	e7ee      	b.n	800c8b0 <__libc_init_array+0xc>
 800c8d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8d6:	4798      	blx	r3
 800c8d8:	3601      	adds	r6, #1
 800c8da:	e7f2      	b.n	800c8c2 <__libc_init_array+0x1e>
 800c8dc:	0800f364 	.word	0x0800f364
 800c8e0:	0800f364 	.word	0x0800f364
 800c8e4:	0800f364 	.word	0x0800f364
 800c8e8:	0800f368 	.word	0x0800f368

0800c8ec <__retarget_lock_init_recursive>:
 800c8ec:	4770      	bx	lr

0800c8ee <__retarget_lock_acquire_recursive>:
 800c8ee:	4770      	bx	lr

0800c8f0 <__retarget_lock_release_recursive>:
 800c8f0:	4770      	bx	lr

0800c8f2 <memcpy>:
 800c8f2:	440a      	add	r2, r1
 800c8f4:	4291      	cmp	r1, r2
 800c8f6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c8fa:	d100      	bne.n	800c8fe <memcpy+0xc>
 800c8fc:	4770      	bx	lr
 800c8fe:	b510      	push	{r4, lr}
 800c900:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c904:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c908:	4291      	cmp	r1, r2
 800c90a:	d1f9      	bne.n	800c900 <memcpy+0xe>
 800c90c:	bd10      	pop	{r4, pc}

0800c90e <quorem>:
 800c90e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c912:	6903      	ldr	r3, [r0, #16]
 800c914:	690c      	ldr	r4, [r1, #16]
 800c916:	42a3      	cmp	r3, r4
 800c918:	4607      	mov	r7, r0
 800c91a:	db7e      	blt.n	800ca1a <quorem+0x10c>
 800c91c:	3c01      	subs	r4, #1
 800c91e:	f101 0814 	add.w	r8, r1, #20
 800c922:	00a3      	lsls	r3, r4, #2
 800c924:	f100 0514 	add.w	r5, r0, #20
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c92e:	9301      	str	r3, [sp, #4]
 800c930:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c934:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c938:	3301      	adds	r3, #1
 800c93a:	429a      	cmp	r2, r3
 800c93c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c940:	fbb2 f6f3 	udiv	r6, r2, r3
 800c944:	d32e      	bcc.n	800c9a4 <quorem+0x96>
 800c946:	f04f 0a00 	mov.w	sl, #0
 800c94a:	46c4      	mov	ip, r8
 800c94c:	46ae      	mov	lr, r5
 800c94e:	46d3      	mov	fp, sl
 800c950:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c954:	b298      	uxth	r0, r3
 800c956:	fb06 a000 	mla	r0, r6, r0, sl
 800c95a:	0c02      	lsrs	r2, r0, #16
 800c95c:	0c1b      	lsrs	r3, r3, #16
 800c95e:	fb06 2303 	mla	r3, r6, r3, r2
 800c962:	f8de 2000 	ldr.w	r2, [lr]
 800c966:	b280      	uxth	r0, r0
 800c968:	b292      	uxth	r2, r2
 800c96a:	1a12      	subs	r2, r2, r0
 800c96c:	445a      	add	r2, fp
 800c96e:	f8de 0000 	ldr.w	r0, [lr]
 800c972:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c976:	b29b      	uxth	r3, r3
 800c978:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c97c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c980:	b292      	uxth	r2, r2
 800c982:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c986:	45e1      	cmp	r9, ip
 800c988:	f84e 2b04 	str.w	r2, [lr], #4
 800c98c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c990:	d2de      	bcs.n	800c950 <quorem+0x42>
 800c992:	9b00      	ldr	r3, [sp, #0]
 800c994:	58eb      	ldr	r3, [r5, r3]
 800c996:	b92b      	cbnz	r3, 800c9a4 <quorem+0x96>
 800c998:	9b01      	ldr	r3, [sp, #4]
 800c99a:	3b04      	subs	r3, #4
 800c99c:	429d      	cmp	r5, r3
 800c99e:	461a      	mov	r2, r3
 800c9a0:	d32f      	bcc.n	800ca02 <quorem+0xf4>
 800c9a2:	613c      	str	r4, [r7, #16]
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f001 f90b 	bl	800dbc0 <__mcmp>
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	db25      	blt.n	800c9fa <quorem+0xec>
 800c9ae:	4629      	mov	r1, r5
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	f858 2b04 	ldr.w	r2, [r8], #4
 800c9b6:	f8d1 c000 	ldr.w	ip, [r1]
 800c9ba:	fa1f fe82 	uxth.w	lr, r2
 800c9be:	fa1f f38c 	uxth.w	r3, ip
 800c9c2:	eba3 030e 	sub.w	r3, r3, lr
 800c9c6:	4403      	add	r3, r0
 800c9c8:	0c12      	lsrs	r2, r2, #16
 800c9ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c9ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9d8:	45c1      	cmp	r9, r8
 800c9da:	f841 3b04 	str.w	r3, [r1], #4
 800c9de:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c9e2:	d2e6      	bcs.n	800c9b2 <quorem+0xa4>
 800c9e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9ec:	b922      	cbnz	r2, 800c9f8 <quorem+0xea>
 800c9ee:	3b04      	subs	r3, #4
 800c9f0:	429d      	cmp	r5, r3
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	d30b      	bcc.n	800ca0e <quorem+0x100>
 800c9f6:	613c      	str	r4, [r7, #16]
 800c9f8:	3601      	adds	r6, #1
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	b003      	add	sp, #12
 800c9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca02:	6812      	ldr	r2, [r2, #0]
 800ca04:	3b04      	subs	r3, #4
 800ca06:	2a00      	cmp	r2, #0
 800ca08:	d1cb      	bne.n	800c9a2 <quorem+0x94>
 800ca0a:	3c01      	subs	r4, #1
 800ca0c:	e7c6      	b.n	800c99c <quorem+0x8e>
 800ca0e:	6812      	ldr	r2, [r2, #0]
 800ca10:	3b04      	subs	r3, #4
 800ca12:	2a00      	cmp	r2, #0
 800ca14:	d1ef      	bne.n	800c9f6 <quorem+0xe8>
 800ca16:	3c01      	subs	r4, #1
 800ca18:	e7ea      	b.n	800c9f0 <quorem+0xe2>
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	e7ee      	b.n	800c9fc <quorem+0xee>
	...

0800ca20 <_dtoa_r>:
 800ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	ed2d 8b02 	vpush	{d8}
 800ca28:	69c7      	ldr	r7, [r0, #28]
 800ca2a:	b091      	sub	sp, #68	@ 0x44
 800ca2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ca30:	ec55 4b10 	vmov	r4, r5, d0
 800ca34:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ca36:	9107      	str	r1, [sp, #28]
 800ca38:	4681      	mov	r9, r0
 800ca3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca3c:	930d      	str	r3, [sp, #52]	@ 0x34
 800ca3e:	b97f      	cbnz	r7, 800ca60 <_dtoa_r+0x40>
 800ca40:	2010      	movs	r0, #16
 800ca42:	f000 fd95 	bl	800d570 <malloc>
 800ca46:	4602      	mov	r2, r0
 800ca48:	f8c9 001c 	str.w	r0, [r9, #28]
 800ca4c:	b920      	cbnz	r0, 800ca58 <_dtoa_r+0x38>
 800ca4e:	4ba0      	ldr	r3, [pc, #640]	@ (800ccd0 <_dtoa_r+0x2b0>)
 800ca50:	21ef      	movs	r1, #239	@ 0xef
 800ca52:	48a0      	ldr	r0, [pc, #640]	@ (800ccd4 <_dtoa_r+0x2b4>)
 800ca54:	f001 fbea 	bl	800e22c <__assert_func>
 800ca58:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ca5c:	6007      	str	r7, [r0, #0]
 800ca5e:	60c7      	str	r7, [r0, #12]
 800ca60:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ca64:	6819      	ldr	r1, [r3, #0]
 800ca66:	b159      	cbz	r1, 800ca80 <_dtoa_r+0x60>
 800ca68:	685a      	ldr	r2, [r3, #4]
 800ca6a:	604a      	str	r2, [r1, #4]
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	4093      	lsls	r3, r2
 800ca70:	608b      	str	r3, [r1, #8]
 800ca72:	4648      	mov	r0, r9
 800ca74:	f000 fe72 	bl	800d75c <_Bfree>
 800ca78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	601a      	str	r2, [r3, #0]
 800ca80:	1e2b      	subs	r3, r5, #0
 800ca82:	bfbb      	ittet	lt
 800ca84:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ca88:	9303      	strlt	r3, [sp, #12]
 800ca8a:	2300      	movge	r3, #0
 800ca8c:	2201      	movlt	r2, #1
 800ca8e:	bfac      	ite	ge
 800ca90:	6033      	strge	r3, [r6, #0]
 800ca92:	6032      	strlt	r2, [r6, #0]
 800ca94:	4b90      	ldr	r3, [pc, #576]	@ (800ccd8 <_dtoa_r+0x2b8>)
 800ca96:	9e03      	ldr	r6, [sp, #12]
 800ca98:	43b3      	bics	r3, r6
 800ca9a:	d110      	bne.n	800cabe <_dtoa_r+0x9e>
 800ca9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca9e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800caa8:	4323      	orrs	r3, r4
 800caaa:	f000 84e6 	beq.w	800d47a <_dtoa_r+0xa5a>
 800caae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cab0:	4f8a      	ldr	r7, [pc, #552]	@ (800ccdc <_dtoa_r+0x2bc>)
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f000 84e8 	beq.w	800d488 <_dtoa_r+0xa68>
 800cab8:	1cfb      	adds	r3, r7, #3
 800caba:	f000 bce3 	b.w	800d484 <_dtoa_r+0xa64>
 800cabe:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cac2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caca:	d10a      	bne.n	800cae2 <_dtoa_r+0xc2>
 800cacc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cace:	2301      	movs	r3, #1
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cad4:	b113      	cbz	r3, 800cadc <_dtoa_r+0xbc>
 800cad6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cad8:	4b81      	ldr	r3, [pc, #516]	@ (800cce0 <_dtoa_r+0x2c0>)
 800cada:	6013      	str	r3, [r2, #0]
 800cadc:	4f81      	ldr	r7, [pc, #516]	@ (800cce4 <_dtoa_r+0x2c4>)
 800cade:	f000 bcd3 	b.w	800d488 <_dtoa_r+0xa68>
 800cae2:	aa0e      	add	r2, sp, #56	@ 0x38
 800cae4:	a90f      	add	r1, sp, #60	@ 0x3c
 800cae6:	4648      	mov	r0, r9
 800cae8:	eeb0 0b48 	vmov.f64	d0, d8
 800caec:	f001 f918 	bl	800dd20 <__d2b>
 800caf0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800caf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800caf6:	9001      	str	r0, [sp, #4]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d045      	beq.n	800cb88 <_dtoa_r+0x168>
 800cafc:	eeb0 7b48 	vmov.f64	d7, d8
 800cb00:	ee18 1a90 	vmov	r1, s17
 800cb04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cb08:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cb0c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cb10:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cb14:	2500      	movs	r5, #0
 800cb16:	ee07 1a90 	vmov	s15, r1
 800cb1a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cb1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ccb8 <_dtoa_r+0x298>
 800cb22:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cb26:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ccc0 <_dtoa_r+0x2a0>
 800cb2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cb2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ccc8 <_dtoa_r+0x2a8>
 800cb32:	ee07 3a90 	vmov	s15, r3
 800cb36:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cb3a:	eeb0 7b46 	vmov.f64	d7, d6
 800cb3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cb42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cb46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4e:	ee16 8a90 	vmov	r8, s13
 800cb52:	d508      	bpl.n	800cb66 <_dtoa_r+0x146>
 800cb54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cb58:	eeb4 6b47 	vcmp.f64	d6, d7
 800cb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb60:	bf18      	it	ne
 800cb62:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800cb66:	f1b8 0f16 	cmp.w	r8, #22
 800cb6a:	d82b      	bhi.n	800cbc4 <_dtoa_r+0x1a4>
 800cb6c:	495e      	ldr	r1, [pc, #376]	@ (800cce8 <_dtoa_r+0x2c8>)
 800cb6e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800cb72:	ed91 7b00 	vldr	d7, [r1]
 800cb76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb7e:	d501      	bpl.n	800cb84 <_dtoa_r+0x164>
 800cb80:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cb84:	2100      	movs	r1, #0
 800cb86:	e01e      	b.n	800cbc6 <_dtoa_r+0x1a6>
 800cb88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb8a:	4413      	add	r3, r2
 800cb8c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800cb90:	2920      	cmp	r1, #32
 800cb92:	bfc1      	itttt	gt
 800cb94:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800cb98:	408e      	lslgt	r6, r1
 800cb9a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800cb9e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800cba2:	bfd6      	itet	le
 800cba4:	f1c1 0120 	rsble	r1, r1, #32
 800cba8:	4331      	orrgt	r1, r6
 800cbaa:	fa04 f101 	lslle.w	r1, r4, r1
 800cbae:	ee07 1a90 	vmov	s15, r1
 800cbb2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	ee17 1a90 	vmov	r1, s15
 800cbbc:	2501      	movs	r5, #1
 800cbbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800cbc2:	e7a8      	b.n	800cb16 <_dtoa_r+0xf6>
 800cbc4:	2101      	movs	r1, #1
 800cbc6:	1ad2      	subs	r2, r2, r3
 800cbc8:	1e53      	subs	r3, r2, #1
 800cbca:	9306      	str	r3, [sp, #24]
 800cbcc:	bf45      	ittet	mi
 800cbce:	f1c2 0301 	rsbmi	r3, r2, #1
 800cbd2:	9304      	strmi	r3, [sp, #16]
 800cbd4:	2300      	movpl	r3, #0
 800cbd6:	2300      	movmi	r3, #0
 800cbd8:	bf4c      	ite	mi
 800cbda:	9306      	strmi	r3, [sp, #24]
 800cbdc:	9304      	strpl	r3, [sp, #16]
 800cbde:	f1b8 0f00 	cmp.w	r8, #0
 800cbe2:	910c      	str	r1, [sp, #48]	@ 0x30
 800cbe4:	db18      	blt.n	800cc18 <_dtoa_r+0x1f8>
 800cbe6:	9b06      	ldr	r3, [sp, #24]
 800cbe8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800cbec:	4443      	add	r3, r8
 800cbee:	9306      	str	r3, [sp, #24]
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	9a07      	ldr	r2, [sp, #28]
 800cbf4:	2a09      	cmp	r2, #9
 800cbf6:	d845      	bhi.n	800cc84 <_dtoa_r+0x264>
 800cbf8:	2a05      	cmp	r2, #5
 800cbfa:	bfc4      	itt	gt
 800cbfc:	3a04      	subgt	r2, #4
 800cbfe:	9207      	strgt	r2, [sp, #28]
 800cc00:	9a07      	ldr	r2, [sp, #28]
 800cc02:	f1a2 0202 	sub.w	r2, r2, #2
 800cc06:	bfcc      	ite	gt
 800cc08:	2400      	movgt	r4, #0
 800cc0a:	2401      	movle	r4, #1
 800cc0c:	2a03      	cmp	r2, #3
 800cc0e:	d844      	bhi.n	800cc9a <_dtoa_r+0x27a>
 800cc10:	e8df f002 	tbb	[pc, r2]
 800cc14:	0b173634 	.word	0x0b173634
 800cc18:	9b04      	ldr	r3, [sp, #16]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	eba3 0308 	sub.w	r3, r3, r8
 800cc20:	9304      	str	r3, [sp, #16]
 800cc22:	920a      	str	r2, [sp, #40]	@ 0x28
 800cc24:	f1c8 0300 	rsb	r3, r8, #0
 800cc28:	e7e3      	b.n	800cbf2 <_dtoa_r+0x1d2>
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	9208      	str	r2, [sp, #32]
 800cc2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc30:	eb08 0b02 	add.w	fp, r8, r2
 800cc34:	f10b 0a01 	add.w	sl, fp, #1
 800cc38:	4652      	mov	r2, sl
 800cc3a:	2a01      	cmp	r2, #1
 800cc3c:	bfb8      	it	lt
 800cc3e:	2201      	movlt	r2, #1
 800cc40:	e006      	b.n	800cc50 <_dtoa_r+0x230>
 800cc42:	2201      	movs	r2, #1
 800cc44:	9208      	str	r2, [sp, #32]
 800cc46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc48:	2a00      	cmp	r2, #0
 800cc4a:	dd29      	ble.n	800cca0 <_dtoa_r+0x280>
 800cc4c:	4693      	mov	fp, r2
 800cc4e:	4692      	mov	sl, r2
 800cc50:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800cc54:	2100      	movs	r1, #0
 800cc56:	2004      	movs	r0, #4
 800cc58:	f100 0614 	add.w	r6, r0, #20
 800cc5c:	4296      	cmp	r6, r2
 800cc5e:	d926      	bls.n	800ccae <_dtoa_r+0x28e>
 800cc60:	6079      	str	r1, [r7, #4]
 800cc62:	4648      	mov	r0, r9
 800cc64:	9305      	str	r3, [sp, #20]
 800cc66:	f000 fd39 	bl	800d6dc <_Balloc>
 800cc6a:	9b05      	ldr	r3, [sp, #20]
 800cc6c:	4607      	mov	r7, r0
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d13e      	bne.n	800ccf0 <_dtoa_r+0x2d0>
 800cc72:	4b1e      	ldr	r3, [pc, #120]	@ (800ccec <_dtoa_r+0x2cc>)
 800cc74:	4602      	mov	r2, r0
 800cc76:	f240 11af 	movw	r1, #431	@ 0x1af
 800cc7a:	e6ea      	b.n	800ca52 <_dtoa_r+0x32>
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	e7e1      	b.n	800cc44 <_dtoa_r+0x224>
 800cc80:	2200      	movs	r2, #0
 800cc82:	e7d3      	b.n	800cc2c <_dtoa_r+0x20c>
 800cc84:	2401      	movs	r4, #1
 800cc86:	2200      	movs	r2, #0
 800cc88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cc8c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800cc90:	2100      	movs	r1, #0
 800cc92:	46da      	mov	sl, fp
 800cc94:	2212      	movs	r2, #18
 800cc96:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc98:	e7da      	b.n	800cc50 <_dtoa_r+0x230>
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	9208      	str	r2, [sp, #32]
 800cc9e:	e7f5      	b.n	800cc8c <_dtoa_r+0x26c>
 800cca0:	f04f 0b01 	mov.w	fp, #1
 800cca4:	46da      	mov	sl, fp
 800cca6:	465a      	mov	r2, fp
 800cca8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ccac:	e7d0      	b.n	800cc50 <_dtoa_r+0x230>
 800ccae:	3101      	adds	r1, #1
 800ccb0:	0040      	lsls	r0, r0, #1
 800ccb2:	e7d1      	b.n	800cc58 <_dtoa_r+0x238>
 800ccb4:	f3af 8000 	nop.w
 800ccb8:	636f4361 	.word	0x636f4361
 800ccbc:	3fd287a7 	.word	0x3fd287a7
 800ccc0:	8b60c8b3 	.word	0x8b60c8b3
 800ccc4:	3fc68a28 	.word	0x3fc68a28
 800ccc8:	509f79fb 	.word	0x509f79fb
 800cccc:	3fd34413 	.word	0x3fd34413
 800ccd0:	0800eff1 	.word	0x0800eff1
 800ccd4:	0800f008 	.word	0x0800f008
 800ccd8:	7ff00000 	.word	0x7ff00000
 800ccdc:	0800efed 	.word	0x0800efed
 800cce0:	0800efc1 	.word	0x0800efc1
 800cce4:	0800efc0 	.word	0x0800efc0
 800cce8:	0800f158 	.word	0x0800f158
 800ccec:	0800f060 	.word	0x0800f060
 800ccf0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ccf4:	f1ba 0f0e 	cmp.w	sl, #14
 800ccf8:	6010      	str	r0, [r2, #0]
 800ccfa:	d86e      	bhi.n	800cdda <_dtoa_r+0x3ba>
 800ccfc:	2c00      	cmp	r4, #0
 800ccfe:	d06c      	beq.n	800cdda <_dtoa_r+0x3ba>
 800cd00:	f1b8 0f00 	cmp.w	r8, #0
 800cd04:	f340 80b4 	ble.w	800ce70 <_dtoa_r+0x450>
 800cd08:	4ac8      	ldr	r2, [pc, #800]	@ (800d02c <_dtoa_r+0x60c>)
 800cd0a:	f008 010f 	and.w	r1, r8, #15
 800cd0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cd12:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800cd16:	ed92 7b00 	vldr	d7, [r2]
 800cd1a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800cd1e:	f000 809b 	beq.w	800ce58 <_dtoa_r+0x438>
 800cd22:	4ac3      	ldr	r2, [pc, #780]	@ (800d030 <_dtoa_r+0x610>)
 800cd24:	ed92 6b08 	vldr	d6, [r2, #32]
 800cd28:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cd2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cd30:	f001 010f 	and.w	r1, r1, #15
 800cd34:	2203      	movs	r2, #3
 800cd36:	48be      	ldr	r0, [pc, #760]	@ (800d030 <_dtoa_r+0x610>)
 800cd38:	2900      	cmp	r1, #0
 800cd3a:	f040 808f 	bne.w	800ce5c <_dtoa_r+0x43c>
 800cd3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cd46:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cd4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd50:	2900      	cmp	r1, #0
 800cd52:	f000 80b3 	beq.w	800cebc <_dtoa_r+0x49c>
 800cd56:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cd5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd62:	f140 80ab 	bpl.w	800cebc <_dtoa_r+0x49c>
 800cd66:	f1ba 0f00 	cmp.w	sl, #0
 800cd6a:	f000 80a7 	beq.w	800cebc <_dtoa_r+0x49c>
 800cd6e:	f1bb 0f00 	cmp.w	fp, #0
 800cd72:	dd30      	ble.n	800cdd6 <_dtoa_r+0x3b6>
 800cd74:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800cd78:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd80:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800cd84:	9105      	str	r1, [sp, #20]
 800cd86:	3201      	adds	r2, #1
 800cd88:	465c      	mov	r4, fp
 800cd8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd8e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800cd92:	ee07 2a90 	vmov	s15, r2
 800cd96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cd9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cd9e:	ee15 2a90 	vmov	r2, s11
 800cda2:	ec51 0b15 	vmov	r0, r1, d5
 800cda6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800cdaa:	2c00      	cmp	r4, #0
 800cdac:	f040 808a 	bne.w	800cec4 <_dtoa_r+0x4a4>
 800cdb0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cdb4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cdb8:	ec41 0b17 	vmov	d7, r0, r1
 800cdbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc4:	f300 826a 	bgt.w	800d29c <_dtoa_r+0x87c>
 800cdc8:	eeb1 7b47 	vneg.f64	d7, d7
 800cdcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd4:	d423      	bmi.n	800ce1e <_dtoa_r+0x3fe>
 800cdd6:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cdda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cddc:	2a00      	cmp	r2, #0
 800cdde:	f2c0 8129 	blt.w	800d034 <_dtoa_r+0x614>
 800cde2:	f1b8 0f0e 	cmp.w	r8, #14
 800cde6:	f300 8125 	bgt.w	800d034 <_dtoa_r+0x614>
 800cdea:	4b90      	ldr	r3, [pc, #576]	@ (800d02c <_dtoa_r+0x60c>)
 800cdec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cdf0:	ed93 6b00 	vldr	d6, [r3]
 800cdf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f280 80c8 	bge.w	800cf8c <_dtoa_r+0x56c>
 800cdfc:	f1ba 0f00 	cmp.w	sl, #0
 800ce00:	f300 80c4 	bgt.w	800cf8c <_dtoa_r+0x56c>
 800ce04:	d10b      	bne.n	800ce1e <_dtoa_r+0x3fe>
 800ce06:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ce0a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ce0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce1a:	f2c0 823c 	blt.w	800d296 <_dtoa_r+0x876>
 800ce1e:	2400      	movs	r4, #0
 800ce20:	4625      	mov	r5, r4
 800ce22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce24:	43db      	mvns	r3, r3
 800ce26:	9305      	str	r3, [sp, #20]
 800ce28:	463e      	mov	r6, r7
 800ce2a:	f04f 0800 	mov.w	r8, #0
 800ce2e:	4621      	mov	r1, r4
 800ce30:	4648      	mov	r0, r9
 800ce32:	f000 fc93 	bl	800d75c <_Bfree>
 800ce36:	2d00      	cmp	r5, #0
 800ce38:	f000 80a2 	beq.w	800cf80 <_dtoa_r+0x560>
 800ce3c:	f1b8 0f00 	cmp.w	r8, #0
 800ce40:	d005      	beq.n	800ce4e <_dtoa_r+0x42e>
 800ce42:	45a8      	cmp	r8, r5
 800ce44:	d003      	beq.n	800ce4e <_dtoa_r+0x42e>
 800ce46:	4641      	mov	r1, r8
 800ce48:	4648      	mov	r0, r9
 800ce4a:	f000 fc87 	bl	800d75c <_Bfree>
 800ce4e:	4629      	mov	r1, r5
 800ce50:	4648      	mov	r0, r9
 800ce52:	f000 fc83 	bl	800d75c <_Bfree>
 800ce56:	e093      	b.n	800cf80 <_dtoa_r+0x560>
 800ce58:	2202      	movs	r2, #2
 800ce5a:	e76c      	b.n	800cd36 <_dtoa_r+0x316>
 800ce5c:	07cc      	lsls	r4, r1, #31
 800ce5e:	d504      	bpl.n	800ce6a <_dtoa_r+0x44a>
 800ce60:	ed90 6b00 	vldr	d6, [r0]
 800ce64:	3201      	adds	r2, #1
 800ce66:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce6a:	1049      	asrs	r1, r1, #1
 800ce6c:	3008      	adds	r0, #8
 800ce6e:	e763      	b.n	800cd38 <_dtoa_r+0x318>
 800ce70:	d022      	beq.n	800ceb8 <_dtoa_r+0x498>
 800ce72:	f1c8 0100 	rsb	r1, r8, #0
 800ce76:	4a6d      	ldr	r2, [pc, #436]	@ (800d02c <_dtoa_r+0x60c>)
 800ce78:	f001 000f 	and.w	r0, r1, #15
 800ce7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ce80:	ed92 7b00 	vldr	d7, [r2]
 800ce84:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ce88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce8c:	4868      	ldr	r0, [pc, #416]	@ (800d030 <_dtoa_r+0x610>)
 800ce8e:	1109      	asrs	r1, r1, #4
 800ce90:	2400      	movs	r4, #0
 800ce92:	2202      	movs	r2, #2
 800ce94:	b929      	cbnz	r1, 800cea2 <_dtoa_r+0x482>
 800ce96:	2c00      	cmp	r4, #0
 800ce98:	f43f af57 	beq.w	800cd4a <_dtoa_r+0x32a>
 800ce9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cea0:	e753      	b.n	800cd4a <_dtoa_r+0x32a>
 800cea2:	07ce      	lsls	r6, r1, #31
 800cea4:	d505      	bpl.n	800ceb2 <_dtoa_r+0x492>
 800cea6:	ed90 6b00 	vldr	d6, [r0]
 800ceaa:	3201      	adds	r2, #1
 800ceac:	2401      	movs	r4, #1
 800ceae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ceb2:	1049      	asrs	r1, r1, #1
 800ceb4:	3008      	adds	r0, #8
 800ceb6:	e7ed      	b.n	800ce94 <_dtoa_r+0x474>
 800ceb8:	2202      	movs	r2, #2
 800ceba:	e746      	b.n	800cd4a <_dtoa_r+0x32a>
 800cebc:	f8cd 8014 	str.w	r8, [sp, #20]
 800cec0:	4654      	mov	r4, sl
 800cec2:	e762      	b.n	800cd8a <_dtoa_r+0x36a>
 800cec4:	4a59      	ldr	r2, [pc, #356]	@ (800d02c <_dtoa_r+0x60c>)
 800cec6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ceca:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cece:	9a08      	ldr	r2, [sp, #32]
 800ced0:	ec41 0b17 	vmov	d7, r0, r1
 800ced4:	443c      	add	r4, r7
 800ced6:	b34a      	cbz	r2, 800cf2c <_dtoa_r+0x50c>
 800ced8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800cedc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800cee0:	463e      	mov	r6, r7
 800cee2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cee6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ceea:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ceee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cef2:	ee14 2a90 	vmov	r2, s9
 800cef6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cefa:	3230      	adds	r2, #48	@ 0x30
 800cefc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cf00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf08:	f806 2b01 	strb.w	r2, [r6], #1
 800cf0c:	d438      	bmi.n	800cf80 <_dtoa_r+0x560>
 800cf0e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cf12:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1a:	d46e      	bmi.n	800cffa <_dtoa_r+0x5da>
 800cf1c:	42a6      	cmp	r6, r4
 800cf1e:	f43f af5a 	beq.w	800cdd6 <_dtoa_r+0x3b6>
 800cf22:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cf26:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cf2a:	e7e0      	b.n	800ceee <_dtoa_r+0x4ce>
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	463e      	mov	r6, r7
 800cf30:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cf34:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cf38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cf3c:	ee14 2a90 	vmov	r2, s9
 800cf40:	3230      	adds	r2, #48	@ 0x30
 800cf42:	f806 2b01 	strb.w	r2, [r6], #1
 800cf46:	42a6      	cmp	r6, r4
 800cf48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cf4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cf50:	d119      	bne.n	800cf86 <_dtoa_r+0x566>
 800cf52:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800cf56:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cf5a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cf5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf62:	dc4a      	bgt.n	800cffa <_dtoa_r+0x5da>
 800cf64:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cf68:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cf6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf70:	f57f af31 	bpl.w	800cdd6 <_dtoa_r+0x3b6>
 800cf74:	460e      	mov	r6, r1
 800cf76:	3901      	subs	r1, #1
 800cf78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf7c:	2b30      	cmp	r3, #48	@ 0x30
 800cf7e:	d0f9      	beq.n	800cf74 <_dtoa_r+0x554>
 800cf80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cf84:	e027      	b.n	800cfd6 <_dtoa_r+0x5b6>
 800cf86:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cf8a:	e7d5      	b.n	800cf38 <_dtoa_r+0x518>
 800cf8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf90:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800cf94:	463e      	mov	r6, r7
 800cf96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cf9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cf9e:	ee15 3a10 	vmov	r3, s10
 800cfa2:	3330      	adds	r3, #48	@ 0x30
 800cfa4:	f806 3b01 	strb.w	r3, [r6], #1
 800cfa8:	1bf3      	subs	r3, r6, r7
 800cfaa:	459a      	cmp	sl, r3
 800cfac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cfb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cfb4:	d132      	bne.n	800d01c <_dtoa_r+0x5fc>
 800cfb6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cfba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc2:	dc18      	bgt.n	800cff6 <_dtoa_r+0x5d6>
 800cfc4:	eeb4 7b46 	vcmp.f64	d7, d6
 800cfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfcc:	d103      	bne.n	800cfd6 <_dtoa_r+0x5b6>
 800cfce:	ee15 3a10 	vmov	r3, s10
 800cfd2:	07db      	lsls	r3, r3, #31
 800cfd4:	d40f      	bmi.n	800cff6 <_dtoa_r+0x5d6>
 800cfd6:	9901      	ldr	r1, [sp, #4]
 800cfd8:	4648      	mov	r0, r9
 800cfda:	f000 fbbf 	bl	800d75c <_Bfree>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cfe2:	7033      	strb	r3, [r6, #0]
 800cfe4:	f108 0301 	add.w	r3, r8, #1
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f000 824b 	beq.w	800d488 <_dtoa_r+0xa68>
 800cff2:	601e      	str	r6, [r3, #0]
 800cff4:	e248      	b.n	800d488 <_dtoa_r+0xa68>
 800cff6:	f8cd 8014 	str.w	r8, [sp, #20]
 800cffa:	4633      	mov	r3, r6
 800cffc:	461e      	mov	r6, r3
 800cffe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d002:	2a39      	cmp	r2, #57	@ 0x39
 800d004:	d106      	bne.n	800d014 <_dtoa_r+0x5f4>
 800d006:	429f      	cmp	r7, r3
 800d008:	d1f8      	bne.n	800cffc <_dtoa_r+0x5dc>
 800d00a:	9a05      	ldr	r2, [sp, #20]
 800d00c:	3201      	adds	r2, #1
 800d00e:	9205      	str	r2, [sp, #20]
 800d010:	2230      	movs	r2, #48	@ 0x30
 800d012:	703a      	strb	r2, [r7, #0]
 800d014:	781a      	ldrb	r2, [r3, #0]
 800d016:	3201      	adds	r2, #1
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	e7b1      	b.n	800cf80 <_dtoa_r+0x560>
 800d01c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d020:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d028:	d1b5      	bne.n	800cf96 <_dtoa_r+0x576>
 800d02a:	e7d4      	b.n	800cfd6 <_dtoa_r+0x5b6>
 800d02c:	0800f158 	.word	0x0800f158
 800d030:	0800f130 	.word	0x0800f130
 800d034:	9908      	ldr	r1, [sp, #32]
 800d036:	2900      	cmp	r1, #0
 800d038:	f000 80e9 	beq.w	800d20e <_dtoa_r+0x7ee>
 800d03c:	9907      	ldr	r1, [sp, #28]
 800d03e:	2901      	cmp	r1, #1
 800d040:	f300 80cb 	bgt.w	800d1da <_dtoa_r+0x7ba>
 800d044:	2d00      	cmp	r5, #0
 800d046:	f000 80c4 	beq.w	800d1d2 <_dtoa_r+0x7b2>
 800d04a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d04e:	9e04      	ldr	r6, [sp, #16]
 800d050:	461c      	mov	r4, r3
 800d052:	9305      	str	r3, [sp, #20]
 800d054:	9b04      	ldr	r3, [sp, #16]
 800d056:	4413      	add	r3, r2
 800d058:	9304      	str	r3, [sp, #16]
 800d05a:	9b06      	ldr	r3, [sp, #24]
 800d05c:	2101      	movs	r1, #1
 800d05e:	4413      	add	r3, r2
 800d060:	4648      	mov	r0, r9
 800d062:	9306      	str	r3, [sp, #24]
 800d064:	f000 fc2e 	bl	800d8c4 <__i2b>
 800d068:	9b05      	ldr	r3, [sp, #20]
 800d06a:	4605      	mov	r5, r0
 800d06c:	b166      	cbz	r6, 800d088 <_dtoa_r+0x668>
 800d06e:	9a06      	ldr	r2, [sp, #24]
 800d070:	2a00      	cmp	r2, #0
 800d072:	dd09      	ble.n	800d088 <_dtoa_r+0x668>
 800d074:	42b2      	cmp	r2, r6
 800d076:	9904      	ldr	r1, [sp, #16]
 800d078:	bfa8      	it	ge
 800d07a:	4632      	movge	r2, r6
 800d07c:	1a89      	subs	r1, r1, r2
 800d07e:	9104      	str	r1, [sp, #16]
 800d080:	9906      	ldr	r1, [sp, #24]
 800d082:	1ab6      	subs	r6, r6, r2
 800d084:	1a8a      	subs	r2, r1, r2
 800d086:	9206      	str	r2, [sp, #24]
 800d088:	b30b      	cbz	r3, 800d0ce <_dtoa_r+0x6ae>
 800d08a:	9a08      	ldr	r2, [sp, #32]
 800d08c:	2a00      	cmp	r2, #0
 800d08e:	f000 80c5 	beq.w	800d21c <_dtoa_r+0x7fc>
 800d092:	2c00      	cmp	r4, #0
 800d094:	f000 80bf 	beq.w	800d216 <_dtoa_r+0x7f6>
 800d098:	4629      	mov	r1, r5
 800d09a:	4622      	mov	r2, r4
 800d09c:	4648      	mov	r0, r9
 800d09e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0a0:	f000 fcc8 	bl	800da34 <__pow5mult>
 800d0a4:	9a01      	ldr	r2, [sp, #4]
 800d0a6:	4601      	mov	r1, r0
 800d0a8:	4605      	mov	r5, r0
 800d0aa:	4648      	mov	r0, r9
 800d0ac:	f000 fc20 	bl	800d8f0 <__multiply>
 800d0b0:	9901      	ldr	r1, [sp, #4]
 800d0b2:	9005      	str	r0, [sp, #20]
 800d0b4:	4648      	mov	r0, r9
 800d0b6:	f000 fb51 	bl	800d75c <_Bfree>
 800d0ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0bc:	1b1b      	subs	r3, r3, r4
 800d0be:	f000 80b0 	beq.w	800d222 <_dtoa_r+0x802>
 800d0c2:	9905      	ldr	r1, [sp, #20]
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	4648      	mov	r0, r9
 800d0c8:	f000 fcb4 	bl	800da34 <__pow5mult>
 800d0cc:	9001      	str	r0, [sp, #4]
 800d0ce:	2101      	movs	r1, #1
 800d0d0:	4648      	mov	r0, r9
 800d0d2:	f000 fbf7 	bl	800d8c4 <__i2b>
 800d0d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0d8:	4604      	mov	r4, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f000 81da 	beq.w	800d494 <_dtoa_r+0xa74>
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	4601      	mov	r1, r0
 800d0e4:	4648      	mov	r0, r9
 800d0e6:	f000 fca5 	bl	800da34 <__pow5mult>
 800d0ea:	9b07      	ldr	r3, [sp, #28]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	f300 80a0 	bgt.w	800d234 <_dtoa_r+0x814>
 800d0f4:	9b02      	ldr	r3, [sp, #8]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f040 8096 	bne.w	800d228 <_dtoa_r+0x808>
 800d0fc:	9b03      	ldr	r3, [sp, #12]
 800d0fe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d102:	2a00      	cmp	r2, #0
 800d104:	f040 8092 	bne.w	800d22c <_dtoa_r+0x80c>
 800d108:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d10c:	0d12      	lsrs	r2, r2, #20
 800d10e:	0512      	lsls	r2, r2, #20
 800d110:	2a00      	cmp	r2, #0
 800d112:	f000 808d 	beq.w	800d230 <_dtoa_r+0x810>
 800d116:	9b04      	ldr	r3, [sp, #16]
 800d118:	3301      	adds	r3, #1
 800d11a:	9304      	str	r3, [sp, #16]
 800d11c:	9b06      	ldr	r3, [sp, #24]
 800d11e:	3301      	adds	r3, #1
 800d120:	9306      	str	r3, [sp, #24]
 800d122:	2301      	movs	r3, #1
 800d124:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f000 81b9 	beq.w	800d4a0 <_dtoa_r+0xa80>
 800d12e:	6922      	ldr	r2, [r4, #16]
 800d130:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d134:	6910      	ldr	r0, [r2, #16]
 800d136:	f000 fb79 	bl	800d82c <__hi0bits>
 800d13a:	f1c0 0020 	rsb	r0, r0, #32
 800d13e:	9b06      	ldr	r3, [sp, #24]
 800d140:	4418      	add	r0, r3
 800d142:	f010 001f 	ands.w	r0, r0, #31
 800d146:	f000 8081 	beq.w	800d24c <_dtoa_r+0x82c>
 800d14a:	f1c0 0220 	rsb	r2, r0, #32
 800d14e:	2a04      	cmp	r2, #4
 800d150:	dd73      	ble.n	800d23a <_dtoa_r+0x81a>
 800d152:	9b04      	ldr	r3, [sp, #16]
 800d154:	f1c0 001c 	rsb	r0, r0, #28
 800d158:	4403      	add	r3, r0
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	9b06      	ldr	r3, [sp, #24]
 800d15e:	4406      	add	r6, r0
 800d160:	4403      	add	r3, r0
 800d162:	9306      	str	r3, [sp, #24]
 800d164:	9b04      	ldr	r3, [sp, #16]
 800d166:	2b00      	cmp	r3, #0
 800d168:	dd05      	ble.n	800d176 <_dtoa_r+0x756>
 800d16a:	9901      	ldr	r1, [sp, #4]
 800d16c:	461a      	mov	r2, r3
 800d16e:	4648      	mov	r0, r9
 800d170:	f000 fcba 	bl	800dae8 <__lshift>
 800d174:	9001      	str	r0, [sp, #4]
 800d176:	9b06      	ldr	r3, [sp, #24]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	dd05      	ble.n	800d188 <_dtoa_r+0x768>
 800d17c:	4621      	mov	r1, r4
 800d17e:	461a      	mov	r2, r3
 800d180:	4648      	mov	r0, r9
 800d182:	f000 fcb1 	bl	800dae8 <__lshift>
 800d186:	4604      	mov	r4, r0
 800d188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d060      	beq.n	800d250 <_dtoa_r+0x830>
 800d18e:	9801      	ldr	r0, [sp, #4]
 800d190:	4621      	mov	r1, r4
 800d192:	f000 fd15 	bl	800dbc0 <__mcmp>
 800d196:	2800      	cmp	r0, #0
 800d198:	da5a      	bge.n	800d250 <_dtoa_r+0x830>
 800d19a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800d19e:	9305      	str	r3, [sp, #20]
 800d1a0:	9901      	ldr	r1, [sp, #4]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	220a      	movs	r2, #10
 800d1a6:	4648      	mov	r0, r9
 800d1a8:	f000 fafa 	bl	800d7a0 <__multadd>
 800d1ac:	9b08      	ldr	r3, [sp, #32]
 800d1ae:	9001      	str	r0, [sp, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f000 8177 	beq.w	800d4a4 <_dtoa_r+0xa84>
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	220a      	movs	r2, #10
 800d1bc:	4648      	mov	r0, r9
 800d1be:	f000 faef 	bl	800d7a0 <__multadd>
 800d1c2:	f1bb 0f00 	cmp.w	fp, #0
 800d1c6:	4605      	mov	r5, r0
 800d1c8:	dc6e      	bgt.n	800d2a8 <_dtoa_r+0x888>
 800d1ca:	9b07      	ldr	r3, [sp, #28]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	dc48      	bgt.n	800d262 <_dtoa_r+0x842>
 800d1d0:	e06a      	b.n	800d2a8 <_dtoa_r+0x888>
 800d1d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d1d8:	e739      	b.n	800d04e <_dtoa_r+0x62e>
 800d1da:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800d1de:	42a3      	cmp	r3, r4
 800d1e0:	db07      	blt.n	800d1f2 <_dtoa_r+0x7d2>
 800d1e2:	f1ba 0f00 	cmp.w	sl, #0
 800d1e6:	eba3 0404 	sub.w	r4, r3, r4
 800d1ea:	db0b      	blt.n	800d204 <_dtoa_r+0x7e4>
 800d1ec:	9e04      	ldr	r6, [sp, #16]
 800d1ee:	4652      	mov	r2, sl
 800d1f0:	e72f      	b.n	800d052 <_dtoa_r+0x632>
 800d1f2:	1ae2      	subs	r2, r4, r3
 800d1f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1f6:	9e04      	ldr	r6, [sp, #16]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1fc:	4652      	mov	r2, sl
 800d1fe:	4623      	mov	r3, r4
 800d200:	2400      	movs	r4, #0
 800d202:	e726      	b.n	800d052 <_dtoa_r+0x632>
 800d204:	9a04      	ldr	r2, [sp, #16]
 800d206:	eba2 060a 	sub.w	r6, r2, sl
 800d20a:	2200      	movs	r2, #0
 800d20c:	e721      	b.n	800d052 <_dtoa_r+0x632>
 800d20e:	9e04      	ldr	r6, [sp, #16]
 800d210:	9d08      	ldr	r5, [sp, #32]
 800d212:	461c      	mov	r4, r3
 800d214:	e72a      	b.n	800d06c <_dtoa_r+0x64c>
 800d216:	9a01      	ldr	r2, [sp, #4]
 800d218:	9205      	str	r2, [sp, #20]
 800d21a:	e752      	b.n	800d0c2 <_dtoa_r+0x6a2>
 800d21c:	9901      	ldr	r1, [sp, #4]
 800d21e:	461a      	mov	r2, r3
 800d220:	e751      	b.n	800d0c6 <_dtoa_r+0x6a6>
 800d222:	9b05      	ldr	r3, [sp, #20]
 800d224:	9301      	str	r3, [sp, #4]
 800d226:	e752      	b.n	800d0ce <_dtoa_r+0x6ae>
 800d228:	2300      	movs	r3, #0
 800d22a:	e77b      	b.n	800d124 <_dtoa_r+0x704>
 800d22c:	9b02      	ldr	r3, [sp, #8]
 800d22e:	e779      	b.n	800d124 <_dtoa_r+0x704>
 800d230:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d232:	e778      	b.n	800d126 <_dtoa_r+0x706>
 800d234:	2300      	movs	r3, #0
 800d236:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d238:	e779      	b.n	800d12e <_dtoa_r+0x70e>
 800d23a:	d093      	beq.n	800d164 <_dtoa_r+0x744>
 800d23c:	9b04      	ldr	r3, [sp, #16]
 800d23e:	321c      	adds	r2, #28
 800d240:	4413      	add	r3, r2
 800d242:	9304      	str	r3, [sp, #16]
 800d244:	9b06      	ldr	r3, [sp, #24]
 800d246:	4416      	add	r6, r2
 800d248:	4413      	add	r3, r2
 800d24a:	e78a      	b.n	800d162 <_dtoa_r+0x742>
 800d24c:	4602      	mov	r2, r0
 800d24e:	e7f5      	b.n	800d23c <_dtoa_r+0x81c>
 800d250:	f1ba 0f00 	cmp.w	sl, #0
 800d254:	f8cd 8014 	str.w	r8, [sp, #20]
 800d258:	46d3      	mov	fp, sl
 800d25a:	dc21      	bgt.n	800d2a0 <_dtoa_r+0x880>
 800d25c:	9b07      	ldr	r3, [sp, #28]
 800d25e:	2b02      	cmp	r3, #2
 800d260:	dd1e      	ble.n	800d2a0 <_dtoa_r+0x880>
 800d262:	f1bb 0f00 	cmp.w	fp, #0
 800d266:	f47f addc 	bne.w	800ce22 <_dtoa_r+0x402>
 800d26a:	4621      	mov	r1, r4
 800d26c:	465b      	mov	r3, fp
 800d26e:	2205      	movs	r2, #5
 800d270:	4648      	mov	r0, r9
 800d272:	f000 fa95 	bl	800d7a0 <__multadd>
 800d276:	4601      	mov	r1, r0
 800d278:	4604      	mov	r4, r0
 800d27a:	9801      	ldr	r0, [sp, #4]
 800d27c:	f000 fca0 	bl	800dbc0 <__mcmp>
 800d280:	2800      	cmp	r0, #0
 800d282:	f77f adce 	ble.w	800ce22 <_dtoa_r+0x402>
 800d286:	463e      	mov	r6, r7
 800d288:	2331      	movs	r3, #49	@ 0x31
 800d28a:	f806 3b01 	strb.w	r3, [r6], #1
 800d28e:	9b05      	ldr	r3, [sp, #20]
 800d290:	3301      	adds	r3, #1
 800d292:	9305      	str	r3, [sp, #20]
 800d294:	e5c9      	b.n	800ce2a <_dtoa_r+0x40a>
 800d296:	f8cd 8014 	str.w	r8, [sp, #20]
 800d29a:	4654      	mov	r4, sl
 800d29c:	4625      	mov	r5, r4
 800d29e:	e7f2      	b.n	800d286 <_dtoa_r+0x866>
 800d2a0:	9b08      	ldr	r3, [sp, #32]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f000 8102 	beq.w	800d4ac <_dtoa_r+0xa8c>
 800d2a8:	2e00      	cmp	r6, #0
 800d2aa:	dd05      	ble.n	800d2b8 <_dtoa_r+0x898>
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	4632      	mov	r2, r6
 800d2b0:	4648      	mov	r0, r9
 800d2b2:	f000 fc19 	bl	800dae8 <__lshift>
 800d2b6:	4605      	mov	r5, r0
 800d2b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d058      	beq.n	800d370 <_dtoa_r+0x950>
 800d2be:	6869      	ldr	r1, [r5, #4]
 800d2c0:	4648      	mov	r0, r9
 800d2c2:	f000 fa0b 	bl	800d6dc <_Balloc>
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	b928      	cbnz	r0, 800d2d6 <_dtoa_r+0x8b6>
 800d2ca:	4b82      	ldr	r3, [pc, #520]	@ (800d4d4 <_dtoa_r+0xab4>)
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d2d2:	f7ff bbbe 	b.w	800ca52 <_dtoa_r+0x32>
 800d2d6:	692a      	ldr	r2, [r5, #16]
 800d2d8:	3202      	adds	r2, #2
 800d2da:	0092      	lsls	r2, r2, #2
 800d2dc:	f105 010c 	add.w	r1, r5, #12
 800d2e0:	300c      	adds	r0, #12
 800d2e2:	f7ff fb06 	bl	800c8f2 <memcpy>
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	4631      	mov	r1, r6
 800d2ea:	4648      	mov	r0, r9
 800d2ec:	f000 fbfc 	bl	800dae8 <__lshift>
 800d2f0:	1c7b      	adds	r3, r7, #1
 800d2f2:	9304      	str	r3, [sp, #16]
 800d2f4:	eb07 030b 	add.w	r3, r7, fp
 800d2f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2fa:	9b02      	ldr	r3, [sp, #8]
 800d2fc:	f003 0301 	and.w	r3, r3, #1
 800d300:	46a8      	mov	r8, r5
 800d302:	9308      	str	r3, [sp, #32]
 800d304:	4605      	mov	r5, r0
 800d306:	9b04      	ldr	r3, [sp, #16]
 800d308:	9801      	ldr	r0, [sp, #4]
 800d30a:	4621      	mov	r1, r4
 800d30c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800d310:	f7ff fafd 	bl	800c90e <quorem>
 800d314:	4641      	mov	r1, r8
 800d316:	9002      	str	r0, [sp, #8]
 800d318:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d31c:	9801      	ldr	r0, [sp, #4]
 800d31e:	f000 fc4f 	bl	800dbc0 <__mcmp>
 800d322:	462a      	mov	r2, r5
 800d324:	9006      	str	r0, [sp, #24]
 800d326:	4621      	mov	r1, r4
 800d328:	4648      	mov	r0, r9
 800d32a:	f000 fc65 	bl	800dbf8 <__mdiff>
 800d32e:	68c2      	ldr	r2, [r0, #12]
 800d330:	4606      	mov	r6, r0
 800d332:	b9fa      	cbnz	r2, 800d374 <_dtoa_r+0x954>
 800d334:	4601      	mov	r1, r0
 800d336:	9801      	ldr	r0, [sp, #4]
 800d338:	f000 fc42 	bl	800dbc0 <__mcmp>
 800d33c:	4602      	mov	r2, r0
 800d33e:	4631      	mov	r1, r6
 800d340:	4648      	mov	r0, r9
 800d342:	920a      	str	r2, [sp, #40]	@ 0x28
 800d344:	f000 fa0a 	bl	800d75c <_Bfree>
 800d348:	9b07      	ldr	r3, [sp, #28]
 800d34a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d34c:	9e04      	ldr	r6, [sp, #16]
 800d34e:	ea42 0103 	orr.w	r1, r2, r3
 800d352:	9b08      	ldr	r3, [sp, #32]
 800d354:	4319      	orrs	r1, r3
 800d356:	d10f      	bne.n	800d378 <_dtoa_r+0x958>
 800d358:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d35c:	d028      	beq.n	800d3b0 <_dtoa_r+0x990>
 800d35e:	9b06      	ldr	r3, [sp, #24]
 800d360:	2b00      	cmp	r3, #0
 800d362:	dd02      	ble.n	800d36a <_dtoa_r+0x94a>
 800d364:	9b02      	ldr	r3, [sp, #8]
 800d366:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d36a:	f88b a000 	strb.w	sl, [fp]
 800d36e:	e55e      	b.n	800ce2e <_dtoa_r+0x40e>
 800d370:	4628      	mov	r0, r5
 800d372:	e7bd      	b.n	800d2f0 <_dtoa_r+0x8d0>
 800d374:	2201      	movs	r2, #1
 800d376:	e7e2      	b.n	800d33e <_dtoa_r+0x91e>
 800d378:	9b06      	ldr	r3, [sp, #24]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	db04      	blt.n	800d388 <_dtoa_r+0x968>
 800d37e:	9907      	ldr	r1, [sp, #28]
 800d380:	430b      	orrs	r3, r1
 800d382:	9908      	ldr	r1, [sp, #32]
 800d384:	430b      	orrs	r3, r1
 800d386:	d120      	bne.n	800d3ca <_dtoa_r+0x9aa>
 800d388:	2a00      	cmp	r2, #0
 800d38a:	ddee      	ble.n	800d36a <_dtoa_r+0x94a>
 800d38c:	9901      	ldr	r1, [sp, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	4648      	mov	r0, r9
 800d392:	f000 fba9 	bl	800dae8 <__lshift>
 800d396:	4621      	mov	r1, r4
 800d398:	9001      	str	r0, [sp, #4]
 800d39a:	f000 fc11 	bl	800dbc0 <__mcmp>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	dc03      	bgt.n	800d3aa <_dtoa_r+0x98a>
 800d3a2:	d1e2      	bne.n	800d36a <_dtoa_r+0x94a>
 800d3a4:	f01a 0f01 	tst.w	sl, #1
 800d3a8:	d0df      	beq.n	800d36a <_dtoa_r+0x94a>
 800d3aa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d3ae:	d1d9      	bne.n	800d364 <_dtoa_r+0x944>
 800d3b0:	2339      	movs	r3, #57	@ 0x39
 800d3b2:	f88b 3000 	strb.w	r3, [fp]
 800d3b6:	4633      	mov	r3, r6
 800d3b8:	461e      	mov	r6, r3
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d3c0:	2a39      	cmp	r2, #57	@ 0x39
 800d3c2:	d052      	beq.n	800d46a <_dtoa_r+0xa4a>
 800d3c4:	3201      	adds	r2, #1
 800d3c6:	701a      	strb	r2, [r3, #0]
 800d3c8:	e531      	b.n	800ce2e <_dtoa_r+0x40e>
 800d3ca:	2a00      	cmp	r2, #0
 800d3cc:	dd07      	ble.n	800d3de <_dtoa_r+0x9be>
 800d3ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d3d2:	d0ed      	beq.n	800d3b0 <_dtoa_r+0x990>
 800d3d4:	f10a 0301 	add.w	r3, sl, #1
 800d3d8:	f88b 3000 	strb.w	r3, [fp]
 800d3dc:	e527      	b.n	800ce2e <_dtoa_r+0x40e>
 800d3de:	9b04      	ldr	r3, [sp, #16]
 800d3e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3e2:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d029      	beq.n	800d43e <_dtoa_r+0xa1e>
 800d3ea:	9901      	ldr	r1, [sp, #4]
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	220a      	movs	r2, #10
 800d3f0:	4648      	mov	r0, r9
 800d3f2:	f000 f9d5 	bl	800d7a0 <__multadd>
 800d3f6:	45a8      	cmp	r8, r5
 800d3f8:	9001      	str	r0, [sp, #4]
 800d3fa:	f04f 0300 	mov.w	r3, #0
 800d3fe:	f04f 020a 	mov.w	r2, #10
 800d402:	4641      	mov	r1, r8
 800d404:	4648      	mov	r0, r9
 800d406:	d107      	bne.n	800d418 <_dtoa_r+0x9f8>
 800d408:	f000 f9ca 	bl	800d7a0 <__multadd>
 800d40c:	4680      	mov	r8, r0
 800d40e:	4605      	mov	r5, r0
 800d410:	9b04      	ldr	r3, [sp, #16]
 800d412:	3301      	adds	r3, #1
 800d414:	9304      	str	r3, [sp, #16]
 800d416:	e776      	b.n	800d306 <_dtoa_r+0x8e6>
 800d418:	f000 f9c2 	bl	800d7a0 <__multadd>
 800d41c:	4629      	mov	r1, r5
 800d41e:	4680      	mov	r8, r0
 800d420:	2300      	movs	r3, #0
 800d422:	220a      	movs	r2, #10
 800d424:	4648      	mov	r0, r9
 800d426:	f000 f9bb 	bl	800d7a0 <__multadd>
 800d42a:	4605      	mov	r5, r0
 800d42c:	e7f0      	b.n	800d410 <_dtoa_r+0x9f0>
 800d42e:	f1bb 0f00 	cmp.w	fp, #0
 800d432:	bfcc      	ite	gt
 800d434:	465e      	movgt	r6, fp
 800d436:	2601      	movle	r6, #1
 800d438:	443e      	add	r6, r7
 800d43a:	f04f 0800 	mov.w	r8, #0
 800d43e:	9901      	ldr	r1, [sp, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	4648      	mov	r0, r9
 800d444:	f000 fb50 	bl	800dae8 <__lshift>
 800d448:	4621      	mov	r1, r4
 800d44a:	9001      	str	r0, [sp, #4]
 800d44c:	f000 fbb8 	bl	800dbc0 <__mcmp>
 800d450:	2800      	cmp	r0, #0
 800d452:	dcb0      	bgt.n	800d3b6 <_dtoa_r+0x996>
 800d454:	d102      	bne.n	800d45c <_dtoa_r+0xa3c>
 800d456:	f01a 0f01 	tst.w	sl, #1
 800d45a:	d1ac      	bne.n	800d3b6 <_dtoa_r+0x996>
 800d45c:	4633      	mov	r3, r6
 800d45e:	461e      	mov	r6, r3
 800d460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d464:	2a30      	cmp	r2, #48	@ 0x30
 800d466:	d0fa      	beq.n	800d45e <_dtoa_r+0xa3e>
 800d468:	e4e1      	b.n	800ce2e <_dtoa_r+0x40e>
 800d46a:	429f      	cmp	r7, r3
 800d46c:	d1a4      	bne.n	800d3b8 <_dtoa_r+0x998>
 800d46e:	9b05      	ldr	r3, [sp, #20]
 800d470:	3301      	adds	r3, #1
 800d472:	9305      	str	r3, [sp, #20]
 800d474:	2331      	movs	r3, #49	@ 0x31
 800d476:	703b      	strb	r3, [r7, #0]
 800d478:	e4d9      	b.n	800ce2e <_dtoa_r+0x40e>
 800d47a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d47c:	4f16      	ldr	r7, [pc, #88]	@ (800d4d8 <_dtoa_r+0xab8>)
 800d47e:	b11b      	cbz	r3, 800d488 <_dtoa_r+0xa68>
 800d480:	f107 0308 	add.w	r3, r7, #8
 800d484:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	4638      	mov	r0, r7
 800d48a:	b011      	add	sp, #68	@ 0x44
 800d48c:	ecbd 8b02 	vpop	{d8}
 800d490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d494:	9b07      	ldr	r3, [sp, #28]
 800d496:	2b01      	cmp	r3, #1
 800d498:	f77f ae2c 	ble.w	800d0f4 <_dtoa_r+0x6d4>
 800d49c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d49e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4a0:	2001      	movs	r0, #1
 800d4a2:	e64c      	b.n	800d13e <_dtoa_r+0x71e>
 800d4a4:	f1bb 0f00 	cmp.w	fp, #0
 800d4a8:	f77f aed8 	ble.w	800d25c <_dtoa_r+0x83c>
 800d4ac:	463e      	mov	r6, r7
 800d4ae:	9801      	ldr	r0, [sp, #4]
 800d4b0:	4621      	mov	r1, r4
 800d4b2:	f7ff fa2c 	bl	800c90e <quorem>
 800d4b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d4ba:	f806 ab01 	strb.w	sl, [r6], #1
 800d4be:	1bf2      	subs	r2, r6, r7
 800d4c0:	4593      	cmp	fp, r2
 800d4c2:	ddb4      	ble.n	800d42e <_dtoa_r+0xa0e>
 800d4c4:	9901      	ldr	r1, [sp, #4]
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	220a      	movs	r2, #10
 800d4ca:	4648      	mov	r0, r9
 800d4cc:	f000 f968 	bl	800d7a0 <__multadd>
 800d4d0:	9001      	str	r0, [sp, #4]
 800d4d2:	e7ec      	b.n	800d4ae <_dtoa_r+0xa8e>
 800d4d4:	0800f060 	.word	0x0800f060
 800d4d8:	0800efe4 	.word	0x0800efe4

0800d4dc <_free_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	4605      	mov	r5, r0
 800d4e0:	2900      	cmp	r1, #0
 800d4e2:	d041      	beq.n	800d568 <_free_r+0x8c>
 800d4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4e8:	1f0c      	subs	r4, r1, #4
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	bfb8      	it	lt
 800d4ee:	18e4      	addlt	r4, r4, r3
 800d4f0:	f000 f8e8 	bl	800d6c4 <__malloc_lock>
 800d4f4:	4a1d      	ldr	r2, [pc, #116]	@ (800d56c <_free_r+0x90>)
 800d4f6:	6813      	ldr	r3, [r2, #0]
 800d4f8:	b933      	cbnz	r3, 800d508 <_free_r+0x2c>
 800d4fa:	6063      	str	r3, [r4, #4]
 800d4fc:	6014      	str	r4, [r2, #0]
 800d4fe:	4628      	mov	r0, r5
 800d500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d504:	f000 b8e4 	b.w	800d6d0 <__malloc_unlock>
 800d508:	42a3      	cmp	r3, r4
 800d50a:	d908      	bls.n	800d51e <_free_r+0x42>
 800d50c:	6820      	ldr	r0, [r4, #0]
 800d50e:	1821      	adds	r1, r4, r0
 800d510:	428b      	cmp	r3, r1
 800d512:	bf01      	itttt	eq
 800d514:	6819      	ldreq	r1, [r3, #0]
 800d516:	685b      	ldreq	r3, [r3, #4]
 800d518:	1809      	addeq	r1, r1, r0
 800d51a:	6021      	streq	r1, [r4, #0]
 800d51c:	e7ed      	b.n	800d4fa <_free_r+0x1e>
 800d51e:	461a      	mov	r2, r3
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	b10b      	cbz	r3, 800d528 <_free_r+0x4c>
 800d524:	42a3      	cmp	r3, r4
 800d526:	d9fa      	bls.n	800d51e <_free_r+0x42>
 800d528:	6811      	ldr	r1, [r2, #0]
 800d52a:	1850      	adds	r0, r2, r1
 800d52c:	42a0      	cmp	r0, r4
 800d52e:	d10b      	bne.n	800d548 <_free_r+0x6c>
 800d530:	6820      	ldr	r0, [r4, #0]
 800d532:	4401      	add	r1, r0
 800d534:	1850      	adds	r0, r2, r1
 800d536:	4283      	cmp	r3, r0
 800d538:	6011      	str	r1, [r2, #0]
 800d53a:	d1e0      	bne.n	800d4fe <_free_r+0x22>
 800d53c:	6818      	ldr	r0, [r3, #0]
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	6053      	str	r3, [r2, #4]
 800d542:	4408      	add	r0, r1
 800d544:	6010      	str	r0, [r2, #0]
 800d546:	e7da      	b.n	800d4fe <_free_r+0x22>
 800d548:	d902      	bls.n	800d550 <_free_r+0x74>
 800d54a:	230c      	movs	r3, #12
 800d54c:	602b      	str	r3, [r5, #0]
 800d54e:	e7d6      	b.n	800d4fe <_free_r+0x22>
 800d550:	6820      	ldr	r0, [r4, #0]
 800d552:	1821      	adds	r1, r4, r0
 800d554:	428b      	cmp	r3, r1
 800d556:	bf04      	itt	eq
 800d558:	6819      	ldreq	r1, [r3, #0]
 800d55a:	685b      	ldreq	r3, [r3, #4]
 800d55c:	6063      	str	r3, [r4, #4]
 800d55e:	bf04      	itt	eq
 800d560:	1809      	addeq	r1, r1, r0
 800d562:	6021      	streq	r1, [r4, #0]
 800d564:	6054      	str	r4, [r2, #4]
 800d566:	e7ca      	b.n	800d4fe <_free_r+0x22>
 800d568:	bd38      	pop	{r3, r4, r5, pc}
 800d56a:	bf00      	nop
 800d56c:	240006c0 	.word	0x240006c0

0800d570 <malloc>:
 800d570:	4b02      	ldr	r3, [pc, #8]	@ (800d57c <malloc+0xc>)
 800d572:	4601      	mov	r1, r0
 800d574:	6818      	ldr	r0, [r3, #0]
 800d576:	f000 b825 	b.w	800d5c4 <_malloc_r>
 800d57a:	bf00      	nop
 800d57c:	24000024 	.word	0x24000024

0800d580 <sbrk_aligned>:
 800d580:	b570      	push	{r4, r5, r6, lr}
 800d582:	4e0f      	ldr	r6, [pc, #60]	@ (800d5c0 <sbrk_aligned+0x40>)
 800d584:	460c      	mov	r4, r1
 800d586:	6831      	ldr	r1, [r6, #0]
 800d588:	4605      	mov	r5, r0
 800d58a:	b911      	cbnz	r1, 800d592 <sbrk_aligned+0x12>
 800d58c:	f000 fe3e 	bl	800e20c <_sbrk_r>
 800d590:	6030      	str	r0, [r6, #0]
 800d592:	4621      	mov	r1, r4
 800d594:	4628      	mov	r0, r5
 800d596:	f000 fe39 	bl	800e20c <_sbrk_r>
 800d59a:	1c43      	adds	r3, r0, #1
 800d59c:	d103      	bne.n	800d5a6 <sbrk_aligned+0x26>
 800d59e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	bd70      	pop	{r4, r5, r6, pc}
 800d5a6:	1cc4      	adds	r4, r0, #3
 800d5a8:	f024 0403 	bic.w	r4, r4, #3
 800d5ac:	42a0      	cmp	r0, r4
 800d5ae:	d0f8      	beq.n	800d5a2 <sbrk_aligned+0x22>
 800d5b0:	1a21      	subs	r1, r4, r0
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	f000 fe2a 	bl	800e20c <_sbrk_r>
 800d5b8:	3001      	adds	r0, #1
 800d5ba:	d1f2      	bne.n	800d5a2 <sbrk_aligned+0x22>
 800d5bc:	e7ef      	b.n	800d59e <sbrk_aligned+0x1e>
 800d5be:	bf00      	nop
 800d5c0:	240006bc 	.word	0x240006bc

0800d5c4 <_malloc_r>:
 800d5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5c8:	1ccd      	adds	r5, r1, #3
 800d5ca:	f025 0503 	bic.w	r5, r5, #3
 800d5ce:	3508      	adds	r5, #8
 800d5d0:	2d0c      	cmp	r5, #12
 800d5d2:	bf38      	it	cc
 800d5d4:	250c      	movcc	r5, #12
 800d5d6:	2d00      	cmp	r5, #0
 800d5d8:	4606      	mov	r6, r0
 800d5da:	db01      	blt.n	800d5e0 <_malloc_r+0x1c>
 800d5dc:	42a9      	cmp	r1, r5
 800d5de:	d904      	bls.n	800d5ea <_malloc_r+0x26>
 800d5e0:	230c      	movs	r3, #12
 800d5e2:	6033      	str	r3, [r6, #0]
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6c0 <_malloc_r+0xfc>
 800d5ee:	f000 f869 	bl	800d6c4 <__malloc_lock>
 800d5f2:	f8d8 3000 	ldr.w	r3, [r8]
 800d5f6:	461c      	mov	r4, r3
 800d5f8:	bb44      	cbnz	r4, 800d64c <_malloc_r+0x88>
 800d5fa:	4629      	mov	r1, r5
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f7ff ffbf 	bl	800d580 <sbrk_aligned>
 800d602:	1c43      	adds	r3, r0, #1
 800d604:	4604      	mov	r4, r0
 800d606:	d158      	bne.n	800d6ba <_malloc_r+0xf6>
 800d608:	f8d8 4000 	ldr.w	r4, [r8]
 800d60c:	4627      	mov	r7, r4
 800d60e:	2f00      	cmp	r7, #0
 800d610:	d143      	bne.n	800d69a <_malloc_r+0xd6>
 800d612:	2c00      	cmp	r4, #0
 800d614:	d04b      	beq.n	800d6ae <_malloc_r+0xea>
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	4639      	mov	r1, r7
 800d61a:	4630      	mov	r0, r6
 800d61c:	eb04 0903 	add.w	r9, r4, r3
 800d620:	f000 fdf4 	bl	800e20c <_sbrk_r>
 800d624:	4581      	cmp	r9, r0
 800d626:	d142      	bne.n	800d6ae <_malloc_r+0xea>
 800d628:	6821      	ldr	r1, [r4, #0]
 800d62a:	1a6d      	subs	r5, r5, r1
 800d62c:	4629      	mov	r1, r5
 800d62e:	4630      	mov	r0, r6
 800d630:	f7ff ffa6 	bl	800d580 <sbrk_aligned>
 800d634:	3001      	adds	r0, #1
 800d636:	d03a      	beq.n	800d6ae <_malloc_r+0xea>
 800d638:	6823      	ldr	r3, [r4, #0]
 800d63a:	442b      	add	r3, r5
 800d63c:	6023      	str	r3, [r4, #0]
 800d63e:	f8d8 3000 	ldr.w	r3, [r8]
 800d642:	685a      	ldr	r2, [r3, #4]
 800d644:	bb62      	cbnz	r2, 800d6a0 <_malloc_r+0xdc>
 800d646:	f8c8 7000 	str.w	r7, [r8]
 800d64a:	e00f      	b.n	800d66c <_malloc_r+0xa8>
 800d64c:	6822      	ldr	r2, [r4, #0]
 800d64e:	1b52      	subs	r2, r2, r5
 800d650:	d420      	bmi.n	800d694 <_malloc_r+0xd0>
 800d652:	2a0b      	cmp	r2, #11
 800d654:	d917      	bls.n	800d686 <_malloc_r+0xc2>
 800d656:	1961      	adds	r1, r4, r5
 800d658:	42a3      	cmp	r3, r4
 800d65a:	6025      	str	r5, [r4, #0]
 800d65c:	bf18      	it	ne
 800d65e:	6059      	strne	r1, [r3, #4]
 800d660:	6863      	ldr	r3, [r4, #4]
 800d662:	bf08      	it	eq
 800d664:	f8c8 1000 	streq.w	r1, [r8]
 800d668:	5162      	str	r2, [r4, r5]
 800d66a:	604b      	str	r3, [r1, #4]
 800d66c:	4630      	mov	r0, r6
 800d66e:	f000 f82f 	bl	800d6d0 <__malloc_unlock>
 800d672:	f104 000b 	add.w	r0, r4, #11
 800d676:	1d23      	adds	r3, r4, #4
 800d678:	f020 0007 	bic.w	r0, r0, #7
 800d67c:	1ac2      	subs	r2, r0, r3
 800d67e:	bf1c      	itt	ne
 800d680:	1a1b      	subne	r3, r3, r0
 800d682:	50a3      	strne	r3, [r4, r2]
 800d684:	e7af      	b.n	800d5e6 <_malloc_r+0x22>
 800d686:	6862      	ldr	r2, [r4, #4]
 800d688:	42a3      	cmp	r3, r4
 800d68a:	bf0c      	ite	eq
 800d68c:	f8c8 2000 	streq.w	r2, [r8]
 800d690:	605a      	strne	r2, [r3, #4]
 800d692:	e7eb      	b.n	800d66c <_malloc_r+0xa8>
 800d694:	4623      	mov	r3, r4
 800d696:	6864      	ldr	r4, [r4, #4]
 800d698:	e7ae      	b.n	800d5f8 <_malloc_r+0x34>
 800d69a:	463c      	mov	r4, r7
 800d69c:	687f      	ldr	r7, [r7, #4]
 800d69e:	e7b6      	b.n	800d60e <_malloc_r+0x4a>
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	42a3      	cmp	r3, r4
 800d6a6:	d1fb      	bne.n	800d6a0 <_malloc_r+0xdc>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	6053      	str	r3, [r2, #4]
 800d6ac:	e7de      	b.n	800d66c <_malloc_r+0xa8>
 800d6ae:	230c      	movs	r3, #12
 800d6b0:	6033      	str	r3, [r6, #0]
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f000 f80c 	bl	800d6d0 <__malloc_unlock>
 800d6b8:	e794      	b.n	800d5e4 <_malloc_r+0x20>
 800d6ba:	6005      	str	r5, [r0, #0]
 800d6bc:	e7d6      	b.n	800d66c <_malloc_r+0xa8>
 800d6be:	bf00      	nop
 800d6c0:	240006c0 	.word	0x240006c0

0800d6c4 <__malloc_lock>:
 800d6c4:	4801      	ldr	r0, [pc, #4]	@ (800d6cc <__malloc_lock+0x8>)
 800d6c6:	f7ff b912 	b.w	800c8ee <__retarget_lock_acquire_recursive>
 800d6ca:	bf00      	nop
 800d6cc:	240006b8 	.word	0x240006b8

0800d6d0 <__malloc_unlock>:
 800d6d0:	4801      	ldr	r0, [pc, #4]	@ (800d6d8 <__malloc_unlock+0x8>)
 800d6d2:	f7ff b90d 	b.w	800c8f0 <__retarget_lock_release_recursive>
 800d6d6:	bf00      	nop
 800d6d8:	240006b8 	.word	0x240006b8

0800d6dc <_Balloc>:
 800d6dc:	b570      	push	{r4, r5, r6, lr}
 800d6de:	69c6      	ldr	r6, [r0, #28]
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	460d      	mov	r5, r1
 800d6e4:	b976      	cbnz	r6, 800d704 <_Balloc+0x28>
 800d6e6:	2010      	movs	r0, #16
 800d6e8:	f7ff ff42 	bl	800d570 <malloc>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	61e0      	str	r0, [r4, #28]
 800d6f0:	b920      	cbnz	r0, 800d6fc <_Balloc+0x20>
 800d6f2:	4b18      	ldr	r3, [pc, #96]	@ (800d754 <_Balloc+0x78>)
 800d6f4:	4818      	ldr	r0, [pc, #96]	@ (800d758 <_Balloc+0x7c>)
 800d6f6:	216b      	movs	r1, #107	@ 0x6b
 800d6f8:	f000 fd98 	bl	800e22c <__assert_func>
 800d6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d700:	6006      	str	r6, [r0, #0]
 800d702:	60c6      	str	r6, [r0, #12]
 800d704:	69e6      	ldr	r6, [r4, #28]
 800d706:	68f3      	ldr	r3, [r6, #12]
 800d708:	b183      	cbz	r3, 800d72c <_Balloc+0x50>
 800d70a:	69e3      	ldr	r3, [r4, #28]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d712:	b9b8      	cbnz	r0, 800d744 <_Balloc+0x68>
 800d714:	2101      	movs	r1, #1
 800d716:	fa01 f605 	lsl.w	r6, r1, r5
 800d71a:	1d72      	adds	r2, r6, #5
 800d71c:	0092      	lsls	r2, r2, #2
 800d71e:	4620      	mov	r0, r4
 800d720:	f000 fda2 	bl	800e268 <_calloc_r>
 800d724:	b160      	cbz	r0, 800d740 <_Balloc+0x64>
 800d726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d72a:	e00e      	b.n	800d74a <_Balloc+0x6e>
 800d72c:	2221      	movs	r2, #33	@ 0x21
 800d72e:	2104      	movs	r1, #4
 800d730:	4620      	mov	r0, r4
 800d732:	f000 fd99 	bl	800e268 <_calloc_r>
 800d736:	69e3      	ldr	r3, [r4, #28]
 800d738:	60f0      	str	r0, [r6, #12]
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d1e4      	bne.n	800d70a <_Balloc+0x2e>
 800d740:	2000      	movs	r0, #0
 800d742:	bd70      	pop	{r4, r5, r6, pc}
 800d744:	6802      	ldr	r2, [r0, #0]
 800d746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d74a:	2300      	movs	r3, #0
 800d74c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d750:	e7f7      	b.n	800d742 <_Balloc+0x66>
 800d752:	bf00      	nop
 800d754:	0800eff1 	.word	0x0800eff1
 800d758:	0800f071 	.word	0x0800f071

0800d75c <_Bfree>:
 800d75c:	b570      	push	{r4, r5, r6, lr}
 800d75e:	69c6      	ldr	r6, [r0, #28]
 800d760:	4605      	mov	r5, r0
 800d762:	460c      	mov	r4, r1
 800d764:	b976      	cbnz	r6, 800d784 <_Bfree+0x28>
 800d766:	2010      	movs	r0, #16
 800d768:	f7ff ff02 	bl	800d570 <malloc>
 800d76c:	4602      	mov	r2, r0
 800d76e:	61e8      	str	r0, [r5, #28]
 800d770:	b920      	cbnz	r0, 800d77c <_Bfree+0x20>
 800d772:	4b09      	ldr	r3, [pc, #36]	@ (800d798 <_Bfree+0x3c>)
 800d774:	4809      	ldr	r0, [pc, #36]	@ (800d79c <_Bfree+0x40>)
 800d776:	218f      	movs	r1, #143	@ 0x8f
 800d778:	f000 fd58 	bl	800e22c <__assert_func>
 800d77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d780:	6006      	str	r6, [r0, #0]
 800d782:	60c6      	str	r6, [r0, #12]
 800d784:	b13c      	cbz	r4, 800d796 <_Bfree+0x3a>
 800d786:	69eb      	ldr	r3, [r5, #28]
 800d788:	6862      	ldr	r2, [r4, #4]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d790:	6021      	str	r1, [r4, #0]
 800d792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d796:	bd70      	pop	{r4, r5, r6, pc}
 800d798:	0800eff1 	.word	0x0800eff1
 800d79c:	0800f071 	.word	0x0800f071

0800d7a0 <__multadd>:
 800d7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a4:	690d      	ldr	r5, [r1, #16]
 800d7a6:	4607      	mov	r7, r0
 800d7a8:	460c      	mov	r4, r1
 800d7aa:	461e      	mov	r6, r3
 800d7ac:	f101 0c14 	add.w	ip, r1, #20
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	f8dc 3000 	ldr.w	r3, [ip]
 800d7b6:	b299      	uxth	r1, r3
 800d7b8:	fb02 6101 	mla	r1, r2, r1, r6
 800d7bc:	0c1e      	lsrs	r6, r3, #16
 800d7be:	0c0b      	lsrs	r3, r1, #16
 800d7c0:	fb02 3306 	mla	r3, r2, r6, r3
 800d7c4:	b289      	uxth	r1, r1
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7cc:	4285      	cmp	r5, r0
 800d7ce:	f84c 1b04 	str.w	r1, [ip], #4
 800d7d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7d6:	dcec      	bgt.n	800d7b2 <__multadd+0x12>
 800d7d8:	b30e      	cbz	r6, 800d81e <__multadd+0x7e>
 800d7da:	68a3      	ldr	r3, [r4, #8]
 800d7dc:	42ab      	cmp	r3, r5
 800d7de:	dc19      	bgt.n	800d814 <__multadd+0x74>
 800d7e0:	6861      	ldr	r1, [r4, #4]
 800d7e2:	4638      	mov	r0, r7
 800d7e4:	3101      	adds	r1, #1
 800d7e6:	f7ff ff79 	bl	800d6dc <_Balloc>
 800d7ea:	4680      	mov	r8, r0
 800d7ec:	b928      	cbnz	r0, 800d7fa <__multadd+0x5a>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d824 <__multadd+0x84>)
 800d7f2:	480d      	ldr	r0, [pc, #52]	@ (800d828 <__multadd+0x88>)
 800d7f4:	21ba      	movs	r1, #186	@ 0xba
 800d7f6:	f000 fd19 	bl	800e22c <__assert_func>
 800d7fa:	6922      	ldr	r2, [r4, #16]
 800d7fc:	3202      	adds	r2, #2
 800d7fe:	f104 010c 	add.w	r1, r4, #12
 800d802:	0092      	lsls	r2, r2, #2
 800d804:	300c      	adds	r0, #12
 800d806:	f7ff f874 	bl	800c8f2 <memcpy>
 800d80a:	4621      	mov	r1, r4
 800d80c:	4638      	mov	r0, r7
 800d80e:	f7ff ffa5 	bl	800d75c <_Bfree>
 800d812:	4644      	mov	r4, r8
 800d814:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d818:	3501      	adds	r5, #1
 800d81a:	615e      	str	r6, [r3, #20]
 800d81c:	6125      	str	r5, [r4, #16]
 800d81e:	4620      	mov	r0, r4
 800d820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d824:	0800f060 	.word	0x0800f060
 800d828:	0800f071 	.word	0x0800f071

0800d82c <__hi0bits>:
 800d82c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d830:	4603      	mov	r3, r0
 800d832:	bf36      	itet	cc
 800d834:	0403      	lslcc	r3, r0, #16
 800d836:	2000      	movcs	r0, #0
 800d838:	2010      	movcc	r0, #16
 800d83a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d83e:	bf3c      	itt	cc
 800d840:	021b      	lslcc	r3, r3, #8
 800d842:	3008      	addcc	r0, #8
 800d844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d848:	bf3c      	itt	cc
 800d84a:	011b      	lslcc	r3, r3, #4
 800d84c:	3004      	addcc	r0, #4
 800d84e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d852:	bf3c      	itt	cc
 800d854:	009b      	lslcc	r3, r3, #2
 800d856:	3002      	addcc	r0, #2
 800d858:	2b00      	cmp	r3, #0
 800d85a:	db05      	blt.n	800d868 <__hi0bits+0x3c>
 800d85c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d860:	f100 0001 	add.w	r0, r0, #1
 800d864:	bf08      	it	eq
 800d866:	2020      	moveq	r0, #32
 800d868:	4770      	bx	lr

0800d86a <__lo0bits>:
 800d86a:	6803      	ldr	r3, [r0, #0]
 800d86c:	4602      	mov	r2, r0
 800d86e:	f013 0007 	ands.w	r0, r3, #7
 800d872:	d00b      	beq.n	800d88c <__lo0bits+0x22>
 800d874:	07d9      	lsls	r1, r3, #31
 800d876:	d421      	bmi.n	800d8bc <__lo0bits+0x52>
 800d878:	0798      	lsls	r0, r3, #30
 800d87a:	bf49      	itett	mi
 800d87c:	085b      	lsrmi	r3, r3, #1
 800d87e:	089b      	lsrpl	r3, r3, #2
 800d880:	2001      	movmi	r0, #1
 800d882:	6013      	strmi	r3, [r2, #0]
 800d884:	bf5c      	itt	pl
 800d886:	6013      	strpl	r3, [r2, #0]
 800d888:	2002      	movpl	r0, #2
 800d88a:	4770      	bx	lr
 800d88c:	b299      	uxth	r1, r3
 800d88e:	b909      	cbnz	r1, 800d894 <__lo0bits+0x2a>
 800d890:	0c1b      	lsrs	r3, r3, #16
 800d892:	2010      	movs	r0, #16
 800d894:	b2d9      	uxtb	r1, r3
 800d896:	b909      	cbnz	r1, 800d89c <__lo0bits+0x32>
 800d898:	3008      	adds	r0, #8
 800d89a:	0a1b      	lsrs	r3, r3, #8
 800d89c:	0719      	lsls	r1, r3, #28
 800d89e:	bf04      	itt	eq
 800d8a0:	091b      	lsreq	r3, r3, #4
 800d8a2:	3004      	addeq	r0, #4
 800d8a4:	0799      	lsls	r1, r3, #30
 800d8a6:	bf04      	itt	eq
 800d8a8:	089b      	lsreq	r3, r3, #2
 800d8aa:	3002      	addeq	r0, #2
 800d8ac:	07d9      	lsls	r1, r3, #31
 800d8ae:	d403      	bmi.n	800d8b8 <__lo0bits+0x4e>
 800d8b0:	085b      	lsrs	r3, r3, #1
 800d8b2:	f100 0001 	add.w	r0, r0, #1
 800d8b6:	d003      	beq.n	800d8c0 <__lo0bits+0x56>
 800d8b8:	6013      	str	r3, [r2, #0]
 800d8ba:	4770      	bx	lr
 800d8bc:	2000      	movs	r0, #0
 800d8be:	4770      	bx	lr
 800d8c0:	2020      	movs	r0, #32
 800d8c2:	4770      	bx	lr

0800d8c4 <__i2b>:
 800d8c4:	b510      	push	{r4, lr}
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	2101      	movs	r1, #1
 800d8ca:	f7ff ff07 	bl	800d6dc <_Balloc>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	b928      	cbnz	r0, 800d8de <__i2b+0x1a>
 800d8d2:	4b05      	ldr	r3, [pc, #20]	@ (800d8e8 <__i2b+0x24>)
 800d8d4:	4805      	ldr	r0, [pc, #20]	@ (800d8ec <__i2b+0x28>)
 800d8d6:	f240 1145 	movw	r1, #325	@ 0x145
 800d8da:	f000 fca7 	bl	800e22c <__assert_func>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	6144      	str	r4, [r0, #20]
 800d8e2:	6103      	str	r3, [r0, #16]
 800d8e4:	bd10      	pop	{r4, pc}
 800d8e6:	bf00      	nop
 800d8e8:	0800f060 	.word	0x0800f060
 800d8ec:	0800f071 	.word	0x0800f071

0800d8f0 <__multiply>:
 800d8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f4:	4617      	mov	r7, r2
 800d8f6:	690a      	ldr	r2, [r1, #16]
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	bfa8      	it	ge
 800d8fe:	463b      	movge	r3, r7
 800d900:	4689      	mov	r9, r1
 800d902:	bfa4      	itt	ge
 800d904:	460f      	movge	r7, r1
 800d906:	4699      	movge	r9, r3
 800d908:	693d      	ldr	r5, [r7, #16]
 800d90a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	6879      	ldr	r1, [r7, #4]
 800d912:	eb05 060a 	add.w	r6, r5, sl
 800d916:	42b3      	cmp	r3, r6
 800d918:	b085      	sub	sp, #20
 800d91a:	bfb8      	it	lt
 800d91c:	3101      	addlt	r1, #1
 800d91e:	f7ff fedd 	bl	800d6dc <_Balloc>
 800d922:	b930      	cbnz	r0, 800d932 <__multiply+0x42>
 800d924:	4602      	mov	r2, r0
 800d926:	4b41      	ldr	r3, [pc, #260]	@ (800da2c <__multiply+0x13c>)
 800d928:	4841      	ldr	r0, [pc, #260]	@ (800da30 <__multiply+0x140>)
 800d92a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d92e:	f000 fc7d 	bl	800e22c <__assert_func>
 800d932:	f100 0414 	add.w	r4, r0, #20
 800d936:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d93a:	4623      	mov	r3, r4
 800d93c:	2200      	movs	r2, #0
 800d93e:	4573      	cmp	r3, lr
 800d940:	d320      	bcc.n	800d984 <__multiply+0x94>
 800d942:	f107 0814 	add.w	r8, r7, #20
 800d946:	f109 0114 	add.w	r1, r9, #20
 800d94a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d94e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d952:	9302      	str	r3, [sp, #8]
 800d954:	1beb      	subs	r3, r5, r7
 800d956:	3b15      	subs	r3, #21
 800d958:	f023 0303 	bic.w	r3, r3, #3
 800d95c:	3304      	adds	r3, #4
 800d95e:	3715      	adds	r7, #21
 800d960:	42bd      	cmp	r5, r7
 800d962:	bf38      	it	cc
 800d964:	2304      	movcc	r3, #4
 800d966:	9301      	str	r3, [sp, #4]
 800d968:	9b02      	ldr	r3, [sp, #8]
 800d96a:	9103      	str	r1, [sp, #12]
 800d96c:	428b      	cmp	r3, r1
 800d96e:	d80c      	bhi.n	800d98a <__multiply+0x9a>
 800d970:	2e00      	cmp	r6, #0
 800d972:	dd03      	ble.n	800d97c <__multiply+0x8c>
 800d974:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d055      	beq.n	800da28 <__multiply+0x138>
 800d97c:	6106      	str	r6, [r0, #16]
 800d97e:	b005      	add	sp, #20
 800d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d984:	f843 2b04 	str.w	r2, [r3], #4
 800d988:	e7d9      	b.n	800d93e <__multiply+0x4e>
 800d98a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d98e:	f1ba 0f00 	cmp.w	sl, #0
 800d992:	d01f      	beq.n	800d9d4 <__multiply+0xe4>
 800d994:	46c4      	mov	ip, r8
 800d996:	46a1      	mov	r9, r4
 800d998:	2700      	movs	r7, #0
 800d99a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d99e:	f8d9 3000 	ldr.w	r3, [r9]
 800d9a2:	fa1f fb82 	uxth.w	fp, r2
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d9ac:	443b      	add	r3, r7
 800d9ae:	f8d9 7000 	ldr.w	r7, [r9]
 800d9b2:	0c12      	lsrs	r2, r2, #16
 800d9b4:	0c3f      	lsrs	r7, r7, #16
 800d9b6:	fb0a 7202 	mla	r2, sl, r2, r7
 800d9ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9c4:	4565      	cmp	r5, ip
 800d9c6:	f849 3b04 	str.w	r3, [r9], #4
 800d9ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d9ce:	d8e4      	bhi.n	800d99a <__multiply+0xaa>
 800d9d0:	9b01      	ldr	r3, [sp, #4]
 800d9d2:	50e7      	str	r7, [r4, r3]
 800d9d4:	9b03      	ldr	r3, [sp, #12]
 800d9d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d9da:	3104      	adds	r1, #4
 800d9dc:	f1b9 0f00 	cmp.w	r9, #0
 800d9e0:	d020      	beq.n	800da24 <__multiply+0x134>
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	4647      	mov	r7, r8
 800d9e6:	46a4      	mov	ip, r4
 800d9e8:	f04f 0a00 	mov.w	sl, #0
 800d9ec:	f8b7 b000 	ldrh.w	fp, [r7]
 800d9f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d9f4:	fb09 220b 	mla	r2, r9, fp, r2
 800d9f8:	4452      	add	r2, sl
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da00:	f84c 3b04 	str.w	r3, [ip], #4
 800da04:	f857 3b04 	ldr.w	r3, [r7], #4
 800da08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da0c:	f8bc 3000 	ldrh.w	r3, [ip]
 800da10:	fb09 330a 	mla	r3, r9, sl, r3
 800da14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800da18:	42bd      	cmp	r5, r7
 800da1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da1e:	d8e5      	bhi.n	800d9ec <__multiply+0xfc>
 800da20:	9a01      	ldr	r2, [sp, #4]
 800da22:	50a3      	str	r3, [r4, r2]
 800da24:	3404      	adds	r4, #4
 800da26:	e79f      	b.n	800d968 <__multiply+0x78>
 800da28:	3e01      	subs	r6, #1
 800da2a:	e7a1      	b.n	800d970 <__multiply+0x80>
 800da2c:	0800f060 	.word	0x0800f060
 800da30:	0800f071 	.word	0x0800f071

0800da34 <__pow5mult>:
 800da34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da38:	4615      	mov	r5, r2
 800da3a:	f012 0203 	ands.w	r2, r2, #3
 800da3e:	4607      	mov	r7, r0
 800da40:	460e      	mov	r6, r1
 800da42:	d007      	beq.n	800da54 <__pow5mult+0x20>
 800da44:	4c25      	ldr	r4, [pc, #148]	@ (800dadc <__pow5mult+0xa8>)
 800da46:	3a01      	subs	r2, #1
 800da48:	2300      	movs	r3, #0
 800da4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da4e:	f7ff fea7 	bl	800d7a0 <__multadd>
 800da52:	4606      	mov	r6, r0
 800da54:	10ad      	asrs	r5, r5, #2
 800da56:	d03d      	beq.n	800dad4 <__pow5mult+0xa0>
 800da58:	69fc      	ldr	r4, [r7, #28]
 800da5a:	b97c      	cbnz	r4, 800da7c <__pow5mult+0x48>
 800da5c:	2010      	movs	r0, #16
 800da5e:	f7ff fd87 	bl	800d570 <malloc>
 800da62:	4602      	mov	r2, r0
 800da64:	61f8      	str	r0, [r7, #28]
 800da66:	b928      	cbnz	r0, 800da74 <__pow5mult+0x40>
 800da68:	4b1d      	ldr	r3, [pc, #116]	@ (800dae0 <__pow5mult+0xac>)
 800da6a:	481e      	ldr	r0, [pc, #120]	@ (800dae4 <__pow5mult+0xb0>)
 800da6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da70:	f000 fbdc 	bl	800e22c <__assert_func>
 800da74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da78:	6004      	str	r4, [r0, #0]
 800da7a:	60c4      	str	r4, [r0, #12]
 800da7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da84:	b94c      	cbnz	r4, 800da9a <__pow5mult+0x66>
 800da86:	f240 2171 	movw	r1, #625	@ 0x271
 800da8a:	4638      	mov	r0, r7
 800da8c:	f7ff ff1a 	bl	800d8c4 <__i2b>
 800da90:	2300      	movs	r3, #0
 800da92:	f8c8 0008 	str.w	r0, [r8, #8]
 800da96:	4604      	mov	r4, r0
 800da98:	6003      	str	r3, [r0, #0]
 800da9a:	f04f 0900 	mov.w	r9, #0
 800da9e:	07eb      	lsls	r3, r5, #31
 800daa0:	d50a      	bpl.n	800dab8 <__pow5mult+0x84>
 800daa2:	4631      	mov	r1, r6
 800daa4:	4622      	mov	r2, r4
 800daa6:	4638      	mov	r0, r7
 800daa8:	f7ff ff22 	bl	800d8f0 <__multiply>
 800daac:	4631      	mov	r1, r6
 800daae:	4680      	mov	r8, r0
 800dab0:	4638      	mov	r0, r7
 800dab2:	f7ff fe53 	bl	800d75c <_Bfree>
 800dab6:	4646      	mov	r6, r8
 800dab8:	106d      	asrs	r5, r5, #1
 800daba:	d00b      	beq.n	800dad4 <__pow5mult+0xa0>
 800dabc:	6820      	ldr	r0, [r4, #0]
 800dabe:	b938      	cbnz	r0, 800dad0 <__pow5mult+0x9c>
 800dac0:	4622      	mov	r2, r4
 800dac2:	4621      	mov	r1, r4
 800dac4:	4638      	mov	r0, r7
 800dac6:	f7ff ff13 	bl	800d8f0 <__multiply>
 800daca:	6020      	str	r0, [r4, #0]
 800dacc:	f8c0 9000 	str.w	r9, [r0]
 800dad0:	4604      	mov	r4, r0
 800dad2:	e7e4      	b.n	800da9e <__pow5mult+0x6a>
 800dad4:	4630      	mov	r0, r6
 800dad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dada:	bf00      	nop
 800dadc:	0800f124 	.word	0x0800f124
 800dae0:	0800eff1 	.word	0x0800eff1
 800dae4:	0800f071 	.word	0x0800f071

0800dae8 <__lshift>:
 800dae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daec:	460c      	mov	r4, r1
 800daee:	6849      	ldr	r1, [r1, #4]
 800daf0:	6923      	ldr	r3, [r4, #16]
 800daf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800daf6:	68a3      	ldr	r3, [r4, #8]
 800daf8:	4607      	mov	r7, r0
 800dafa:	4691      	mov	r9, r2
 800dafc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db00:	f108 0601 	add.w	r6, r8, #1
 800db04:	42b3      	cmp	r3, r6
 800db06:	db0b      	blt.n	800db20 <__lshift+0x38>
 800db08:	4638      	mov	r0, r7
 800db0a:	f7ff fde7 	bl	800d6dc <_Balloc>
 800db0e:	4605      	mov	r5, r0
 800db10:	b948      	cbnz	r0, 800db26 <__lshift+0x3e>
 800db12:	4602      	mov	r2, r0
 800db14:	4b28      	ldr	r3, [pc, #160]	@ (800dbb8 <__lshift+0xd0>)
 800db16:	4829      	ldr	r0, [pc, #164]	@ (800dbbc <__lshift+0xd4>)
 800db18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db1c:	f000 fb86 	bl	800e22c <__assert_func>
 800db20:	3101      	adds	r1, #1
 800db22:	005b      	lsls	r3, r3, #1
 800db24:	e7ee      	b.n	800db04 <__lshift+0x1c>
 800db26:	2300      	movs	r3, #0
 800db28:	f100 0114 	add.w	r1, r0, #20
 800db2c:	f100 0210 	add.w	r2, r0, #16
 800db30:	4618      	mov	r0, r3
 800db32:	4553      	cmp	r3, sl
 800db34:	db33      	blt.n	800db9e <__lshift+0xb6>
 800db36:	6920      	ldr	r0, [r4, #16]
 800db38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db3c:	f104 0314 	add.w	r3, r4, #20
 800db40:	f019 091f 	ands.w	r9, r9, #31
 800db44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db4c:	d02b      	beq.n	800dba6 <__lshift+0xbe>
 800db4e:	f1c9 0e20 	rsb	lr, r9, #32
 800db52:	468a      	mov	sl, r1
 800db54:	2200      	movs	r2, #0
 800db56:	6818      	ldr	r0, [r3, #0]
 800db58:	fa00 f009 	lsl.w	r0, r0, r9
 800db5c:	4310      	orrs	r0, r2
 800db5e:	f84a 0b04 	str.w	r0, [sl], #4
 800db62:	f853 2b04 	ldr.w	r2, [r3], #4
 800db66:	459c      	cmp	ip, r3
 800db68:	fa22 f20e 	lsr.w	r2, r2, lr
 800db6c:	d8f3      	bhi.n	800db56 <__lshift+0x6e>
 800db6e:	ebac 0304 	sub.w	r3, ip, r4
 800db72:	3b15      	subs	r3, #21
 800db74:	f023 0303 	bic.w	r3, r3, #3
 800db78:	3304      	adds	r3, #4
 800db7a:	f104 0015 	add.w	r0, r4, #21
 800db7e:	4560      	cmp	r0, ip
 800db80:	bf88      	it	hi
 800db82:	2304      	movhi	r3, #4
 800db84:	50ca      	str	r2, [r1, r3]
 800db86:	b10a      	cbz	r2, 800db8c <__lshift+0xa4>
 800db88:	f108 0602 	add.w	r6, r8, #2
 800db8c:	3e01      	subs	r6, #1
 800db8e:	4638      	mov	r0, r7
 800db90:	612e      	str	r6, [r5, #16]
 800db92:	4621      	mov	r1, r4
 800db94:	f7ff fde2 	bl	800d75c <_Bfree>
 800db98:	4628      	mov	r0, r5
 800db9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dba2:	3301      	adds	r3, #1
 800dba4:	e7c5      	b.n	800db32 <__lshift+0x4a>
 800dba6:	3904      	subs	r1, #4
 800dba8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbac:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbb0:	459c      	cmp	ip, r3
 800dbb2:	d8f9      	bhi.n	800dba8 <__lshift+0xc0>
 800dbb4:	e7ea      	b.n	800db8c <__lshift+0xa4>
 800dbb6:	bf00      	nop
 800dbb8:	0800f060 	.word	0x0800f060
 800dbbc:	0800f071 	.word	0x0800f071

0800dbc0 <__mcmp>:
 800dbc0:	690a      	ldr	r2, [r1, #16]
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	6900      	ldr	r0, [r0, #16]
 800dbc6:	1a80      	subs	r0, r0, r2
 800dbc8:	b530      	push	{r4, r5, lr}
 800dbca:	d10e      	bne.n	800dbea <__mcmp+0x2a>
 800dbcc:	3314      	adds	r3, #20
 800dbce:	3114      	adds	r1, #20
 800dbd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dbd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dbd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dbdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dbe0:	4295      	cmp	r5, r2
 800dbe2:	d003      	beq.n	800dbec <__mcmp+0x2c>
 800dbe4:	d205      	bcs.n	800dbf2 <__mcmp+0x32>
 800dbe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbea:	bd30      	pop	{r4, r5, pc}
 800dbec:	42a3      	cmp	r3, r4
 800dbee:	d3f3      	bcc.n	800dbd8 <__mcmp+0x18>
 800dbf0:	e7fb      	b.n	800dbea <__mcmp+0x2a>
 800dbf2:	2001      	movs	r0, #1
 800dbf4:	e7f9      	b.n	800dbea <__mcmp+0x2a>
	...

0800dbf8 <__mdiff>:
 800dbf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfc:	4689      	mov	r9, r1
 800dbfe:	4606      	mov	r6, r0
 800dc00:	4611      	mov	r1, r2
 800dc02:	4648      	mov	r0, r9
 800dc04:	4614      	mov	r4, r2
 800dc06:	f7ff ffdb 	bl	800dbc0 <__mcmp>
 800dc0a:	1e05      	subs	r5, r0, #0
 800dc0c:	d112      	bne.n	800dc34 <__mdiff+0x3c>
 800dc0e:	4629      	mov	r1, r5
 800dc10:	4630      	mov	r0, r6
 800dc12:	f7ff fd63 	bl	800d6dc <_Balloc>
 800dc16:	4602      	mov	r2, r0
 800dc18:	b928      	cbnz	r0, 800dc26 <__mdiff+0x2e>
 800dc1a:	4b3f      	ldr	r3, [pc, #252]	@ (800dd18 <__mdiff+0x120>)
 800dc1c:	f240 2137 	movw	r1, #567	@ 0x237
 800dc20:	483e      	ldr	r0, [pc, #248]	@ (800dd1c <__mdiff+0x124>)
 800dc22:	f000 fb03 	bl	800e22c <__assert_func>
 800dc26:	2301      	movs	r3, #1
 800dc28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	b003      	add	sp, #12
 800dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc34:	bfbc      	itt	lt
 800dc36:	464b      	movlt	r3, r9
 800dc38:	46a1      	movlt	r9, r4
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc40:	bfba      	itte	lt
 800dc42:	461c      	movlt	r4, r3
 800dc44:	2501      	movlt	r5, #1
 800dc46:	2500      	movge	r5, #0
 800dc48:	f7ff fd48 	bl	800d6dc <_Balloc>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	b918      	cbnz	r0, 800dc58 <__mdiff+0x60>
 800dc50:	4b31      	ldr	r3, [pc, #196]	@ (800dd18 <__mdiff+0x120>)
 800dc52:	f240 2145 	movw	r1, #581	@ 0x245
 800dc56:	e7e3      	b.n	800dc20 <__mdiff+0x28>
 800dc58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc5c:	6926      	ldr	r6, [r4, #16]
 800dc5e:	60c5      	str	r5, [r0, #12]
 800dc60:	f109 0310 	add.w	r3, r9, #16
 800dc64:	f109 0514 	add.w	r5, r9, #20
 800dc68:	f104 0e14 	add.w	lr, r4, #20
 800dc6c:	f100 0b14 	add.w	fp, r0, #20
 800dc70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc78:	9301      	str	r3, [sp, #4]
 800dc7a:	46d9      	mov	r9, fp
 800dc7c:	f04f 0c00 	mov.w	ip, #0
 800dc80:	9b01      	ldr	r3, [sp, #4]
 800dc82:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc86:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc8a:	9301      	str	r3, [sp, #4]
 800dc8c:	fa1f f38a 	uxth.w	r3, sl
 800dc90:	4619      	mov	r1, r3
 800dc92:	b283      	uxth	r3, r0
 800dc94:	1acb      	subs	r3, r1, r3
 800dc96:	0c00      	lsrs	r0, r0, #16
 800dc98:	4463      	add	r3, ip
 800dc9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dca8:	4576      	cmp	r6, lr
 800dcaa:	f849 3b04 	str.w	r3, [r9], #4
 800dcae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcb2:	d8e5      	bhi.n	800dc80 <__mdiff+0x88>
 800dcb4:	1b33      	subs	r3, r6, r4
 800dcb6:	3b15      	subs	r3, #21
 800dcb8:	f023 0303 	bic.w	r3, r3, #3
 800dcbc:	3415      	adds	r4, #21
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	42a6      	cmp	r6, r4
 800dcc2:	bf38      	it	cc
 800dcc4:	2304      	movcc	r3, #4
 800dcc6:	441d      	add	r5, r3
 800dcc8:	445b      	add	r3, fp
 800dcca:	461e      	mov	r6, r3
 800dccc:	462c      	mov	r4, r5
 800dcce:	4544      	cmp	r4, r8
 800dcd0:	d30e      	bcc.n	800dcf0 <__mdiff+0xf8>
 800dcd2:	f108 0103 	add.w	r1, r8, #3
 800dcd6:	1b49      	subs	r1, r1, r5
 800dcd8:	f021 0103 	bic.w	r1, r1, #3
 800dcdc:	3d03      	subs	r5, #3
 800dcde:	45a8      	cmp	r8, r5
 800dce0:	bf38      	it	cc
 800dce2:	2100      	movcc	r1, #0
 800dce4:	440b      	add	r3, r1
 800dce6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcea:	b191      	cbz	r1, 800dd12 <__mdiff+0x11a>
 800dcec:	6117      	str	r7, [r2, #16]
 800dcee:	e79d      	b.n	800dc2c <__mdiff+0x34>
 800dcf0:	f854 1b04 	ldr.w	r1, [r4], #4
 800dcf4:	46e6      	mov	lr, ip
 800dcf6:	0c08      	lsrs	r0, r1, #16
 800dcf8:	fa1c fc81 	uxtah	ip, ip, r1
 800dcfc:	4471      	add	r1, lr
 800dcfe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd02:	b289      	uxth	r1, r1
 800dd04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd08:	f846 1b04 	str.w	r1, [r6], #4
 800dd0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd10:	e7dd      	b.n	800dcce <__mdiff+0xd6>
 800dd12:	3f01      	subs	r7, #1
 800dd14:	e7e7      	b.n	800dce6 <__mdiff+0xee>
 800dd16:	bf00      	nop
 800dd18:	0800f060 	.word	0x0800f060
 800dd1c:	0800f071 	.word	0x0800f071

0800dd20 <__d2b>:
 800dd20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd24:	460f      	mov	r7, r1
 800dd26:	2101      	movs	r1, #1
 800dd28:	ec59 8b10 	vmov	r8, r9, d0
 800dd2c:	4616      	mov	r6, r2
 800dd2e:	f7ff fcd5 	bl	800d6dc <_Balloc>
 800dd32:	4604      	mov	r4, r0
 800dd34:	b930      	cbnz	r0, 800dd44 <__d2b+0x24>
 800dd36:	4602      	mov	r2, r0
 800dd38:	4b23      	ldr	r3, [pc, #140]	@ (800ddc8 <__d2b+0xa8>)
 800dd3a:	4824      	ldr	r0, [pc, #144]	@ (800ddcc <__d2b+0xac>)
 800dd3c:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd40:	f000 fa74 	bl	800e22c <__assert_func>
 800dd44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd4c:	b10d      	cbz	r5, 800dd52 <__d2b+0x32>
 800dd4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd52:	9301      	str	r3, [sp, #4]
 800dd54:	f1b8 0300 	subs.w	r3, r8, #0
 800dd58:	d023      	beq.n	800dda2 <__d2b+0x82>
 800dd5a:	4668      	mov	r0, sp
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	f7ff fd84 	bl	800d86a <__lo0bits>
 800dd62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd66:	b1d0      	cbz	r0, 800dd9e <__d2b+0x7e>
 800dd68:	f1c0 0320 	rsb	r3, r0, #32
 800dd6c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd70:	430b      	orrs	r3, r1
 800dd72:	40c2      	lsrs	r2, r0
 800dd74:	6163      	str	r3, [r4, #20]
 800dd76:	9201      	str	r2, [sp, #4]
 800dd78:	9b01      	ldr	r3, [sp, #4]
 800dd7a:	61a3      	str	r3, [r4, #24]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	bf0c      	ite	eq
 800dd80:	2201      	moveq	r2, #1
 800dd82:	2202      	movne	r2, #2
 800dd84:	6122      	str	r2, [r4, #16]
 800dd86:	b1a5      	cbz	r5, 800ddb2 <__d2b+0x92>
 800dd88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dd8c:	4405      	add	r5, r0
 800dd8e:	603d      	str	r5, [r7, #0]
 800dd90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dd94:	6030      	str	r0, [r6, #0]
 800dd96:	4620      	mov	r0, r4
 800dd98:	b003      	add	sp, #12
 800dd9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd9e:	6161      	str	r1, [r4, #20]
 800dda0:	e7ea      	b.n	800dd78 <__d2b+0x58>
 800dda2:	a801      	add	r0, sp, #4
 800dda4:	f7ff fd61 	bl	800d86a <__lo0bits>
 800dda8:	9b01      	ldr	r3, [sp, #4]
 800ddaa:	6163      	str	r3, [r4, #20]
 800ddac:	3020      	adds	r0, #32
 800ddae:	2201      	movs	r2, #1
 800ddb0:	e7e8      	b.n	800dd84 <__d2b+0x64>
 800ddb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ddba:	6038      	str	r0, [r7, #0]
 800ddbc:	6918      	ldr	r0, [r3, #16]
 800ddbe:	f7ff fd35 	bl	800d82c <__hi0bits>
 800ddc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddc6:	e7e5      	b.n	800dd94 <__d2b+0x74>
 800ddc8:	0800f060 	.word	0x0800f060
 800ddcc:	0800f071 	.word	0x0800f071

0800ddd0 <__ssputs_r>:
 800ddd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd4:	688e      	ldr	r6, [r1, #8]
 800ddd6:	461f      	mov	r7, r3
 800ddd8:	42be      	cmp	r6, r7
 800ddda:	680b      	ldr	r3, [r1, #0]
 800dddc:	4682      	mov	sl, r0
 800ddde:	460c      	mov	r4, r1
 800dde0:	4690      	mov	r8, r2
 800dde2:	d82d      	bhi.n	800de40 <__ssputs_r+0x70>
 800dde4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dde8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ddec:	d026      	beq.n	800de3c <__ssputs_r+0x6c>
 800ddee:	6965      	ldr	r5, [r4, #20]
 800ddf0:	6909      	ldr	r1, [r1, #16]
 800ddf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddf6:	eba3 0901 	sub.w	r9, r3, r1
 800ddfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddfe:	1c7b      	adds	r3, r7, #1
 800de00:	444b      	add	r3, r9
 800de02:	106d      	asrs	r5, r5, #1
 800de04:	429d      	cmp	r5, r3
 800de06:	bf38      	it	cc
 800de08:	461d      	movcc	r5, r3
 800de0a:	0553      	lsls	r3, r2, #21
 800de0c:	d527      	bpl.n	800de5e <__ssputs_r+0x8e>
 800de0e:	4629      	mov	r1, r5
 800de10:	f7ff fbd8 	bl	800d5c4 <_malloc_r>
 800de14:	4606      	mov	r6, r0
 800de16:	b360      	cbz	r0, 800de72 <__ssputs_r+0xa2>
 800de18:	6921      	ldr	r1, [r4, #16]
 800de1a:	464a      	mov	r2, r9
 800de1c:	f7fe fd69 	bl	800c8f2 <memcpy>
 800de20:	89a3      	ldrh	r3, [r4, #12]
 800de22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de2a:	81a3      	strh	r3, [r4, #12]
 800de2c:	6126      	str	r6, [r4, #16]
 800de2e:	6165      	str	r5, [r4, #20]
 800de30:	444e      	add	r6, r9
 800de32:	eba5 0509 	sub.w	r5, r5, r9
 800de36:	6026      	str	r6, [r4, #0]
 800de38:	60a5      	str	r5, [r4, #8]
 800de3a:	463e      	mov	r6, r7
 800de3c:	42be      	cmp	r6, r7
 800de3e:	d900      	bls.n	800de42 <__ssputs_r+0x72>
 800de40:	463e      	mov	r6, r7
 800de42:	6820      	ldr	r0, [r4, #0]
 800de44:	4632      	mov	r2, r6
 800de46:	4641      	mov	r1, r8
 800de48:	f000 f9c6 	bl	800e1d8 <memmove>
 800de4c:	68a3      	ldr	r3, [r4, #8]
 800de4e:	1b9b      	subs	r3, r3, r6
 800de50:	60a3      	str	r3, [r4, #8]
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	4433      	add	r3, r6
 800de56:	6023      	str	r3, [r4, #0]
 800de58:	2000      	movs	r0, #0
 800de5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de5e:	462a      	mov	r2, r5
 800de60:	f000 fa28 	bl	800e2b4 <_realloc_r>
 800de64:	4606      	mov	r6, r0
 800de66:	2800      	cmp	r0, #0
 800de68:	d1e0      	bne.n	800de2c <__ssputs_r+0x5c>
 800de6a:	6921      	ldr	r1, [r4, #16]
 800de6c:	4650      	mov	r0, sl
 800de6e:	f7ff fb35 	bl	800d4dc <_free_r>
 800de72:	230c      	movs	r3, #12
 800de74:	f8ca 3000 	str.w	r3, [sl]
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de7e:	81a3      	strh	r3, [r4, #12]
 800de80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de84:	e7e9      	b.n	800de5a <__ssputs_r+0x8a>
	...

0800de88 <_svfiprintf_r>:
 800de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8c:	4698      	mov	r8, r3
 800de8e:	898b      	ldrh	r3, [r1, #12]
 800de90:	061b      	lsls	r3, r3, #24
 800de92:	b09d      	sub	sp, #116	@ 0x74
 800de94:	4607      	mov	r7, r0
 800de96:	460d      	mov	r5, r1
 800de98:	4614      	mov	r4, r2
 800de9a:	d510      	bpl.n	800debe <_svfiprintf_r+0x36>
 800de9c:	690b      	ldr	r3, [r1, #16]
 800de9e:	b973      	cbnz	r3, 800debe <_svfiprintf_r+0x36>
 800dea0:	2140      	movs	r1, #64	@ 0x40
 800dea2:	f7ff fb8f 	bl	800d5c4 <_malloc_r>
 800dea6:	6028      	str	r0, [r5, #0]
 800dea8:	6128      	str	r0, [r5, #16]
 800deaa:	b930      	cbnz	r0, 800deba <_svfiprintf_r+0x32>
 800deac:	230c      	movs	r3, #12
 800deae:	603b      	str	r3, [r7, #0]
 800deb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800deb4:	b01d      	add	sp, #116	@ 0x74
 800deb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deba:	2340      	movs	r3, #64	@ 0x40
 800debc:	616b      	str	r3, [r5, #20]
 800debe:	2300      	movs	r3, #0
 800dec0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dec2:	2320      	movs	r3, #32
 800dec4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dec8:	f8cd 800c 	str.w	r8, [sp, #12]
 800decc:	2330      	movs	r3, #48	@ 0x30
 800dece:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e06c <_svfiprintf_r+0x1e4>
 800ded2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ded6:	f04f 0901 	mov.w	r9, #1
 800deda:	4623      	mov	r3, r4
 800dedc:	469a      	mov	sl, r3
 800dede:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dee2:	b10a      	cbz	r2, 800dee8 <_svfiprintf_r+0x60>
 800dee4:	2a25      	cmp	r2, #37	@ 0x25
 800dee6:	d1f9      	bne.n	800dedc <_svfiprintf_r+0x54>
 800dee8:	ebba 0b04 	subs.w	fp, sl, r4
 800deec:	d00b      	beq.n	800df06 <_svfiprintf_r+0x7e>
 800deee:	465b      	mov	r3, fp
 800def0:	4622      	mov	r2, r4
 800def2:	4629      	mov	r1, r5
 800def4:	4638      	mov	r0, r7
 800def6:	f7ff ff6b 	bl	800ddd0 <__ssputs_r>
 800defa:	3001      	adds	r0, #1
 800defc:	f000 80a7 	beq.w	800e04e <_svfiprintf_r+0x1c6>
 800df00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df02:	445a      	add	r2, fp
 800df04:	9209      	str	r2, [sp, #36]	@ 0x24
 800df06:	f89a 3000 	ldrb.w	r3, [sl]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f000 809f 	beq.w	800e04e <_svfiprintf_r+0x1c6>
 800df10:	2300      	movs	r3, #0
 800df12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df1a:	f10a 0a01 	add.w	sl, sl, #1
 800df1e:	9304      	str	r3, [sp, #16]
 800df20:	9307      	str	r3, [sp, #28]
 800df22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df26:	931a      	str	r3, [sp, #104]	@ 0x68
 800df28:	4654      	mov	r4, sl
 800df2a:	2205      	movs	r2, #5
 800df2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df30:	484e      	ldr	r0, [pc, #312]	@ (800e06c <_svfiprintf_r+0x1e4>)
 800df32:	f7f2 f9ed 	bl	8000310 <memchr>
 800df36:	9a04      	ldr	r2, [sp, #16]
 800df38:	b9d8      	cbnz	r0, 800df72 <_svfiprintf_r+0xea>
 800df3a:	06d0      	lsls	r0, r2, #27
 800df3c:	bf44      	itt	mi
 800df3e:	2320      	movmi	r3, #32
 800df40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df44:	0711      	lsls	r1, r2, #28
 800df46:	bf44      	itt	mi
 800df48:	232b      	movmi	r3, #43	@ 0x2b
 800df4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df4e:	f89a 3000 	ldrb.w	r3, [sl]
 800df52:	2b2a      	cmp	r3, #42	@ 0x2a
 800df54:	d015      	beq.n	800df82 <_svfiprintf_r+0xfa>
 800df56:	9a07      	ldr	r2, [sp, #28]
 800df58:	4654      	mov	r4, sl
 800df5a:	2000      	movs	r0, #0
 800df5c:	f04f 0c0a 	mov.w	ip, #10
 800df60:	4621      	mov	r1, r4
 800df62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df66:	3b30      	subs	r3, #48	@ 0x30
 800df68:	2b09      	cmp	r3, #9
 800df6a:	d94b      	bls.n	800e004 <_svfiprintf_r+0x17c>
 800df6c:	b1b0      	cbz	r0, 800df9c <_svfiprintf_r+0x114>
 800df6e:	9207      	str	r2, [sp, #28]
 800df70:	e014      	b.n	800df9c <_svfiprintf_r+0x114>
 800df72:	eba0 0308 	sub.w	r3, r0, r8
 800df76:	fa09 f303 	lsl.w	r3, r9, r3
 800df7a:	4313      	orrs	r3, r2
 800df7c:	9304      	str	r3, [sp, #16]
 800df7e:	46a2      	mov	sl, r4
 800df80:	e7d2      	b.n	800df28 <_svfiprintf_r+0xa0>
 800df82:	9b03      	ldr	r3, [sp, #12]
 800df84:	1d19      	adds	r1, r3, #4
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	9103      	str	r1, [sp, #12]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	bfbb      	ittet	lt
 800df8e:	425b      	neglt	r3, r3
 800df90:	f042 0202 	orrlt.w	r2, r2, #2
 800df94:	9307      	strge	r3, [sp, #28]
 800df96:	9307      	strlt	r3, [sp, #28]
 800df98:	bfb8      	it	lt
 800df9a:	9204      	strlt	r2, [sp, #16]
 800df9c:	7823      	ldrb	r3, [r4, #0]
 800df9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfa0:	d10a      	bne.n	800dfb8 <_svfiprintf_r+0x130>
 800dfa2:	7863      	ldrb	r3, [r4, #1]
 800dfa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfa6:	d132      	bne.n	800e00e <_svfiprintf_r+0x186>
 800dfa8:	9b03      	ldr	r3, [sp, #12]
 800dfaa:	1d1a      	adds	r2, r3, #4
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	9203      	str	r2, [sp, #12]
 800dfb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfb4:	3402      	adds	r4, #2
 800dfb6:	9305      	str	r3, [sp, #20]
 800dfb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e07c <_svfiprintf_r+0x1f4>
 800dfbc:	7821      	ldrb	r1, [r4, #0]
 800dfbe:	2203      	movs	r2, #3
 800dfc0:	4650      	mov	r0, sl
 800dfc2:	f7f2 f9a5 	bl	8000310 <memchr>
 800dfc6:	b138      	cbz	r0, 800dfd8 <_svfiprintf_r+0x150>
 800dfc8:	9b04      	ldr	r3, [sp, #16]
 800dfca:	eba0 000a 	sub.w	r0, r0, sl
 800dfce:	2240      	movs	r2, #64	@ 0x40
 800dfd0:	4082      	lsls	r2, r0
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	3401      	adds	r4, #1
 800dfd6:	9304      	str	r3, [sp, #16]
 800dfd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfdc:	4824      	ldr	r0, [pc, #144]	@ (800e070 <_svfiprintf_r+0x1e8>)
 800dfde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfe2:	2206      	movs	r2, #6
 800dfe4:	f7f2 f994 	bl	8000310 <memchr>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d036      	beq.n	800e05a <_svfiprintf_r+0x1d2>
 800dfec:	4b21      	ldr	r3, [pc, #132]	@ (800e074 <_svfiprintf_r+0x1ec>)
 800dfee:	bb1b      	cbnz	r3, 800e038 <_svfiprintf_r+0x1b0>
 800dff0:	9b03      	ldr	r3, [sp, #12]
 800dff2:	3307      	adds	r3, #7
 800dff4:	f023 0307 	bic.w	r3, r3, #7
 800dff8:	3308      	adds	r3, #8
 800dffa:	9303      	str	r3, [sp, #12]
 800dffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dffe:	4433      	add	r3, r6
 800e000:	9309      	str	r3, [sp, #36]	@ 0x24
 800e002:	e76a      	b.n	800deda <_svfiprintf_r+0x52>
 800e004:	fb0c 3202 	mla	r2, ip, r2, r3
 800e008:	460c      	mov	r4, r1
 800e00a:	2001      	movs	r0, #1
 800e00c:	e7a8      	b.n	800df60 <_svfiprintf_r+0xd8>
 800e00e:	2300      	movs	r3, #0
 800e010:	3401      	adds	r4, #1
 800e012:	9305      	str	r3, [sp, #20]
 800e014:	4619      	mov	r1, r3
 800e016:	f04f 0c0a 	mov.w	ip, #10
 800e01a:	4620      	mov	r0, r4
 800e01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e020:	3a30      	subs	r2, #48	@ 0x30
 800e022:	2a09      	cmp	r2, #9
 800e024:	d903      	bls.n	800e02e <_svfiprintf_r+0x1a6>
 800e026:	2b00      	cmp	r3, #0
 800e028:	d0c6      	beq.n	800dfb8 <_svfiprintf_r+0x130>
 800e02a:	9105      	str	r1, [sp, #20]
 800e02c:	e7c4      	b.n	800dfb8 <_svfiprintf_r+0x130>
 800e02e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e032:	4604      	mov	r4, r0
 800e034:	2301      	movs	r3, #1
 800e036:	e7f0      	b.n	800e01a <_svfiprintf_r+0x192>
 800e038:	ab03      	add	r3, sp, #12
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	462a      	mov	r2, r5
 800e03e:	4b0e      	ldr	r3, [pc, #56]	@ (800e078 <_svfiprintf_r+0x1f0>)
 800e040:	a904      	add	r1, sp, #16
 800e042:	4638      	mov	r0, r7
 800e044:	f7fd fef4 	bl	800be30 <_printf_float>
 800e048:	1c42      	adds	r2, r0, #1
 800e04a:	4606      	mov	r6, r0
 800e04c:	d1d6      	bne.n	800dffc <_svfiprintf_r+0x174>
 800e04e:	89ab      	ldrh	r3, [r5, #12]
 800e050:	065b      	lsls	r3, r3, #25
 800e052:	f53f af2d 	bmi.w	800deb0 <_svfiprintf_r+0x28>
 800e056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e058:	e72c      	b.n	800deb4 <_svfiprintf_r+0x2c>
 800e05a:	ab03      	add	r3, sp, #12
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	462a      	mov	r2, r5
 800e060:	4b05      	ldr	r3, [pc, #20]	@ (800e078 <_svfiprintf_r+0x1f0>)
 800e062:	a904      	add	r1, sp, #16
 800e064:	4638      	mov	r0, r7
 800e066:	f7fe f96b 	bl	800c340 <_printf_i>
 800e06a:	e7ed      	b.n	800e048 <_svfiprintf_r+0x1c0>
 800e06c:	0800f0ca 	.word	0x0800f0ca
 800e070:	0800f0d4 	.word	0x0800f0d4
 800e074:	0800be31 	.word	0x0800be31
 800e078:	0800ddd1 	.word	0x0800ddd1
 800e07c:	0800f0d0 	.word	0x0800f0d0

0800e080 <__sflush_r>:
 800e080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e088:	0716      	lsls	r6, r2, #28
 800e08a:	4605      	mov	r5, r0
 800e08c:	460c      	mov	r4, r1
 800e08e:	d454      	bmi.n	800e13a <__sflush_r+0xba>
 800e090:	684b      	ldr	r3, [r1, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	dc02      	bgt.n	800e09c <__sflush_r+0x1c>
 800e096:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e098:	2b00      	cmp	r3, #0
 800e09a:	dd48      	ble.n	800e12e <__sflush_r+0xae>
 800e09c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e09e:	2e00      	cmp	r6, #0
 800e0a0:	d045      	beq.n	800e12e <__sflush_r+0xae>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0a8:	682f      	ldr	r7, [r5, #0]
 800e0aa:	6a21      	ldr	r1, [r4, #32]
 800e0ac:	602b      	str	r3, [r5, #0]
 800e0ae:	d030      	beq.n	800e112 <__sflush_r+0x92>
 800e0b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	0759      	lsls	r1, r3, #29
 800e0b6:	d505      	bpl.n	800e0c4 <__sflush_r+0x44>
 800e0b8:	6863      	ldr	r3, [r4, #4]
 800e0ba:	1ad2      	subs	r2, r2, r3
 800e0bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0be:	b10b      	cbz	r3, 800e0c4 <__sflush_r+0x44>
 800e0c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0c2:	1ad2      	subs	r2, r2, r3
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0c8:	6a21      	ldr	r1, [r4, #32]
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	47b0      	blx	r6
 800e0ce:	1c43      	adds	r3, r0, #1
 800e0d0:	89a3      	ldrh	r3, [r4, #12]
 800e0d2:	d106      	bne.n	800e0e2 <__sflush_r+0x62>
 800e0d4:	6829      	ldr	r1, [r5, #0]
 800e0d6:	291d      	cmp	r1, #29
 800e0d8:	d82b      	bhi.n	800e132 <__sflush_r+0xb2>
 800e0da:	4a2a      	ldr	r2, [pc, #168]	@ (800e184 <__sflush_r+0x104>)
 800e0dc:	40ca      	lsrs	r2, r1
 800e0de:	07d6      	lsls	r6, r2, #31
 800e0e0:	d527      	bpl.n	800e132 <__sflush_r+0xb2>
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	6062      	str	r2, [r4, #4]
 800e0e6:	04d9      	lsls	r1, r3, #19
 800e0e8:	6922      	ldr	r2, [r4, #16]
 800e0ea:	6022      	str	r2, [r4, #0]
 800e0ec:	d504      	bpl.n	800e0f8 <__sflush_r+0x78>
 800e0ee:	1c42      	adds	r2, r0, #1
 800e0f0:	d101      	bne.n	800e0f6 <__sflush_r+0x76>
 800e0f2:	682b      	ldr	r3, [r5, #0]
 800e0f4:	b903      	cbnz	r3, 800e0f8 <__sflush_r+0x78>
 800e0f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e0f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0fa:	602f      	str	r7, [r5, #0]
 800e0fc:	b1b9      	cbz	r1, 800e12e <__sflush_r+0xae>
 800e0fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e102:	4299      	cmp	r1, r3
 800e104:	d002      	beq.n	800e10c <__sflush_r+0x8c>
 800e106:	4628      	mov	r0, r5
 800e108:	f7ff f9e8 	bl	800d4dc <_free_r>
 800e10c:	2300      	movs	r3, #0
 800e10e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e110:	e00d      	b.n	800e12e <__sflush_r+0xae>
 800e112:	2301      	movs	r3, #1
 800e114:	4628      	mov	r0, r5
 800e116:	47b0      	blx	r6
 800e118:	4602      	mov	r2, r0
 800e11a:	1c50      	adds	r0, r2, #1
 800e11c:	d1c9      	bne.n	800e0b2 <__sflush_r+0x32>
 800e11e:	682b      	ldr	r3, [r5, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d0c6      	beq.n	800e0b2 <__sflush_r+0x32>
 800e124:	2b1d      	cmp	r3, #29
 800e126:	d001      	beq.n	800e12c <__sflush_r+0xac>
 800e128:	2b16      	cmp	r3, #22
 800e12a:	d11e      	bne.n	800e16a <__sflush_r+0xea>
 800e12c:	602f      	str	r7, [r5, #0]
 800e12e:	2000      	movs	r0, #0
 800e130:	e022      	b.n	800e178 <__sflush_r+0xf8>
 800e132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e136:	b21b      	sxth	r3, r3
 800e138:	e01b      	b.n	800e172 <__sflush_r+0xf2>
 800e13a:	690f      	ldr	r7, [r1, #16]
 800e13c:	2f00      	cmp	r7, #0
 800e13e:	d0f6      	beq.n	800e12e <__sflush_r+0xae>
 800e140:	0793      	lsls	r3, r2, #30
 800e142:	680e      	ldr	r6, [r1, #0]
 800e144:	bf08      	it	eq
 800e146:	694b      	ldreq	r3, [r1, #20]
 800e148:	600f      	str	r7, [r1, #0]
 800e14a:	bf18      	it	ne
 800e14c:	2300      	movne	r3, #0
 800e14e:	eba6 0807 	sub.w	r8, r6, r7
 800e152:	608b      	str	r3, [r1, #8]
 800e154:	f1b8 0f00 	cmp.w	r8, #0
 800e158:	dde9      	ble.n	800e12e <__sflush_r+0xae>
 800e15a:	6a21      	ldr	r1, [r4, #32]
 800e15c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e15e:	4643      	mov	r3, r8
 800e160:	463a      	mov	r2, r7
 800e162:	4628      	mov	r0, r5
 800e164:	47b0      	blx	r6
 800e166:	2800      	cmp	r0, #0
 800e168:	dc08      	bgt.n	800e17c <__sflush_r+0xfc>
 800e16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e16e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e172:	81a3      	strh	r3, [r4, #12]
 800e174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e17c:	4407      	add	r7, r0
 800e17e:	eba8 0800 	sub.w	r8, r8, r0
 800e182:	e7e7      	b.n	800e154 <__sflush_r+0xd4>
 800e184:	20400001 	.word	0x20400001

0800e188 <_fflush_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	690b      	ldr	r3, [r1, #16]
 800e18c:	4605      	mov	r5, r0
 800e18e:	460c      	mov	r4, r1
 800e190:	b913      	cbnz	r3, 800e198 <_fflush_r+0x10>
 800e192:	2500      	movs	r5, #0
 800e194:	4628      	mov	r0, r5
 800e196:	bd38      	pop	{r3, r4, r5, pc}
 800e198:	b118      	cbz	r0, 800e1a2 <_fflush_r+0x1a>
 800e19a:	6a03      	ldr	r3, [r0, #32]
 800e19c:	b90b      	cbnz	r3, 800e1a2 <_fflush_r+0x1a>
 800e19e:	f7fe fa79 	bl	800c694 <__sinit>
 800e1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d0f3      	beq.n	800e192 <_fflush_r+0xa>
 800e1aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1ac:	07d0      	lsls	r0, r2, #31
 800e1ae:	d404      	bmi.n	800e1ba <_fflush_r+0x32>
 800e1b0:	0599      	lsls	r1, r3, #22
 800e1b2:	d402      	bmi.n	800e1ba <_fflush_r+0x32>
 800e1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1b6:	f7fe fb9a 	bl	800c8ee <__retarget_lock_acquire_recursive>
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	4621      	mov	r1, r4
 800e1be:	f7ff ff5f 	bl	800e080 <__sflush_r>
 800e1c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1c4:	07da      	lsls	r2, r3, #31
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	d4e4      	bmi.n	800e194 <_fflush_r+0xc>
 800e1ca:	89a3      	ldrh	r3, [r4, #12]
 800e1cc:	059b      	lsls	r3, r3, #22
 800e1ce:	d4e1      	bmi.n	800e194 <_fflush_r+0xc>
 800e1d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1d2:	f7fe fb8d 	bl	800c8f0 <__retarget_lock_release_recursive>
 800e1d6:	e7dd      	b.n	800e194 <_fflush_r+0xc>

0800e1d8 <memmove>:
 800e1d8:	4288      	cmp	r0, r1
 800e1da:	b510      	push	{r4, lr}
 800e1dc:	eb01 0402 	add.w	r4, r1, r2
 800e1e0:	d902      	bls.n	800e1e8 <memmove+0x10>
 800e1e2:	4284      	cmp	r4, r0
 800e1e4:	4623      	mov	r3, r4
 800e1e6:	d807      	bhi.n	800e1f8 <memmove+0x20>
 800e1e8:	1e43      	subs	r3, r0, #1
 800e1ea:	42a1      	cmp	r1, r4
 800e1ec:	d008      	beq.n	800e200 <memmove+0x28>
 800e1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1f6:	e7f8      	b.n	800e1ea <memmove+0x12>
 800e1f8:	4402      	add	r2, r0
 800e1fa:	4601      	mov	r1, r0
 800e1fc:	428a      	cmp	r2, r1
 800e1fe:	d100      	bne.n	800e202 <memmove+0x2a>
 800e200:	bd10      	pop	{r4, pc}
 800e202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e20a:	e7f7      	b.n	800e1fc <memmove+0x24>

0800e20c <_sbrk_r>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	4d06      	ldr	r5, [pc, #24]	@ (800e228 <_sbrk_r+0x1c>)
 800e210:	2300      	movs	r3, #0
 800e212:	4604      	mov	r4, r0
 800e214:	4608      	mov	r0, r1
 800e216:	602b      	str	r3, [r5, #0]
 800e218:	f7f4 fd88 	bl	8002d2c <_sbrk>
 800e21c:	1c43      	adds	r3, r0, #1
 800e21e:	d102      	bne.n	800e226 <_sbrk_r+0x1a>
 800e220:	682b      	ldr	r3, [r5, #0]
 800e222:	b103      	cbz	r3, 800e226 <_sbrk_r+0x1a>
 800e224:	6023      	str	r3, [r4, #0]
 800e226:	bd38      	pop	{r3, r4, r5, pc}
 800e228:	240006b4 	.word	0x240006b4

0800e22c <__assert_func>:
 800e22c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e22e:	4614      	mov	r4, r2
 800e230:	461a      	mov	r2, r3
 800e232:	4b09      	ldr	r3, [pc, #36]	@ (800e258 <__assert_func+0x2c>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4605      	mov	r5, r0
 800e238:	68d8      	ldr	r0, [r3, #12]
 800e23a:	b14c      	cbz	r4, 800e250 <__assert_func+0x24>
 800e23c:	4b07      	ldr	r3, [pc, #28]	@ (800e25c <__assert_func+0x30>)
 800e23e:	9100      	str	r1, [sp, #0]
 800e240:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e244:	4906      	ldr	r1, [pc, #24]	@ (800e260 <__assert_func+0x34>)
 800e246:	462b      	mov	r3, r5
 800e248:	f000 f870 	bl	800e32c <fiprintf>
 800e24c:	f000 f880 	bl	800e350 <abort>
 800e250:	4b04      	ldr	r3, [pc, #16]	@ (800e264 <__assert_func+0x38>)
 800e252:	461c      	mov	r4, r3
 800e254:	e7f3      	b.n	800e23e <__assert_func+0x12>
 800e256:	bf00      	nop
 800e258:	24000024 	.word	0x24000024
 800e25c:	0800f0e5 	.word	0x0800f0e5
 800e260:	0800f0f2 	.word	0x0800f0f2
 800e264:	0800f120 	.word	0x0800f120

0800e268 <_calloc_r>:
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	fba1 5402 	umull	r5, r4, r1, r2
 800e26e:	b934      	cbnz	r4, 800e27e <_calloc_r+0x16>
 800e270:	4629      	mov	r1, r5
 800e272:	f7ff f9a7 	bl	800d5c4 <_malloc_r>
 800e276:	4606      	mov	r6, r0
 800e278:	b928      	cbnz	r0, 800e286 <_calloc_r+0x1e>
 800e27a:	4630      	mov	r0, r6
 800e27c:	bd70      	pop	{r4, r5, r6, pc}
 800e27e:	220c      	movs	r2, #12
 800e280:	6002      	str	r2, [r0, #0]
 800e282:	2600      	movs	r6, #0
 800e284:	e7f9      	b.n	800e27a <_calloc_r+0x12>
 800e286:	462a      	mov	r2, r5
 800e288:	4621      	mov	r1, r4
 800e28a:	f7fe fab2 	bl	800c7f2 <memset>
 800e28e:	e7f4      	b.n	800e27a <_calloc_r+0x12>

0800e290 <__ascii_mbtowc>:
 800e290:	b082      	sub	sp, #8
 800e292:	b901      	cbnz	r1, 800e296 <__ascii_mbtowc+0x6>
 800e294:	a901      	add	r1, sp, #4
 800e296:	b142      	cbz	r2, 800e2aa <__ascii_mbtowc+0x1a>
 800e298:	b14b      	cbz	r3, 800e2ae <__ascii_mbtowc+0x1e>
 800e29a:	7813      	ldrb	r3, [r2, #0]
 800e29c:	600b      	str	r3, [r1, #0]
 800e29e:	7812      	ldrb	r2, [r2, #0]
 800e2a0:	1e10      	subs	r0, r2, #0
 800e2a2:	bf18      	it	ne
 800e2a4:	2001      	movne	r0, #1
 800e2a6:	b002      	add	sp, #8
 800e2a8:	4770      	bx	lr
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	e7fb      	b.n	800e2a6 <__ascii_mbtowc+0x16>
 800e2ae:	f06f 0001 	mvn.w	r0, #1
 800e2b2:	e7f8      	b.n	800e2a6 <__ascii_mbtowc+0x16>

0800e2b4 <_realloc_r>:
 800e2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b8:	4607      	mov	r7, r0
 800e2ba:	4614      	mov	r4, r2
 800e2bc:	460d      	mov	r5, r1
 800e2be:	b921      	cbnz	r1, 800e2ca <_realloc_r+0x16>
 800e2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c4:	4611      	mov	r1, r2
 800e2c6:	f7ff b97d 	b.w	800d5c4 <_malloc_r>
 800e2ca:	b92a      	cbnz	r2, 800e2d8 <_realloc_r+0x24>
 800e2cc:	f7ff f906 	bl	800d4dc <_free_r>
 800e2d0:	4625      	mov	r5, r4
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d8:	f000 f841 	bl	800e35e <_malloc_usable_size_r>
 800e2dc:	4284      	cmp	r4, r0
 800e2de:	4606      	mov	r6, r0
 800e2e0:	d802      	bhi.n	800e2e8 <_realloc_r+0x34>
 800e2e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2e6:	d8f4      	bhi.n	800e2d2 <_realloc_r+0x1e>
 800e2e8:	4621      	mov	r1, r4
 800e2ea:	4638      	mov	r0, r7
 800e2ec:	f7ff f96a 	bl	800d5c4 <_malloc_r>
 800e2f0:	4680      	mov	r8, r0
 800e2f2:	b908      	cbnz	r0, 800e2f8 <_realloc_r+0x44>
 800e2f4:	4645      	mov	r5, r8
 800e2f6:	e7ec      	b.n	800e2d2 <_realloc_r+0x1e>
 800e2f8:	42b4      	cmp	r4, r6
 800e2fa:	4622      	mov	r2, r4
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	bf28      	it	cs
 800e300:	4632      	movcs	r2, r6
 800e302:	f7fe faf6 	bl	800c8f2 <memcpy>
 800e306:	4629      	mov	r1, r5
 800e308:	4638      	mov	r0, r7
 800e30a:	f7ff f8e7 	bl	800d4dc <_free_r>
 800e30e:	e7f1      	b.n	800e2f4 <_realloc_r+0x40>

0800e310 <__ascii_wctomb>:
 800e310:	4603      	mov	r3, r0
 800e312:	4608      	mov	r0, r1
 800e314:	b141      	cbz	r1, 800e328 <__ascii_wctomb+0x18>
 800e316:	2aff      	cmp	r2, #255	@ 0xff
 800e318:	d904      	bls.n	800e324 <__ascii_wctomb+0x14>
 800e31a:	228a      	movs	r2, #138	@ 0x8a
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e322:	4770      	bx	lr
 800e324:	700a      	strb	r2, [r1, #0]
 800e326:	2001      	movs	r0, #1
 800e328:	4770      	bx	lr
	...

0800e32c <fiprintf>:
 800e32c:	b40e      	push	{r1, r2, r3}
 800e32e:	b503      	push	{r0, r1, lr}
 800e330:	4601      	mov	r1, r0
 800e332:	ab03      	add	r3, sp, #12
 800e334:	4805      	ldr	r0, [pc, #20]	@ (800e34c <fiprintf+0x20>)
 800e336:	f853 2b04 	ldr.w	r2, [r3], #4
 800e33a:	6800      	ldr	r0, [r0, #0]
 800e33c:	9301      	str	r3, [sp, #4]
 800e33e:	f000 f83f 	bl	800e3c0 <_vfiprintf_r>
 800e342:	b002      	add	sp, #8
 800e344:	f85d eb04 	ldr.w	lr, [sp], #4
 800e348:	b003      	add	sp, #12
 800e34a:	4770      	bx	lr
 800e34c:	24000024 	.word	0x24000024

0800e350 <abort>:
 800e350:	b508      	push	{r3, lr}
 800e352:	2006      	movs	r0, #6
 800e354:	f000 fa08 	bl	800e768 <raise>
 800e358:	2001      	movs	r0, #1
 800e35a:	f7f4 fc6f 	bl	8002c3c <_exit>

0800e35e <_malloc_usable_size_r>:
 800e35e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e362:	1f18      	subs	r0, r3, #4
 800e364:	2b00      	cmp	r3, #0
 800e366:	bfbc      	itt	lt
 800e368:	580b      	ldrlt	r3, [r1, r0]
 800e36a:	18c0      	addlt	r0, r0, r3
 800e36c:	4770      	bx	lr

0800e36e <__sfputc_r>:
 800e36e:	6893      	ldr	r3, [r2, #8]
 800e370:	3b01      	subs	r3, #1
 800e372:	2b00      	cmp	r3, #0
 800e374:	b410      	push	{r4}
 800e376:	6093      	str	r3, [r2, #8]
 800e378:	da08      	bge.n	800e38c <__sfputc_r+0x1e>
 800e37a:	6994      	ldr	r4, [r2, #24]
 800e37c:	42a3      	cmp	r3, r4
 800e37e:	db01      	blt.n	800e384 <__sfputc_r+0x16>
 800e380:	290a      	cmp	r1, #10
 800e382:	d103      	bne.n	800e38c <__sfputc_r+0x1e>
 800e384:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e388:	f000 b932 	b.w	800e5f0 <__swbuf_r>
 800e38c:	6813      	ldr	r3, [r2, #0]
 800e38e:	1c58      	adds	r0, r3, #1
 800e390:	6010      	str	r0, [r2, #0]
 800e392:	7019      	strb	r1, [r3, #0]
 800e394:	4608      	mov	r0, r1
 800e396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <__sfputs_r>:
 800e39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39e:	4606      	mov	r6, r0
 800e3a0:	460f      	mov	r7, r1
 800e3a2:	4614      	mov	r4, r2
 800e3a4:	18d5      	adds	r5, r2, r3
 800e3a6:	42ac      	cmp	r4, r5
 800e3a8:	d101      	bne.n	800e3ae <__sfputs_r+0x12>
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	e007      	b.n	800e3be <__sfputs_r+0x22>
 800e3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3b2:	463a      	mov	r2, r7
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	f7ff ffda 	bl	800e36e <__sfputc_r>
 800e3ba:	1c43      	adds	r3, r0, #1
 800e3bc:	d1f3      	bne.n	800e3a6 <__sfputs_r+0xa>
 800e3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3c0 <_vfiprintf_r>:
 800e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c4:	460d      	mov	r5, r1
 800e3c6:	b09d      	sub	sp, #116	@ 0x74
 800e3c8:	4614      	mov	r4, r2
 800e3ca:	4698      	mov	r8, r3
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	b118      	cbz	r0, 800e3d8 <_vfiprintf_r+0x18>
 800e3d0:	6a03      	ldr	r3, [r0, #32]
 800e3d2:	b90b      	cbnz	r3, 800e3d8 <_vfiprintf_r+0x18>
 800e3d4:	f7fe f95e 	bl	800c694 <__sinit>
 800e3d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3da:	07d9      	lsls	r1, r3, #31
 800e3dc:	d405      	bmi.n	800e3ea <_vfiprintf_r+0x2a>
 800e3de:	89ab      	ldrh	r3, [r5, #12]
 800e3e0:	059a      	lsls	r2, r3, #22
 800e3e2:	d402      	bmi.n	800e3ea <_vfiprintf_r+0x2a>
 800e3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3e6:	f7fe fa82 	bl	800c8ee <__retarget_lock_acquire_recursive>
 800e3ea:	89ab      	ldrh	r3, [r5, #12]
 800e3ec:	071b      	lsls	r3, r3, #28
 800e3ee:	d501      	bpl.n	800e3f4 <_vfiprintf_r+0x34>
 800e3f0:	692b      	ldr	r3, [r5, #16]
 800e3f2:	b99b      	cbnz	r3, 800e41c <_vfiprintf_r+0x5c>
 800e3f4:	4629      	mov	r1, r5
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	f000 f938 	bl	800e66c <__swsetup_r>
 800e3fc:	b170      	cbz	r0, 800e41c <_vfiprintf_r+0x5c>
 800e3fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e400:	07dc      	lsls	r4, r3, #31
 800e402:	d504      	bpl.n	800e40e <_vfiprintf_r+0x4e>
 800e404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e408:	b01d      	add	sp, #116	@ 0x74
 800e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40e:	89ab      	ldrh	r3, [r5, #12]
 800e410:	0598      	lsls	r0, r3, #22
 800e412:	d4f7      	bmi.n	800e404 <_vfiprintf_r+0x44>
 800e414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e416:	f7fe fa6b 	bl	800c8f0 <__retarget_lock_release_recursive>
 800e41a:	e7f3      	b.n	800e404 <_vfiprintf_r+0x44>
 800e41c:	2300      	movs	r3, #0
 800e41e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e420:	2320      	movs	r3, #32
 800e422:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e426:	f8cd 800c 	str.w	r8, [sp, #12]
 800e42a:	2330      	movs	r3, #48	@ 0x30
 800e42c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5dc <_vfiprintf_r+0x21c>
 800e430:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e434:	f04f 0901 	mov.w	r9, #1
 800e438:	4623      	mov	r3, r4
 800e43a:	469a      	mov	sl, r3
 800e43c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e440:	b10a      	cbz	r2, 800e446 <_vfiprintf_r+0x86>
 800e442:	2a25      	cmp	r2, #37	@ 0x25
 800e444:	d1f9      	bne.n	800e43a <_vfiprintf_r+0x7a>
 800e446:	ebba 0b04 	subs.w	fp, sl, r4
 800e44a:	d00b      	beq.n	800e464 <_vfiprintf_r+0xa4>
 800e44c:	465b      	mov	r3, fp
 800e44e:	4622      	mov	r2, r4
 800e450:	4629      	mov	r1, r5
 800e452:	4630      	mov	r0, r6
 800e454:	f7ff ffa2 	bl	800e39c <__sfputs_r>
 800e458:	3001      	adds	r0, #1
 800e45a:	f000 80a7 	beq.w	800e5ac <_vfiprintf_r+0x1ec>
 800e45e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e460:	445a      	add	r2, fp
 800e462:	9209      	str	r2, [sp, #36]	@ 0x24
 800e464:	f89a 3000 	ldrb.w	r3, [sl]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 809f 	beq.w	800e5ac <_vfiprintf_r+0x1ec>
 800e46e:	2300      	movs	r3, #0
 800e470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e478:	f10a 0a01 	add.w	sl, sl, #1
 800e47c:	9304      	str	r3, [sp, #16]
 800e47e:	9307      	str	r3, [sp, #28]
 800e480:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e484:	931a      	str	r3, [sp, #104]	@ 0x68
 800e486:	4654      	mov	r4, sl
 800e488:	2205      	movs	r2, #5
 800e48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e48e:	4853      	ldr	r0, [pc, #332]	@ (800e5dc <_vfiprintf_r+0x21c>)
 800e490:	f7f1 ff3e 	bl	8000310 <memchr>
 800e494:	9a04      	ldr	r2, [sp, #16]
 800e496:	b9d8      	cbnz	r0, 800e4d0 <_vfiprintf_r+0x110>
 800e498:	06d1      	lsls	r1, r2, #27
 800e49a:	bf44      	itt	mi
 800e49c:	2320      	movmi	r3, #32
 800e49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4a2:	0713      	lsls	r3, r2, #28
 800e4a4:	bf44      	itt	mi
 800e4a6:	232b      	movmi	r3, #43	@ 0x2b
 800e4a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e4b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4b2:	d015      	beq.n	800e4e0 <_vfiprintf_r+0x120>
 800e4b4:	9a07      	ldr	r2, [sp, #28]
 800e4b6:	4654      	mov	r4, sl
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	f04f 0c0a 	mov.w	ip, #10
 800e4be:	4621      	mov	r1, r4
 800e4c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4c4:	3b30      	subs	r3, #48	@ 0x30
 800e4c6:	2b09      	cmp	r3, #9
 800e4c8:	d94b      	bls.n	800e562 <_vfiprintf_r+0x1a2>
 800e4ca:	b1b0      	cbz	r0, 800e4fa <_vfiprintf_r+0x13a>
 800e4cc:	9207      	str	r2, [sp, #28]
 800e4ce:	e014      	b.n	800e4fa <_vfiprintf_r+0x13a>
 800e4d0:	eba0 0308 	sub.w	r3, r0, r8
 800e4d4:	fa09 f303 	lsl.w	r3, r9, r3
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	9304      	str	r3, [sp, #16]
 800e4dc:	46a2      	mov	sl, r4
 800e4de:	e7d2      	b.n	800e486 <_vfiprintf_r+0xc6>
 800e4e0:	9b03      	ldr	r3, [sp, #12]
 800e4e2:	1d19      	adds	r1, r3, #4
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	9103      	str	r1, [sp, #12]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	bfbb      	ittet	lt
 800e4ec:	425b      	neglt	r3, r3
 800e4ee:	f042 0202 	orrlt.w	r2, r2, #2
 800e4f2:	9307      	strge	r3, [sp, #28]
 800e4f4:	9307      	strlt	r3, [sp, #28]
 800e4f6:	bfb8      	it	lt
 800e4f8:	9204      	strlt	r2, [sp, #16]
 800e4fa:	7823      	ldrb	r3, [r4, #0]
 800e4fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4fe:	d10a      	bne.n	800e516 <_vfiprintf_r+0x156>
 800e500:	7863      	ldrb	r3, [r4, #1]
 800e502:	2b2a      	cmp	r3, #42	@ 0x2a
 800e504:	d132      	bne.n	800e56c <_vfiprintf_r+0x1ac>
 800e506:	9b03      	ldr	r3, [sp, #12]
 800e508:	1d1a      	adds	r2, r3, #4
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	9203      	str	r2, [sp, #12]
 800e50e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e512:	3402      	adds	r4, #2
 800e514:	9305      	str	r3, [sp, #20]
 800e516:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e5ec <_vfiprintf_r+0x22c>
 800e51a:	7821      	ldrb	r1, [r4, #0]
 800e51c:	2203      	movs	r2, #3
 800e51e:	4650      	mov	r0, sl
 800e520:	f7f1 fef6 	bl	8000310 <memchr>
 800e524:	b138      	cbz	r0, 800e536 <_vfiprintf_r+0x176>
 800e526:	9b04      	ldr	r3, [sp, #16]
 800e528:	eba0 000a 	sub.w	r0, r0, sl
 800e52c:	2240      	movs	r2, #64	@ 0x40
 800e52e:	4082      	lsls	r2, r0
 800e530:	4313      	orrs	r3, r2
 800e532:	3401      	adds	r4, #1
 800e534:	9304      	str	r3, [sp, #16]
 800e536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e53a:	4829      	ldr	r0, [pc, #164]	@ (800e5e0 <_vfiprintf_r+0x220>)
 800e53c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e540:	2206      	movs	r2, #6
 800e542:	f7f1 fee5 	bl	8000310 <memchr>
 800e546:	2800      	cmp	r0, #0
 800e548:	d03f      	beq.n	800e5ca <_vfiprintf_r+0x20a>
 800e54a:	4b26      	ldr	r3, [pc, #152]	@ (800e5e4 <_vfiprintf_r+0x224>)
 800e54c:	bb1b      	cbnz	r3, 800e596 <_vfiprintf_r+0x1d6>
 800e54e:	9b03      	ldr	r3, [sp, #12]
 800e550:	3307      	adds	r3, #7
 800e552:	f023 0307 	bic.w	r3, r3, #7
 800e556:	3308      	adds	r3, #8
 800e558:	9303      	str	r3, [sp, #12]
 800e55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e55c:	443b      	add	r3, r7
 800e55e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e560:	e76a      	b.n	800e438 <_vfiprintf_r+0x78>
 800e562:	fb0c 3202 	mla	r2, ip, r2, r3
 800e566:	460c      	mov	r4, r1
 800e568:	2001      	movs	r0, #1
 800e56a:	e7a8      	b.n	800e4be <_vfiprintf_r+0xfe>
 800e56c:	2300      	movs	r3, #0
 800e56e:	3401      	adds	r4, #1
 800e570:	9305      	str	r3, [sp, #20]
 800e572:	4619      	mov	r1, r3
 800e574:	f04f 0c0a 	mov.w	ip, #10
 800e578:	4620      	mov	r0, r4
 800e57a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e57e:	3a30      	subs	r2, #48	@ 0x30
 800e580:	2a09      	cmp	r2, #9
 800e582:	d903      	bls.n	800e58c <_vfiprintf_r+0x1cc>
 800e584:	2b00      	cmp	r3, #0
 800e586:	d0c6      	beq.n	800e516 <_vfiprintf_r+0x156>
 800e588:	9105      	str	r1, [sp, #20]
 800e58a:	e7c4      	b.n	800e516 <_vfiprintf_r+0x156>
 800e58c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e590:	4604      	mov	r4, r0
 800e592:	2301      	movs	r3, #1
 800e594:	e7f0      	b.n	800e578 <_vfiprintf_r+0x1b8>
 800e596:	ab03      	add	r3, sp, #12
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	462a      	mov	r2, r5
 800e59c:	4b12      	ldr	r3, [pc, #72]	@ (800e5e8 <_vfiprintf_r+0x228>)
 800e59e:	a904      	add	r1, sp, #16
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f7fd fc45 	bl	800be30 <_printf_float>
 800e5a6:	4607      	mov	r7, r0
 800e5a8:	1c78      	adds	r0, r7, #1
 800e5aa:	d1d6      	bne.n	800e55a <_vfiprintf_r+0x19a>
 800e5ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ae:	07d9      	lsls	r1, r3, #31
 800e5b0:	d405      	bmi.n	800e5be <_vfiprintf_r+0x1fe>
 800e5b2:	89ab      	ldrh	r3, [r5, #12]
 800e5b4:	059a      	lsls	r2, r3, #22
 800e5b6:	d402      	bmi.n	800e5be <_vfiprintf_r+0x1fe>
 800e5b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5ba:	f7fe f999 	bl	800c8f0 <__retarget_lock_release_recursive>
 800e5be:	89ab      	ldrh	r3, [r5, #12]
 800e5c0:	065b      	lsls	r3, r3, #25
 800e5c2:	f53f af1f 	bmi.w	800e404 <_vfiprintf_r+0x44>
 800e5c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5c8:	e71e      	b.n	800e408 <_vfiprintf_r+0x48>
 800e5ca:	ab03      	add	r3, sp, #12
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	462a      	mov	r2, r5
 800e5d0:	4b05      	ldr	r3, [pc, #20]	@ (800e5e8 <_vfiprintf_r+0x228>)
 800e5d2:	a904      	add	r1, sp, #16
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f7fd feb3 	bl	800c340 <_printf_i>
 800e5da:	e7e4      	b.n	800e5a6 <_vfiprintf_r+0x1e6>
 800e5dc:	0800f0ca 	.word	0x0800f0ca
 800e5e0:	0800f0d4 	.word	0x0800f0d4
 800e5e4:	0800be31 	.word	0x0800be31
 800e5e8:	0800e39d 	.word	0x0800e39d
 800e5ec:	0800f0d0 	.word	0x0800f0d0

0800e5f0 <__swbuf_r>:
 800e5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f2:	460e      	mov	r6, r1
 800e5f4:	4614      	mov	r4, r2
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	b118      	cbz	r0, 800e602 <__swbuf_r+0x12>
 800e5fa:	6a03      	ldr	r3, [r0, #32]
 800e5fc:	b90b      	cbnz	r3, 800e602 <__swbuf_r+0x12>
 800e5fe:	f7fe f849 	bl	800c694 <__sinit>
 800e602:	69a3      	ldr	r3, [r4, #24]
 800e604:	60a3      	str	r3, [r4, #8]
 800e606:	89a3      	ldrh	r3, [r4, #12]
 800e608:	071a      	lsls	r2, r3, #28
 800e60a:	d501      	bpl.n	800e610 <__swbuf_r+0x20>
 800e60c:	6923      	ldr	r3, [r4, #16]
 800e60e:	b943      	cbnz	r3, 800e622 <__swbuf_r+0x32>
 800e610:	4621      	mov	r1, r4
 800e612:	4628      	mov	r0, r5
 800e614:	f000 f82a 	bl	800e66c <__swsetup_r>
 800e618:	b118      	cbz	r0, 800e622 <__swbuf_r+0x32>
 800e61a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e61e:	4638      	mov	r0, r7
 800e620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e622:	6823      	ldr	r3, [r4, #0]
 800e624:	6922      	ldr	r2, [r4, #16]
 800e626:	1a98      	subs	r0, r3, r2
 800e628:	6963      	ldr	r3, [r4, #20]
 800e62a:	b2f6      	uxtb	r6, r6
 800e62c:	4283      	cmp	r3, r0
 800e62e:	4637      	mov	r7, r6
 800e630:	dc05      	bgt.n	800e63e <__swbuf_r+0x4e>
 800e632:	4621      	mov	r1, r4
 800e634:	4628      	mov	r0, r5
 800e636:	f7ff fda7 	bl	800e188 <_fflush_r>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d1ed      	bne.n	800e61a <__swbuf_r+0x2a>
 800e63e:	68a3      	ldr	r3, [r4, #8]
 800e640:	3b01      	subs	r3, #1
 800e642:	60a3      	str	r3, [r4, #8]
 800e644:	6823      	ldr	r3, [r4, #0]
 800e646:	1c5a      	adds	r2, r3, #1
 800e648:	6022      	str	r2, [r4, #0]
 800e64a:	701e      	strb	r6, [r3, #0]
 800e64c:	6962      	ldr	r2, [r4, #20]
 800e64e:	1c43      	adds	r3, r0, #1
 800e650:	429a      	cmp	r2, r3
 800e652:	d004      	beq.n	800e65e <__swbuf_r+0x6e>
 800e654:	89a3      	ldrh	r3, [r4, #12]
 800e656:	07db      	lsls	r3, r3, #31
 800e658:	d5e1      	bpl.n	800e61e <__swbuf_r+0x2e>
 800e65a:	2e0a      	cmp	r6, #10
 800e65c:	d1df      	bne.n	800e61e <__swbuf_r+0x2e>
 800e65e:	4621      	mov	r1, r4
 800e660:	4628      	mov	r0, r5
 800e662:	f7ff fd91 	bl	800e188 <_fflush_r>
 800e666:	2800      	cmp	r0, #0
 800e668:	d0d9      	beq.n	800e61e <__swbuf_r+0x2e>
 800e66a:	e7d6      	b.n	800e61a <__swbuf_r+0x2a>

0800e66c <__swsetup_r>:
 800e66c:	b538      	push	{r3, r4, r5, lr}
 800e66e:	4b29      	ldr	r3, [pc, #164]	@ (800e714 <__swsetup_r+0xa8>)
 800e670:	4605      	mov	r5, r0
 800e672:	6818      	ldr	r0, [r3, #0]
 800e674:	460c      	mov	r4, r1
 800e676:	b118      	cbz	r0, 800e680 <__swsetup_r+0x14>
 800e678:	6a03      	ldr	r3, [r0, #32]
 800e67a:	b90b      	cbnz	r3, 800e680 <__swsetup_r+0x14>
 800e67c:	f7fe f80a 	bl	800c694 <__sinit>
 800e680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e684:	0719      	lsls	r1, r3, #28
 800e686:	d422      	bmi.n	800e6ce <__swsetup_r+0x62>
 800e688:	06da      	lsls	r2, r3, #27
 800e68a:	d407      	bmi.n	800e69c <__swsetup_r+0x30>
 800e68c:	2209      	movs	r2, #9
 800e68e:	602a      	str	r2, [r5, #0]
 800e690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e694:	81a3      	strh	r3, [r4, #12]
 800e696:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e69a:	e033      	b.n	800e704 <__swsetup_r+0x98>
 800e69c:	0758      	lsls	r0, r3, #29
 800e69e:	d512      	bpl.n	800e6c6 <__swsetup_r+0x5a>
 800e6a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6a2:	b141      	cbz	r1, 800e6b6 <__swsetup_r+0x4a>
 800e6a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6a8:	4299      	cmp	r1, r3
 800e6aa:	d002      	beq.n	800e6b2 <__swsetup_r+0x46>
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	f7fe ff15 	bl	800d4dc <_free_r>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6b6:	89a3      	ldrh	r3, [r4, #12]
 800e6b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6bc:	81a3      	strh	r3, [r4, #12]
 800e6be:	2300      	movs	r3, #0
 800e6c0:	6063      	str	r3, [r4, #4]
 800e6c2:	6923      	ldr	r3, [r4, #16]
 800e6c4:	6023      	str	r3, [r4, #0]
 800e6c6:	89a3      	ldrh	r3, [r4, #12]
 800e6c8:	f043 0308 	orr.w	r3, r3, #8
 800e6cc:	81a3      	strh	r3, [r4, #12]
 800e6ce:	6923      	ldr	r3, [r4, #16]
 800e6d0:	b94b      	cbnz	r3, 800e6e6 <__swsetup_r+0x7a>
 800e6d2:	89a3      	ldrh	r3, [r4, #12]
 800e6d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6dc:	d003      	beq.n	800e6e6 <__swsetup_r+0x7a>
 800e6de:	4621      	mov	r1, r4
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	f000 f883 	bl	800e7ec <__smakebuf_r>
 800e6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ea:	f013 0201 	ands.w	r2, r3, #1
 800e6ee:	d00a      	beq.n	800e706 <__swsetup_r+0x9a>
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	60a2      	str	r2, [r4, #8]
 800e6f4:	6962      	ldr	r2, [r4, #20]
 800e6f6:	4252      	negs	r2, r2
 800e6f8:	61a2      	str	r2, [r4, #24]
 800e6fa:	6922      	ldr	r2, [r4, #16]
 800e6fc:	b942      	cbnz	r2, 800e710 <__swsetup_r+0xa4>
 800e6fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e702:	d1c5      	bne.n	800e690 <__swsetup_r+0x24>
 800e704:	bd38      	pop	{r3, r4, r5, pc}
 800e706:	0799      	lsls	r1, r3, #30
 800e708:	bf58      	it	pl
 800e70a:	6962      	ldrpl	r2, [r4, #20]
 800e70c:	60a2      	str	r2, [r4, #8]
 800e70e:	e7f4      	b.n	800e6fa <__swsetup_r+0x8e>
 800e710:	2000      	movs	r0, #0
 800e712:	e7f7      	b.n	800e704 <__swsetup_r+0x98>
 800e714:	24000024 	.word	0x24000024

0800e718 <_raise_r>:
 800e718:	291f      	cmp	r1, #31
 800e71a:	b538      	push	{r3, r4, r5, lr}
 800e71c:	4605      	mov	r5, r0
 800e71e:	460c      	mov	r4, r1
 800e720:	d904      	bls.n	800e72c <_raise_r+0x14>
 800e722:	2316      	movs	r3, #22
 800e724:	6003      	str	r3, [r0, #0]
 800e726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e72a:	bd38      	pop	{r3, r4, r5, pc}
 800e72c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e72e:	b112      	cbz	r2, 800e736 <_raise_r+0x1e>
 800e730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e734:	b94b      	cbnz	r3, 800e74a <_raise_r+0x32>
 800e736:	4628      	mov	r0, r5
 800e738:	f000 f830 	bl	800e79c <_getpid_r>
 800e73c:	4622      	mov	r2, r4
 800e73e:	4601      	mov	r1, r0
 800e740:	4628      	mov	r0, r5
 800e742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e746:	f000 b817 	b.w	800e778 <_kill_r>
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d00a      	beq.n	800e764 <_raise_r+0x4c>
 800e74e:	1c59      	adds	r1, r3, #1
 800e750:	d103      	bne.n	800e75a <_raise_r+0x42>
 800e752:	2316      	movs	r3, #22
 800e754:	6003      	str	r3, [r0, #0]
 800e756:	2001      	movs	r0, #1
 800e758:	e7e7      	b.n	800e72a <_raise_r+0x12>
 800e75a:	2100      	movs	r1, #0
 800e75c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e760:	4620      	mov	r0, r4
 800e762:	4798      	blx	r3
 800e764:	2000      	movs	r0, #0
 800e766:	e7e0      	b.n	800e72a <_raise_r+0x12>

0800e768 <raise>:
 800e768:	4b02      	ldr	r3, [pc, #8]	@ (800e774 <raise+0xc>)
 800e76a:	4601      	mov	r1, r0
 800e76c:	6818      	ldr	r0, [r3, #0]
 800e76e:	f7ff bfd3 	b.w	800e718 <_raise_r>
 800e772:	bf00      	nop
 800e774:	24000024 	.word	0x24000024

0800e778 <_kill_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	4d07      	ldr	r5, [pc, #28]	@ (800e798 <_kill_r+0x20>)
 800e77c:	2300      	movs	r3, #0
 800e77e:	4604      	mov	r4, r0
 800e780:	4608      	mov	r0, r1
 800e782:	4611      	mov	r1, r2
 800e784:	602b      	str	r3, [r5, #0]
 800e786:	f7f4 fa49 	bl	8002c1c <_kill>
 800e78a:	1c43      	adds	r3, r0, #1
 800e78c:	d102      	bne.n	800e794 <_kill_r+0x1c>
 800e78e:	682b      	ldr	r3, [r5, #0]
 800e790:	b103      	cbz	r3, 800e794 <_kill_r+0x1c>
 800e792:	6023      	str	r3, [r4, #0]
 800e794:	bd38      	pop	{r3, r4, r5, pc}
 800e796:	bf00      	nop
 800e798:	240006b4 	.word	0x240006b4

0800e79c <_getpid_r>:
 800e79c:	f7f4 ba36 	b.w	8002c0c <_getpid>

0800e7a0 <__swhatbuf_r>:
 800e7a0:	b570      	push	{r4, r5, r6, lr}
 800e7a2:	460c      	mov	r4, r1
 800e7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a8:	2900      	cmp	r1, #0
 800e7aa:	b096      	sub	sp, #88	@ 0x58
 800e7ac:	4615      	mov	r5, r2
 800e7ae:	461e      	mov	r6, r3
 800e7b0:	da0d      	bge.n	800e7ce <__swhatbuf_r+0x2e>
 800e7b2:	89a3      	ldrh	r3, [r4, #12]
 800e7b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7b8:	f04f 0100 	mov.w	r1, #0
 800e7bc:	bf14      	ite	ne
 800e7be:	2340      	movne	r3, #64	@ 0x40
 800e7c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	6031      	str	r1, [r6, #0]
 800e7c8:	602b      	str	r3, [r5, #0]
 800e7ca:	b016      	add	sp, #88	@ 0x58
 800e7cc:	bd70      	pop	{r4, r5, r6, pc}
 800e7ce:	466a      	mov	r2, sp
 800e7d0:	f000 f848 	bl	800e864 <_fstat_r>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	dbec      	blt.n	800e7b2 <__swhatbuf_r+0x12>
 800e7d8:	9901      	ldr	r1, [sp, #4]
 800e7da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7e2:	4259      	negs	r1, r3
 800e7e4:	4159      	adcs	r1, r3
 800e7e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7ea:	e7eb      	b.n	800e7c4 <__swhatbuf_r+0x24>

0800e7ec <__smakebuf_r>:
 800e7ec:	898b      	ldrh	r3, [r1, #12]
 800e7ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7f0:	079d      	lsls	r5, r3, #30
 800e7f2:	4606      	mov	r6, r0
 800e7f4:	460c      	mov	r4, r1
 800e7f6:	d507      	bpl.n	800e808 <__smakebuf_r+0x1c>
 800e7f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7fc:	6023      	str	r3, [r4, #0]
 800e7fe:	6123      	str	r3, [r4, #16]
 800e800:	2301      	movs	r3, #1
 800e802:	6163      	str	r3, [r4, #20]
 800e804:	b003      	add	sp, #12
 800e806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e808:	ab01      	add	r3, sp, #4
 800e80a:	466a      	mov	r2, sp
 800e80c:	f7ff ffc8 	bl	800e7a0 <__swhatbuf_r>
 800e810:	9f00      	ldr	r7, [sp, #0]
 800e812:	4605      	mov	r5, r0
 800e814:	4639      	mov	r1, r7
 800e816:	4630      	mov	r0, r6
 800e818:	f7fe fed4 	bl	800d5c4 <_malloc_r>
 800e81c:	b948      	cbnz	r0, 800e832 <__smakebuf_r+0x46>
 800e81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e822:	059a      	lsls	r2, r3, #22
 800e824:	d4ee      	bmi.n	800e804 <__smakebuf_r+0x18>
 800e826:	f023 0303 	bic.w	r3, r3, #3
 800e82a:	f043 0302 	orr.w	r3, r3, #2
 800e82e:	81a3      	strh	r3, [r4, #12]
 800e830:	e7e2      	b.n	800e7f8 <__smakebuf_r+0xc>
 800e832:	89a3      	ldrh	r3, [r4, #12]
 800e834:	6020      	str	r0, [r4, #0]
 800e836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e83a:	81a3      	strh	r3, [r4, #12]
 800e83c:	9b01      	ldr	r3, [sp, #4]
 800e83e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e842:	b15b      	cbz	r3, 800e85c <__smakebuf_r+0x70>
 800e844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e848:	4630      	mov	r0, r6
 800e84a:	f000 f81d 	bl	800e888 <_isatty_r>
 800e84e:	b128      	cbz	r0, 800e85c <__smakebuf_r+0x70>
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	f023 0303 	bic.w	r3, r3, #3
 800e856:	f043 0301 	orr.w	r3, r3, #1
 800e85a:	81a3      	strh	r3, [r4, #12]
 800e85c:	89a3      	ldrh	r3, [r4, #12]
 800e85e:	431d      	orrs	r5, r3
 800e860:	81a5      	strh	r5, [r4, #12]
 800e862:	e7cf      	b.n	800e804 <__smakebuf_r+0x18>

0800e864 <_fstat_r>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	4d07      	ldr	r5, [pc, #28]	@ (800e884 <_fstat_r+0x20>)
 800e868:	2300      	movs	r3, #0
 800e86a:	4604      	mov	r4, r0
 800e86c:	4608      	mov	r0, r1
 800e86e:	4611      	mov	r1, r2
 800e870:	602b      	str	r3, [r5, #0]
 800e872:	f7f4 fa33 	bl	8002cdc <_fstat>
 800e876:	1c43      	adds	r3, r0, #1
 800e878:	d102      	bne.n	800e880 <_fstat_r+0x1c>
 800e87a:	682b      	ldr	r3, [r5, #0]
 800e87c:	b103      	cbz	r3, 800e880 <_fstat_r+0x1c>
 800e87e:	6023      	str	r3, [r4, #0]
 800e880:	bd38      	pop	{r3, r4, r5, pc}
 800e882:	bf00      	nop
 800e884:	240006b4 	.word	0x240006b4

0800e888 <_isatty_r>:
 800e888:	b538      	push	{r3, r4, r5, lr}
 800e88a:	4d06      	ldr	r5, [pc, #24]	@ (800e8a4 <_isatty_r+0x1c>)
 800e88c:	2300      	movs	r3, #0
 800e88e:	4604      	mov	r4, r0
 800e890:	4608      	mov	r0, r1
 800e892:	602b      	str	r3, [r5, #0]
 800e894:	f7f4 fa32 	bl	8002cfc <_isatty>
 800e898:	1c43      	adds	r3, r0, #1
 800e89a:	d102      	bne.n	800e8a2 <_isatty_r+0x1a>
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	b103      	cbz	r3, 800e8a2 <_isatty_r+0x1a>
 800e8a0:	6023      	str	r3, [r4, #0]
 800e8a2:	bd38      	pop	{r3, r4, r5, pc}
 800e8a4:	240006b4 	.word	0x240006b4

0800e8a8 <atan2f>:
 800e8a8:	f000 b878 	b.w	800e99c <__ieee754_atan2f>

0800e8ac <sqrtf>:
 800e8ac:	b508      	push	{r3, lr}
 800e8ae:	ed2d 8b02 	vpush	{d8}
 800e8b2:	eeb0 8a40 	vmov.f32	s16, s0
 800e8b6:	f000 f86d 	bl	800e994 <__ieee754_sqrtf>
 800e8ba:	eeb4 8a48 	vcmp.f32	s16, s16
 800e8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c2:	d60c      	bvs.n	800e8de <sqrtf+0x32>
 800e8c4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e8e4 <sqrtf+0x38>
 800e8c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d0:	d505      	bpl.n	800e8de <sqrtf+0x32>
 800e8d2:	f7fd ffe1 	bl	800c898 <__errno>
 800e8d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e8da:	2321      	movs	r3, #33	@ 0x21
 800e8dc:	6003      	str	r3, [r0, #0]
 800e8de:	ecbd 8b02 	vpop	{d8}
 800e8e2:	bd08      	pop	{r3, pc}
 800e8e4:	00000000 	.word	0x00000000

0800e8e8 <fmaxf>:
 800e8e8:	b508      	push	{r3, lr}
 800e8ea:	ed2d 8b02 	vpush	{d8}
 800e8ee:	eeb0 8a40 	vmov.f32	s16, s0
 800e8f2:	eef0 8a60 	vmov.f32	s17, s1
 800e8f6:	f000 f831 	bl	800e95c <__fpclassifyf>
 800e8fa:	b930      	cbnz	r0, 800e90a <fmaxf+0x22>
 800e8fc:	eeb0 8a68 	vmov.f32	s16, s17
 800e900:	eeb0 0a48 	vmov.f32	s0, s16
 800e904:	ecbd 8b02 	vpop	{d8}
 800e908:	bd08      	pop	{r3, pc}
 800e90a:	eeb0 0a68 	vmov.f32	s0, s17
 800e90e:	f000 f825 	bl	800e95c <__fpclassifyf>
 800e912:	2800      	cmp	r0, #0
 800e914:	d0f4      	beq.n	800e900 <fmaxf+0x18>
 800e916:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91e:	dded      	ble.n	800e8fc <fmaxf+0x14>
 800e920:	e7ee      	b.n	800e900 <fmaxf+0x18>

0800e922 <fminf>:
 800e922:	b508      	push	{r3, lr}
 800e924:	ed2d 8b02 	vpush	{d8}
 800e928:	eeb0 8a40 	vmov.f32	s16, s0
 800e92c:	eef0 8a60 	vmov.f32	s17, s1
 800e930:	f000 f814 	bl	800e95c <__fpclassifyf>
 800e934:	b930      	cbnz	r0, 800e944 <fminf+0x22>
 800e936:	eeb0 8a68 	vmov.f32	s16, s17
 800e93a:	eeb0 0a48 	vmov.f32	s0, s16
 800e93e:	ecbd 8b02 	vpop	{d8}
 800e942:	bd08      	pop	{r3, pc}
 800e944:	eeb0 0a68 	vmov.f32	s0, s17
 800e948:	f000 f808 	bl	800e95c <__fpclassifyf>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d0f4      	beq.n	800e93a <fminf+0x18>
 800e950:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e958:	d5ed      	bpl.n	800e936 <fminf+0x14>
 800e95a:	e7ee      	b.n	800e93a <fminf+0x18>

0800e95c <__fpclassifyf>:
 800e95c:	ee10 3a10 	vmov	r3, s0
 800e960:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800e964:	d00d      	beq.n	800e982 <__fpclassifyf+0x26>
 800e966:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800e96a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800e96e:	d30a      	bcc.n	800e986 <__fpclassifyf+0x2a>
 800e970:	4b07      	ldr	r3, [pc, #28]	@ (800e990 <__fpclassifyf+0x34>)
 800e972:	1e42      	subs	r2, r0, #1
 800e974:	429a      	cmp	r2, r3
 800e976:	d908      	bls.n	800e98a <__fpclassifyf+0x2e>
 800e978:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800e97c:	4258      	negs	r0, r3
 800e97e:	4158      	adcs	r0, r3
 800e980:	4770      	bx	lr
 800e982:	2002      	movs	r0, #2
 800e984:	4770      	bx	lr
 800e986:	2004      	movs	r0, #4
 800e988:	4770      	bx	lr
 800e98a:	2003      	movs	r0, #3
 800e98c:	4770      	bx	lr
 800e98e:	bf00      	nop
 800e990:	007ffffe 	.word	0x007ffffe

0800e994 <__ieee754_sqrtf>:
 800e994:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e998:	4770      	bx	lr
	...

0800e99c <__ieee754_atan2f>:
 800e99c:	ee10 2a90 	vmov	r2, s1
 800e9a0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e9a4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e9a8:	b510      	push	{r4, lr}
 800e9aa:	eef0 7a40 	vmov.f32	s15, s0
 800e9ae:	d806      	bhi.n	800e9be <__ieee754_atan2f+0x22>
 800e9b0:	ee10 0a10 	vmov	r0, s0
 800e9b4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e9b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e9bc:	d904      	bls.n	800e9c8 <__ieee754_atan2f+0x2c>
 800e9be:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e9c2:	eeb0 0a67 	vmov.f32	s0, s15
 800e9c6:	bd10      	pop	{r4, pc}
 800e9c8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e9cc:	d103      	bne.n	800e9d6 <__ieee754_atan2f+0x3a>
 800e9ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d2:	f000 b881 	b.w	800ead8 <atanf>
 800e9d6:	1794      	asrs	r4, r2, #30
 800e9d8:	f004 0402 	and.w	r4, r4, #2
 800e9dc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e9e0:	b93b      	cbnz	r3, 800e9f2 <__ieee754_atan2f+0x56>
 800e9e2:	2c02      	cmp	r4, #2
 800e9e4:	d05c      	beq.n	800eaa0 <__ieee754_atan2f+0x104>
 800e9e6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800eab4 <__ieee754_atan2f+0x118>
 800e9ea:	2c03      	cmp	r4, #3
 800e9ec:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800e9f0:	e7e7      	b.n	800e9c2 <__ieee754_atan2f+0x26>
 800e9f2:	b939      	cbnz	r1, 800ea04 <__ieee754_atan2f+0x68>
 800e9f4:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800eab8 <__ieee754_atan2f+0x11c>
 800e9f8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800eabc <__ieee754_atan2f+0x120>
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	fe67 7a27 	vselge.f32	s15, s14, s15
 800ea02:	e7de      	b.n	800e9c2 <__ieee754_atan2f+0x26>
 800ea04:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ea08:	d110      	bne.n	800ea2c <__ieee754_atan2f+0x90>
 800ea0a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ea0e:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800ea12:	d107      	bne.n	800ea24 <__ieee754_atan2f+0x88>
 800ea14:	2c02      	cmp	r4, #2
 800ea16:	d846      	bhi.n	800eaa6 <__ieee754_atan2f+0x10a>
 800ea18:	4b29      	ldr	r3, [pc, #164]	@ (800eac0 <__ieee754_atan2f+0x124>)
 800ea1a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ea1e:	edd3 7a00 	vldr	s15, [r3]
 800ea22:	e7ce      	b.n	800e9c2 <__ieee754_atan2f+0x26>
 800ea24:	2c02      	cmp	r4, #2
 800ea26:	d841      	bhi.n	800eaac <__ieee754_atan2f+0x110>
 800ea28:	4b26      	ldr	r3, [pc, #152]	@ (800eac4 <__ieee754_atan2f+0x128>)
 800ea2a:	e7f6      	b.n	800ea1a <__ieee754_atan2f+0x7e>
 800ea2c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ea30:	d0e0      	beq.n	800e9f4 <__ieee754_atan2f+0x58>
 800ea32:	1a5b      	subs	r3, r3, r1
 800ea34:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ea38:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ea3c:	da1a      	bge.n	800ea74 <__ieee754_atan2f+0xd8>
 800ea3e:	2a00      	cmp	r2, #0
 800ea40:	da01      	bge.n	800ea46 <__ieee754_atan2f+0xaa>
 800ea42:	313c      	adds	r1, #60	@ 0x3c
 800ea44:	db19      	blt.n	800ea7a <__ieee754_atan2f+0xde>
 800ea46:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ea4a:	f000 f919 	bl	800ec80 <fabsf>
 800ea4e:	f000 f843 	bl	800ead8 <atanf>
 800ea52:	eef0 7a40 	vmov.f32	s15, s0
 800ea56:	2c01      	cmp	r4, #1
 800ea58:	d012      	beq.n	800ea80 <__ieee754_atan2f+0xe4>
 800ea5a:	2c02      	cmp	r4, #2
 800ea5c:	d017      	beq.n	800ea8e <__ieee754_atan2f+0xf2>
 800ea5e:	2c00      	cmp	r4, #0
 800ea60:	d0af      	beq.n	800e9c2 <__ieee754_atan2f+0x26>
 800ea62:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800eac8 <__ieee754_atan2f+0x12c>
 800ea66:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea6a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800eacc <__ieee754_atan2f+0x130>
 800ea6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ea72:	e7a6      	b.n	800e9c2 <__ieee754_atan2f+0x26>
 800ea74:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800eabc <__ieee754_atan2f+0x120>
 800ea78:	e7ed      	b.n	800ea56 <__ieee754_atan2f+0xba>
 800ea7a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ead0 <__ieee754_atan2f+0x134>
 800ea7e:	e7ea      	b.n	800ea56 <__ieee754_atan2f+0xba>
 800ea80:	ee17 3a90 	vmov	r3, s15
 800ea84:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ea88:	ee07 3a90 	vmov	s15, r3
 800ea8c:	e799      	b.n	800e9c2 <__ieee754_atan2f+0x26>
 800ea8e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800eac8 <__ieee754_atan2f+0x12c>
 800ea92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea96:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800eacc <__ieee754_atan2f+0x130>
 800ea9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea9e:	e790      	b.n	800e9c2 <__ieee754_atan2f+0x26>
 800eaa0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800eacc <__ieee754_atan2f+0x130>
 800eaa4:	e78d      	b.n	800e9c2 <__ieee754_atan2f+0x26>
 800eaa6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ead4 <__ieee754_atan2f+0x138>
 800eaaa:	e78a      	b.n	800e9c2 <__ieee754_atan2f+0x26>
 800eaac:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ead0 <__ieee754_atan2f+0x134>
 800eab0:	e787      	b.n	800e9c2 <__ieee754_atan2f+0x26>
 800eab2:	bf00      	nop
 800eab4:	c0490fdb 	.word	0xc0490fdb
 800eab8:	bfc90fdb 	.word	0xbfc90fdb
 800eabc:	3fc90fdb 	.word	0x3fc90fdb
 800eac0:	0800f330 	.word	0x0800f330
 800eac4:	0800f324 	.word	0x0800f324
 800eac8:	33bbbd2e 	.word	0x33bbbd2e
 800eacc:	40490fdb 	.word	0x40490fdb
 800ead0:	00000000 	.word	0x00000000
 800ead4:	3f490fdb 	.word	0x3f490fdb

0800ead8 <atanf>:
 800ead8:	b538      	push	{r3, r4, r5, lr}
 800eada:	ee10 5a10 	vmov	r5, s0
 800eade:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800eae2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800eae6:	eef0 7a40 	vmov.f32	s15, s0
 800eaea:	d30f      	bcc.n	800eb0c <atanf+0x34>
 800eaec:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800eaf0:	d904      	bls.n	800eafc <atanf+0x24>
 800eaf2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800eaf6:	eeb0 0a67 	vmov.f32	s0, s15
 800eafa:	bd38      	pop	{r3, r4, r5, pc}
 800eafc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ec34 <atanf+0x15c>
 800eb00:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ec38 <atanf+0x160>
 800eb04:	2d00      	cmp	r5, #0
 800eb06:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800eb0a:	e7f4      	b.n	800eaf6 <atanf+0x1e>
 800eb0c:	4b4b      	ldr	r3, [pc, #300]	@ (800ec3c <atanf+0x164>)
 800eb0e:	429c      	cmp	r4, r3
 800eb10:	d810      	bhi.n	800eb34 <atanf+0x5c>
 800eb12:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800eb16:	d20a      	bcs.n	800eb2e <atanf+0x56>
 800eb18:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ec40 <atanf+0x168>
 800eb1c:	ee30 7a07 	vadd.f32	s14, s0, s14
 800eb20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eb24:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800eb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb2c:	dce3      	bgt.n	800eaf6 <atanf+0x1e>
 800eb2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb32:	e013      	b.n	800eb5c <atanf+0x84>
 800eb34:	f000 f8a4 	bl	800ec80 <fabsf>
 800eb38:	4b42      	ldr	r3, [pc, #264]	@ (800ec44 <atanf+0x16c>)
 800eb3a:	429c      	cmp	r4, r3
 800eb3c:	d84f      	bhi.n	800ebde <atanf+0x106>
 800eb3e:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800eb42:	429c      	cmp	r4, r3
 800eb44:	d841      	bhi.n	800ebca <atanf+0xf2>
 800eb46:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800eb4a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800eb4e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800eb52:	2300      	movs	r3, #0
 800eb54:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb58:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eb5c:	1c5a      	adds	r2, r3, #1
 800eb5e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800eb62:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800ec48 <atanf+0x170>
 800eb66:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800ec4c <atanf+0x174>
 800eb6a:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800ec50 <atanf+0x178>
 800eb6e:	ee66 6a06 	vmul.f32	s13, s12, s12
 800eb72:	eee6 5a87 	vfma.f32	s11, s13, s14
 800eb76:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800ec54 <atanf+0x17c>
 800eb7a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb7e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800ec58 <atanf+0x180>
 800eb82:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb86:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800ec5c <atanf+0x184>
 800eb8a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ec60 <atanf+0x188>
 800eb92:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb96:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800ec64 <atanf+0x18c>
 800eb9a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800eb9e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ec68 <atanf+0x190>
 800eba2:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eba6:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800ec6c <atanf+0x194>
 800ebaa:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ebae:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800ec70 <atanf+0x198>
 800ebb2:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ebb6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ebba:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ebbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ebc2:	d121      	bne.n	800ec08 <atanf+0x130>
 800ebc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebc8:	e795      	b.n	800eaf6 <atanf+0x1e>
 800ebca:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ebce:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ebd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ebdc:	e7be      	b.n	800eb5c <atanf+0x84>
 800ebde:	4b25      	ldr	r3, [pc, #148]	@ (800ec74 <atanf+0x19c>)
 800ebe0:	429c      	cmp	r4, r3
 800ebe2:	d80b      	bhi.n	800ebfc <atanf+0x124>
 800ebe4:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ebe8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ebec:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ebf0:	2302      	movs	r3, #2
 800ebf2:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ebf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebfa:	e7af      	b.n	800eb5c <atanf+0x84>
 800ebfc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ec00:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ec04:	2303      	movs	r3, #3
 800ec06:	e7a9      	b.n	800eb5c <atanf+0x84>
 800ec08:	4a1b      	ldr	r2, [pc, #108]	@ (800ec78 <atanf+0x1a0>)
 800ec0a:	491c      	ldr	r1, [pc, #112]	@ (800ec7c <atanf+0x1a4>)
 800ec0c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ec10:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ec14:	edd3 6a00 	vldr	s13, [r3]
 800ec18:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ec1c:	2d00      	cmp	r5, #0
 800ec1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec22:	edd2 7a00 	vldr	s15, [r2]
 800ec26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec2a:	bfb8      	it	lt
 800ec2c:	eef1 7a67 	vneglt.f32	s15, s15
 800ec30:	e761      	b.n	800eaf6 <atanf+0x1e>
 800ec32:	bf00      	nop
 800ec34:	bfc90fdb 	.word	0xbfc90fdb
 800ec38:	3fc90fdb 	.word	0x3fc90fdb
 800ec3c:	3edfffff 	.word	0x3edfffff
 800ec40:	7149f2ca 	.word	0x7149f2ca
 800ec44:	3f97ffff 	.word	0x3f97ffff
 800ec48:	3c8569d7 	.word	0x3c8569d7
 800ec4c:	3d4bda59 	.word	0x3d4bda59
 800ec50:	bd6ef16b 	.word	0xbd6ef16b
 800ec54:	3d886b35 	.word	0x3d886b35
 800ec58:	3dba2e6e 	.word	0x3dba2e6e
 800ec5c:	3e124925 	.word	0x3e124925
 800ec60:	3eaaaaab 	.word	0x3eaaaaab
 800ec64:	bd15a221 	.word	0xbd15a221
 800ec68:	bd9d8795 	.word	0xbd9d8795
 800ec6c:	bde38e38 	.word	0xbde38e38
 800ec70:	be4ccccd 	.word	0xbe4ccccd
 800ec74:	401bffff 	.word	0x401bffff
 800ec78:	0800f34c 	.word	0x0800f34c
 800ec7c:	0800f33c 	.word	0x0800f33c

0800ec80 <fabsf>:
 800ec80:	ee10 3a10 	vmov	r3, s0
 800ec84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec88:	ee00 3a10 	vmov	s0, r3
 800ec8c:	4770      	bx	lr
	...

0800ec90 <_init>:
 800ec90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec92:	bf00      	nop
 800ec94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec96:	bc08      	pop	{r3}
 800ec98:	469e      	mov	lr, r3
 800ec9a:	4770      	bx	lr

0800ec9c <_fini>:
 800ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9e:	bf00      	nop
 800eca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eca2:	bc08      	pop	{r3}
 800eca4:	469e      	mov	lr, r3
 800eca6:	4770      	bx	lr
